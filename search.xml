<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见异常解决方案总结</title>
      <link href="/2021/04/28/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
      <url>/2021/04/28/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文是对日常代码开发调试过程中发现的一些常见异常的解决方法进行归纳，避免重复踩坑。</p><span id="more"></span><h2 id="Java-Spring"><a href="#Java-Spring" class="headerlink" title="Java/Spring"></a>Java/Spring</h2><ol><li><p><code>Caused by: com.alibaba.fastjson.JSONException: default constructor not found.</code></p><ul><li>解决方案：解析的目标类增加无参构造方法。</li></ul></li><li><p>使用 <code>frontend-maven-plugin</code> 进行maven打包时出现以下错误：</p><p> <code>Failed to execute goal com.github.eirslett:frontend-maven-plugin:1.6:install-node-and-npm (install node and npm) on project spider-web: Could not extract the npm archive: Could not extract archive: &#39;C:\Users\xxx\.m2\repository\com\github\eirslett\npm\5.7.1\npm-5.7.1.tar.gz&#39;: EOFException</code></p><ul><li>解决方案：把./m2目录下载不完全的包清掉之后再执行打包。</li></ul></li><li><p>Apache工具类方法FileUtils.forceDelete(File file)报 <code>java.io.IOException: Unable to delete file:</code> 错误。</p><ul><li>解决方案：检查file的路径是否是绝对路径，相对路径有可能会出问题。</li></ul></li><li><p><code>sudo: no tty present and no askpass program specified</code></p><ul><li>解决方案：设置指定用户（如 gitlab-runner）使用sudo命令不需要手动输入登录密码。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br><span class="line">gitlab-runner ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring Cloud架构下微服务使用 <code>@EnableJpaAuditing</code> 开启审计功能时，需要调用方服务依赖 <code>spring-aspects.jar</code> 包，否则在使用RestTemplate进行服务间调用时会报如下错误：<br> <code>o.s.s.o.provider.endpoint.TokenEndpoint  : Handling error: InternalAuthenticationServiceException, sun.reflect.annotation.TypeNotPresentExceptionProxy</code></p><ul><li><p>解决方案：通过在TypeNotPresentExceptionProxy类的构造方法中打断点，发现根本原因是：<br>  <code>java.lang.NoClassDefFoundError: org/springframework/beans/factory/aspectj/ConfigurableObject</code></p><p>  而该类是存在于spring-aspects包中，最终通过添加该依赖解决问题。</p></li></ul></li><li><p>JPA事务管理踩坑：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you retrieve an entity, for example using the findOne method call within a transactional method it has become managed from that point by the persistence provider.</span><br><span class="line">Now if you make any changes to that entity (which is actually a proxy object), upon transaction commit, those changes will be persisted to the database, regardless of the fact of invoking the save or update methods.</span><br><span class="line">save or persist has to be used when you are creating a new entity from scratch and persistence provider does not know of its existance yet.</span><br><span class="line">Remember that you can prevent making any changes upon commit, if you use detach or evict methods on that particular entity before those changes occur.</span><br></pre></td></tr></table></figure><ul><li><p>翻译：如果您检索实体，例如findOne在事务方法中使用方法调用，则由持久性提供程序从那时起管理它。现在，如果对该实体（实际上是代理对象）进行任何更改，则在事务提交时，无论调用save或update方法的事实如何，这些更改都将持久保存到数据库。save或者persist必须在从头开始创建新实体时使用，并且持久性提供程序还不知道它的存在。请记住，如果在发生更改之前在特定实体上使用detach或使用evict方法，则可以阻止在提交时进行任何更改。</p></li><li><p>解决方案：简而言之，就是在save通过findxxxByxxx查询得到的对象的时候，如果有spring的事务进行控制时，需要new一个同类型的对象再去save。</p></li><li><p>参考：<a href="https://stackoverflow.com/questions/46708063/springboot-jpa-need-no-save-on-transactional">SpringBoot JPA need no .save() on @Transactional?</a></p></li></ul></li><li><p>Logback使用AmqpAppender的json格式日志向elk打印日志时，如果使用%ex会因为异常堆栈信息中包含为转义的\t\n等字符导致logstash的json解析失败，从而使得日志中无法记录堆栈信息。</p><ul><li>解决思路：<ol><li>logstash的input直接使用 <code>codec =&gt; plain</code> 解析，此方式适用于 <code>AmqpAppender</code> 的 <code>pattern</code> 格式为字符串日志而不是类json格式日志</li><li>pattern中使用 <code>%replace</code> 对 <code>%ex</code> 中的 <code>\t\n</code> 等字符进行转义替换</li></ol></li></ul></li><li><p>使用Spring RestTemplate 获取 JPA 的 Page 对象时，会报错：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver - Failed to read HTTP message: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Can not construct instance of org.springframework.data.domain.Page: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of org.springframework.data.domain.Page: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information</span><br><span class="line">at [Source: java.io.PushbackInputStream@77866dd9; line: 1, column: 1]</span><br></pre></td></tr></table></figure><ul><li><p>解决方案：需要使用Page的实现类来接收Page对象，否则jackson在进行反序列化时会解析失败。</p><p>  编写自定义Page实现类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pagination</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">PageImpl</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">982848586283423960L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(List&lt;T&gt; content, Pageable pageable, <span class="keyword">long</span> total)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(content, pageable, total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(List&lt;T&gt; content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Lists.newArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  使用自定义Page实现类接收RestTemplate返回的Page对象：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pagination&lt;VO&gt; VOPage = restTemplate.getForObject(url, Pagination.class);</span><br></pre></td></tr></table></figure></li><li><p>参考：<a href="https://stackoverflow.com/questions/34647303/spring-resttemplate-with-paginated-api">Spring RestTemplate with paginated API</a></p></li></ul></li><li><p><code>Caused by: io.lettuce.core.RedisCommandExecutionException: ERR value is not an integer or out of range</code></p><ul><li><p>原因分析：出现该错误的原因是使用自定义的RestTemplate构造RedisAtomicLong时，RestTemplate的序列化方式可能不是RedisAtomicLong支持的。</p></li><li><p>解决方案：可以在构造RedisAtomicLong时使用 <code>new RedisAtomicLong(FLAG_KEY, redisConnectionFactory)</code> 代替 <code>new RedisAtomicLong(FLAG_KEY, redisTemplate)</code>。使用RedisAtomicLong类型默认支持的序列化方式进行构造不会出现此错误。</p></li><li><p>参考：<a href="https://blog.csdn.net/wangjun5159/article/details/52387782">https://blog.csdn.net/wangjun5159/article/details/52387782</a></p></li></ul></li><li><p>当使用Spring JdbcTemplate结合BeanPropertyRowMapper编写orm层时，enum字段转换会出现问题，BeanPropertyRowMapper默认enum类型反序列化时依据枚举值的ordinal（序号），即使enum类中使用@JsonCreator指定使用枚举值的某个字段进行反序列化也无效，因为BeanPropertyRowMapper中并未使用@JsonCreator注解。</p><ul><li><p>解决方案：自定义BeanPropertyRowMapper，重写getColumnValue方法，根据PropertyDescriptor判断是否是enum类型，并做对应的转换操作。</p></li><li><p>参考：<a href="https://stackoverflow.com/questions/15411843/spring-jdbc-beanpropertyrowmapper-yes-no-y-n-to-boolean-bean-properties">Spring JDBC BeanPropertyRowMapper yes no (‘Y’,’N’) to boolean bean properties</a></p></li></ul></li><li><p>使用Zuul转发OAuth2认证服务的路由，通过表单登录会报错：</p><p> <code>full authentication is required to access this resource</code></p><ul><li><p>原因分析：在客户端中处于未认证的状态访问需要认证的资源时会跳转至OAuth2认证服务的登录页面进行认证，而认证的过程中会发现判断request中没有 <code>Authorization</code> 请求头，而登录认证是需要 <code>client_id</code> 和 <code>client_secret</code> 信息存储在 <code>Authorization</code> 请求头里的，这就导致报错了。而根本的原因是从网关转发到认证服务的登录页面时直接重定向到了 <code>auth-server/login</code> 而不是 <code>gateway/proxy/login</code> 登录页面，重定向时丢失了 <code>Authorization</code> 信息。</p></li><li><p>解决方案：OAuth2认证服务在做单点登录SSO时，不通过网关进行路由转发。</p></li></ul></li><li><p>在使用Mybatis-Plus的 <code>getOne(Wrapper&lt;T&gt; wrapper)</code> 方法查询单条数据时，出现了以下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.DataIntegrityViolationException: Error attempting to get column &#x27;id&#x27; from result set.</span><br><span class="line">Cause: java.sql.SQLDataException: Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer; Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer; nested exception is java.sql.SQLDataException: Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer</span><br></pre></td></tr></table></figure><ul><li><p>原因分析：从报错信息看，应该是id字段的类型错误导致的实际的Long值超出了Integer取值范围，校对之后发现数据库中该字段类型是BIGINT，而实体类中属性的类型为Long，并没有问题。仔细排查发现原因是实体类上使用的lombok <code>@Buidler</code> 注解导致该类没有无参构造方法，从而导致Mybatis-Plus无法正确映射字段类型。</p></li><li><p>解决方案：在实体类上添加lombok <code>@NoArgsConstructor</code> 和 <code>@AllArgsConstructor</code> 注解。</p></li></ul></li><li><p>在进行 Spring AOP 编程时，有时会出现以下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;xxx&#x27; defined in class path resource [xxx]: Initialization of bean failed;……</span><br><span class="line">...</span><br><span class="line">Caused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class ……</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Cannot subclass final class ……</span><br></pre></td></tr></table></figure><ul><li><p>解决方案：通常情况下是由于切面的切入点表达式过于通用，包含了被 <code>final</code> 修饰的类，Java中不允许继承被 <code>final</code> 所修饰的类，而CGLIB增强是通过继承原对象后动态创建子类来实现的，导致了这样的错误。可以通过以下两种方法解决：</p><ol><li>取消使用 <code>final</code> 修饰目标类</li><li>调整PointCut切入点条件，过滤掉 <code>final</code> 修饰的类</li></ol></li><li><p>参考：<a href="https://stackoverflow.com/questions/36775611/problems-with-aop-in-spring-boot">Problems with Aop in spring boot</a>；<a href="https://www.cnblogs.com/skychenjiajun/p/8867038.html">spring aop问题</a></p></li></ul></li><li><p>同时使用 Lombok 的 <code>@Builder</code> 和 <code>@Data</code> 注解时，如果存在 <code>final</code> 修饰的属性并且手动添加了构造方法，则无法使用 <code>@NoArgsConstructor</code> 和 <code>@AllArgsConstructor</code>，并且会出现以下错误：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoWrapper</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">BaseVo</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * vo对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V vo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义字段键值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Object&gt; fields;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoWrapper</span><span class="params">(V vo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vo = vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error:(17, 1) java: 无法将类 com.yupaits.yutool.metadata.base.VoWrapper&lt;V&gt;中的构造器 VoWrapper应用到给定类型;</span><br><span class="line">                需要: V</span><br><span class="line">                找到: V,java.util.Map&lt;java.lang.Long,java.lang.Object&gt;</span><br><span class="line">                原因: 实际参数列表和形式参数列表长度不同</span><br></pre></td></tr></table></figure><ul><li>解决方案：在手动编写的构造方法上增加 <code>@Tolerate</code> 注解，让 Lombok 不识别此构造方法。<figure class="highlight java"><figcaption><span>&#123;16&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoWrapper</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">BaseVo</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * vo对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V vo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义字段键值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Object&gt; fields;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tolerate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoWrapper</span><span class="params">(V vo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vo = vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参考：<a href="https://blog.csdn.net/w605283073/article/details/89221853">记lombok@Data和@Builder一起用无法添加无参构造方法的坑</a></li></ul></li><li><p>Spring Boot项目启动报错：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:<span class="number">203</span>)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:<span class="number">179</span>)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:<span class="number">153</span>)</span><br><span class="line">... <span class="number">8</span> common frames omitted</span><br></pre></td></tr></table></figure><ul><li><p>参考： <a href="https://www.jianshu.com/p/eb36833186c">spring boot启动找不到ServletWebServerFactory bean</a></p></li><li><p>原因：pom.xml里spring-boot-starter-jetty的scope为provided（打包时不会打进jar包或war包），但IDEA的启动配置里没有勾选 “Include dependencies with “Provided” scope“，导致运行时没有将这个包加入，使得启动时没有找到相关的Web容器相关类。</p></li></ul></li></ol><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ol><li><p>Vue.js2.x 报 <code>Cannot read property &#39;__ob__&#39; of undefined</code> 的错误。</p><ul><li>解决方案：检查vue组件的 <code>data()</code> 方法是否有 <code>return</code> 语句。</li></ul></li></ol><Vssue title="常见异常解决方案总结"/>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoF的23种设计模式的分类和功能</title>
      <link href="/2020/08/04/designpattern-GoF%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/08/04/designpattern-GoF%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用范围来分。</p><h3 id="1-根据目的分类"><a href="#1-根据目的分类" class="headerlink" title="1. 根据目的分类"></a>1. 根据目的分类</h3><p>根据模式是用来完成什么工作来划分，这种方式可分为<strong>创建型模式</strong>、<strong>结构型模式</strong>和<strong>行为型模式</strong>3种。</p><ol><li><p>创建型模式：用于描述”怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。</p></li><li><p>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。</p></li><li><p>行为型模式：用于描述类或对象之间怎样互相协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。</p></li></ol><h3 id="2-根据作用范围分类"><a href="#2-根据作用范围分类" class="headerlink" title="2. 根据作用范围分类"></a>2. 根据作用范围分类</h3><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为<strong>类模式</strong>和<strong>对象模式</strong>两种。</p><ol><li><p>类模式：用于处理类与子类之间的关系，这些关系通过集成来建立，是静态的，在编译时便确定下来了。</p></li><li><p>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。</p></li></ol><table><thead><tr><th>范围/目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法</td><td>（类）适配器</td><td>模板方法；解释器</td></tr><tr><td>对象模式</td><td>单例；原型；抽象工厂；建造者</td><td>代理；（对象）适配器；桥接；装饰；外观；享元；组合</td><td>策略；命令；职责链；状态；观察者；中介者；迭代器；访问者；备忘录</td></tr></tbody></table><h2 id="GoF的23种设计模式的功能"><a href="#GoF的23种设计模式的功能" class="headerlink" title="GoF的23种设计模式的功能"></a>GoF的23种设计模式的功能</h2><table><thead><tr><th>模式名</th><th>英文名</th><th>功能</th></tr></thead><tbody><tr><td>单例模式</td><td>Singleton</td><td>某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</td></tr><tr><td>原型模式</td><td>Prototype</td><td>将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</td></tr><tr><td>工厂方法模式</td><td>Factory Method</td><td>定义一个用于创建产品的接口，由子类决定生产什么产品。</td></tr><tr><td>抽象工厂模式</td><td>AbstractFactory</td><td>提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</td></tr><tr><td>建造者模式</td><td>Builder</td><td>将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</td></tr><tr><td>代理模式</td><td>Proxy</td><td>为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</td></tr><tr><td>适配器模式</td><td>Adapter</td><td>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</td></tr><tr><td>桥接模式</td><td>Bridge</td><td>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</td></tr><tr><td>装饰模式</td><td>Decorator</td><td>动态地给对象增加一些职责，即增加其额外地功能。</td></tr><tr><td>外观模式</td><td>Facade</td><td>为多个复杂地子系统提供一个一致地接口，使这些子系统更加容易被访问。</td></tr><tr><td>享元模式</td><td>Flyweight</td><td>运用共享技术来有效地支持大量细粒度对象地复用。</td></tr><tr><td>组合模式</td><td>Composite</td><td>将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</td></tr><tr><td>模板方法模式</td><td>Template Method</td><td>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</td></tr><tr><td>策略模式</td><td>Strategy</td><td>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</td></tr><tr><td>命令模式</td><td>Command</td><td>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分隔开。</td></tr><tr><td>职责链模式</td><td>Chain of Responsibility</td><td>把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</td></tr><tr><td>状态模式</td><td>State</td><td>允许一个对象在其内部状态发生改变时改变其行为能力。</td></tr><tr><td>观察者模式</td><td>Observer</td><td>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</td></tr><tr><td>中介者模式</td><td>Mediator</td><td>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</td></tr><tr><td>迭代器模式</td><td>Iterator</td><td>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</td></tr><tr><td>访问者模式</td><td>Visitor</td><td>在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</td></tr><tr><td>备忘录模式</td><td>Memento</td><td>在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</td></tr><tr><td>解释器模式</td><td>Interpreter</td><td>提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</td></tr></tbody></table><p><a href="https://github.com/yupaits/study-java/blob/master/src/main/java/designpattern">代码示例</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2020/08/04/designpattern-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/08/04/designpattern-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计模式的概念和意义"><a href="#软件设计模式的概念和意义" class="headerlink" title="软件设计模式的概念和意义"></a>软件设计模式的概念和意义</h2><h3 id="1-软件设计模式的概念"><a href="#1-软件设计模式的概念" class="headerlink" title="1. 软件设计模式的概念"></a>1. 软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><h3 id="2-学习设计模式的意义"><a href="#2-学习设计模式的意义" class="headerlink" title="2. 学习设计模式的意义"></a>2. 学习设计模式的意义</h3><p><strong>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</strong> 正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h2 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h2><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。</p><h3 id="1-模式名称"><a href="#1-模式名称" class="headerlink" title="1. 模式名称"></a>1. 模式名称</h3><p>每个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（Pattern Name）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h3><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h3><p>描述了该模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境搭建</title>
      <link href="/2020/04/06/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/06/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h2><table><thead><tr><th>名称</th><th>简介</th><th>使用说明</th></tr></thead><tbody><tr><td>OpenLDAP</td><td>开源的LDAP协议实现。</td><td><a href="https://github.com/osixia/docker-openldap">OpenLDAP</a></td></tr><tr><td>GitLab</td><td>Git仓库管理工具</td><td><a href="https://blog.yupaits.com/in-action/gitlab-manual.html">GitLab使用手册</a></td></tr><tr><td>GitLab-CI</td><td>GitLab默认集成的持续集成工具</td><td><a href="https://docs.gitlab.com/runner/">GitLab-CI Runner</a></td></tr><tr><td>Confluence</td><td>专业的企业知识管理与协同软件，可用于构建企业wiki</td><td>–</td></tr><tr><td>Jira</td><td>项目与事务跟踪工具，广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域</td><td>–</td></tr><tr><td>Crowd</td><td>Confluence与Jira单点登录</td><td>–</td></tr><tr><td>SonarQube</td><td>代码质量管理平台</td><td><a href="https://docs.sonarqube.org/latest/">SonarQube</a></td></tr><tr><td>Nexus</td><td>Maven仓库管理器</td><td><a href="https://help.sonatype.com/docs">Sonatype Help</a></td></tr><tr><td>Portainer</td><td>Docker可视化管理工具</td><td><a href="https://www.portainer.io/installation/">Portainer安装</a></td></tr><tr><td>jumpserver</td><td>开源堡垒机，符合4A的专业运维审计系统。</td><td><a href="https://docs.jumpserver.org/zh/docs/dockerinstall.html#">jumpserver</a></td></tr></tbody></table><span id="more"></span><h2 id="使用-docker-compose-部署"><a href="#使用-docker-compose-部署" class="headerlink" title="使用 docker-compose 部署"></a>使用 docker-compose 部署</h2><p>以上工具的 <code>docker-compose.yml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">900</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/portainer/data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=sql123</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/mysql/conf:/etc/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab-runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitlab/gitlab-runner</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-runner</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/gitlab-runner/conf:/etc/gitlab-runner</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">openldap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/openldap:1.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openldap</span></span><br><span class="line">    <span class="comment"># 以下环境变量仅用于新的LDAP服务器</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="comment"># 组织名称</span></span><br><span class="line">      <span class="attr">LDAP_ORGANISATION:</span> <span class="string">&#x27;yupaits&#x27;</span></span><br><span class="line">      <span class="comment"># LDAP域</span></span><br><span class="line">      <span class="attr">LDAP_DOMAIN:</span> <span class="string">yupaits.com</span></span><br><span class="line">      <span class="comment"># LDAP基本DN。为空，默认取LDAP_DOMAIN的值</span></span><br><span class="line">      <span class="attr">LDAP_BASE_DN:</span> </span><br><span class="line">      <span class="comment"># LDAP管理员密码。默认是 admin</span></span><br><span class="line">      <span class="attr">LDAP_ADMIN_PASSWORD:</span> <span class="string">ldap123</span></span><br><span class="line">      <span class="comment"># LDAP配置密码。默认是 config</span></span><br><span class="line">      <span class="attr">LDAP_CONFIG_PASSWORD:</span> <span class="string">config</span></span><br><span class="line">    <span class="comment"># 使用现有的LDAP数据库</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/slapd/database:/var/lib/ldap</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/slapd/config:/etc/ldap/slapd.d</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">389</span><span class="string">:389</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">636</span><span class="string">:636</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">openldap-backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/openldap-backup:1.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openldap-backup</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="comment"># OPENLDAP配置备份cron表达式，默认是 &#x27;0 4 * * *&#x27;，每天凌晨4点</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_CONFIG_CRON_EXP:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line">      <span class="comment"># OPENLDAP数据备份cron表达式，默认是 &#x27;0 4 * * *&#x27;</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_DATA_CRON_EXP:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line">      <span class="comment"># OPENLDAP备份保存天数，默认15天</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_TTL:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/openldap/backup:/data/backup</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">phpLDAPadmin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/phpldapadmin:0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">phpLDAPadmin</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">PHPLDAPADMIN_LDAP_HOSTS:</span> <span class="string">ldap-host</span></span><br><span class="line">      <span class="attr">PHPLDAPADMIN_HTTPS:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;openldap:ldap-host&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">680</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/nexus/data:/nexus-data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:10</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=pg123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube:lts</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.url=jdbc:postgresql://postgres/sonar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.username=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.password=pg123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_conf:/opt/sonarqube/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_data:/opt/sonarqube/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">confluence:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-confluence:6.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">confluence</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8090</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8091</span><span class="string">:8091</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/confluence/home:/var/atlassian/confluence</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/confluence/logs:/opt/atlassian/confluence/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jira:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-jira:7.10.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jira</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/jira/home:/var/atlassian/jira</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/jira/logs:/opt/atlassian/jira/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">crowd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-crowd:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">crowd</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_MINIMUM_MEMORY=384m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_MAXIMUM_MEMORY=768m</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8095</span><span class="string">:8095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/crowd:/var/atlassian/application-data/crowd</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">sonarqube_conf:</span></span><br><span class="line">  <span class="attr">sonarqube_extensions:</span></span><br><span class="line">  <span class="attr">sonarqube_logs:</span></span><br><span class="line">  <span class="attr">sonarqube_data:</span></span><br></pre></td></tr></table></figure><h2 id="首次登录说明"><a href="#首次登录说明" class="headerlink" title="首次登录说明"></a>首次登录说明</h2><ul><li>phpLDAPadmin</li></ul><p>初始的登录账号密码为：<code>cn=admin,dc=yupaits,dc=com</code> <code>ldap123</code></p><ul><li>gitlab-runner</li></ul><p>gitlab-runner的配置文件 <code>config.toml</code> 的内容为：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>sonarqube</li></ul><p>初始登录账号密码为：<code>admin</code> <code>admin</code></p><p>在宿主机执行 <code>sudo nano /etc/sysctl.conf</code> 追加写入 <code>vm.max_map_count=262144</code>，执行 <code>sudo sysctl -p</code> 使配置生效</p><ul><li>mysql</li></ul><p>注释 <code>docker-compose.yml</code> 第21-23行，执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;env_path&#125;</span>/volumes  <span class="comment"># $&#123;env_path&#125;替换为实际的目录</span></span><br><span class="line">sudo docker cp mysql:/etc/mysql mysql/</span><br><span class="line">sudo mv mysql/mysql mysql/conf</span><br><span class="line">sudo docker cp mysql:/var/lib/mysql mysql/data</span><br></pre></td></tr></table></figure><p>取消21-23注释再执行 <code>sudo docker-compose up -d</code></p><ul><li><p>altalassian</p><p>  破解步骤：</p><ol><li>执行 <code>java -jar confluence_keygen.jar</code></li><li>填写 Name 和 Server ID，点击 <code>.gen!</code> 生成 Key</li><li>点击 <code>.patch!</code> 选择 <code>atlassian-extras-2.4.jar</code>，如果破解的 Jar 包名称不是则重命名为 <code>atlassian-extras-2.4.jar</code></li><li>将破解之后的 <code>atlassian-extras-2.4.jar</code> 覆盖当前实例的相应 Jar 包（名称和版本可能不一样，要修改成当前实例中的 Jar 包名称）</li><li>重启服务，填写 Key，完成安装</li></ol></li></ul><Vssue title="开发环境搭建"/>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2使用指南</title>
      <link href="/2020/03/28/WSL2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/28/WSL2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="WSL2简介及安装"><a href="#WSL2简介及安装" class="headerlink" title="WSL2简介及安装"></a>WSL2简介及安装</h2><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-about">关于 WSL2</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-install">安装 WSL2</a></li></ul><h2 id="安装WSL2支持的Linux发行版"><a href="#安装WSL2支持的Linux发行版" class="headerlink" title="安装WSL2支持的Linux发行版"></a>安装WSL2支持的Linux发行版</h2><p>进入 Microsoft Store 搜索关键词 <code>wsl</code>，选择要安装的Linux发行版，推荐安装 Ubuntu。</p><span id="more"></span><h2 id="Ubuntu系统配置"><a href="#Ubuntu系统配置" class="headerlink" title="Ubuntu系统配置"></a>Ubuntu系统配置</h2><h3 id="替换-APT-软件源"><a href="#替换-APT-软件源" class="headerlink" title="替换 APT 软件源"></a>替换 APT 软件源</h3><p>备份原有源文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/apt/sources.list</code> 修改 <code>sources.list</code> 文件，更改为阿里源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新软件源并升级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="配置中文环境"><a href="#配置中文环境" class="headerlink" title="配置中文环境"></a>配置中文环境</h3><p>安装中文语言包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install language-pack-zh-hans language-pack-zh-hans-base</span><br></pre></td></tr></table></figure><p>运行语言支持检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install $(check-language-support)</span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/default/locale</code> 修改配置文件为如下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">LANGUAGE</span>=zh_CN:zh</span><br><span class="line"><span class="attr">LC_NUMERIC</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TIME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MONETARY</span>=zh_CN</span><br><span class="line"><span class="attr">LC_PAPER</span>=zh_CN</span><br><span class="line"><span class="attr">LC_NAME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ADDRESS</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TELEPHONE</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MEASUREMENT</span>=zh_CN</span><br><span class="line"><span class="attr">LC_IDENTIFICATION</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ALL</span>=zh_CN.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/environment</code> 在环境配置文件追加以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">LANGUAGE</span>=zh_CN:zh</span><br><span class="line"><span class="attr">LC_NUMERIC</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TIME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MONETARY</span>=zh_CN</span><br><span class="line"><span class="attr">LC_PAPER</span>=zh_CN</span><br><span class="line"><span class="attr">LC_NAME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ADDRESS</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TELEPHONE</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MEASUREMENT</span>=zh_CN</span><br><span class="line"><span class="attr">LC_IDENTIFICATION</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ALL</span>=zh_CN.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>重启 WSL2 服务：</p><p>打开 <code>任务管理器 -&gt; 服务 -&gt; LxssManager</code>，右键菜单选择 <code>重新启动</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发实战总结</title>
      <link href="/2020/02/20/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/20/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>总结了一些实际开发过程中需要注意的一些细节。（持续更新…）</p><span id="more"></span><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><p><code>RandomUtils.nextInt()</code> 生成随机整数，<code>RandomStringUtils</code> 生成随机字符串。</p></li><li><p>实现随机抽取集合里面的部分元素 <code>Collections.shuffle(list)</code> 将 list 元素循序打乱 <code>list.subList(0, loreResource.getQuesNum()); // subList(fromIndex, toIndex)的实际范围是[fromIndex, toIndex)</code> 获取指定数量的元素。</p></li><li><p><code>ListUtils.select()</code> 方法，类似于 JQuery 数组的 filter 方法。</p></li><li><p><code>System.out.println(Arrays.toString(someList.toArray()));</code> 方法可以方便地打印List内容。</p></li><li><p><code>Arrays.asList(T... a)</code> 无法将基本类型转换为 List，原因是 <code>asList()</code> 方法接收的是泛型的可变长参数，而基本类型（如int，char等）是无法泛型化的。使用 <code>asList()</code> 对基本数据类型进行操作时需要使用基本数据类型的包装类。<code>asList()</code> 返回的 ArrayList 类型是 <code>Arrays</code> 的一个内部类，没有实现 <code>add()</code> 、 <code>remove()</code> 等用于操作 ArrayList 的方法，当我们需要对 <code>asList()</code> 返回的列表进行常用操作时需要对其进行转换，<code>List list = new ArrayList(Arrays.asList(testArray));</code></p></li><li><p>Java类启动顺序，<code>static</code> 静态代码先于构造方法。 </p></li></ol><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ol><li><p>如果项目启用了事务管理，Service 的实现类在增删改数据时需要加上 <code>@Transactional</code> 注解标明该类或方法加入了事务管理。</p></li><li><p>使用 shiro 权限框架时，需要检查需要权限控制的 Controller 类或方法是否加上了 <code>@RequiresRoles</code> 或 <code>@RequiresPermissions</code> 注解。</p></li><li><p>Controller 的方法传入 <code>@RequestBody</code> 参数时，method 只能是 POST 或 PUT。</p></li><li><p>Controller 通过 Model 对象实例通过 setAttribute 方法传值到前端 jsp 页面或是其他模板页面时，如果是在 js 里获取的话需要通过 var param = ‘${param}’ 方式获取，用’’引起来可以避免当 ${param} 为空时 js 代码报错的问题，但同时也将参数类型强制转换为 string 类型了；当参数类型是 List 集合时，需要使用 eval(‘${param}’) 方法。</p></li><li><p>后台在增删改数据时，记得更新和该数据相关的缓存；特别是在更改记录时要更新更改之前和之后会包含该记录的缓存。</p></li><li><p>跨域访问时，可以在全局 Interceptor 中使用 <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, ACCESS_CONTROL_ALLOW_ORIGIN)</code> 限制可跨域访问的域名，类似的，使用 <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, ACCESS_CONTROL_ALLOW_METHODS)</code> 限制请求方法，<code>httpServletResponse.setHeader(&quot;Access-Control-Max-Age&quot;, ACCESS_CONTROL_MAX_AGE)</code> 设置可跨域访问的时限， <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, ACCESS_CONTROL_ALLOW_HEADERS)</code> 限制请求头参数。 </p></li><li><p>SpringBoot 中可以使用 <code>@EnableScheduling</code> 注解启用定时任务功能，在方法上使用 <code>@Scheduled</code> 注解设置任务启动的时间。</p></li><li><p>访问日志功能的实现：定义一个 LogInterceptor ，使用 <code>logger.info()</code> 等方法记录下 httpServletRequest 中相关属性。</p></li><li><p>shiro 的 reaml 中保存的 Principal 为 User 对象时，页面上想要获取 User 对象的 username 属性可以使用 <code>&lt;shiro:principal property=&quot;username&quot;/&gt;</code> 标签，注意这里的 property 即是对应的属性名。</p></li><li><p>Spring 框架自带的 <code>BeanUtils.copyProperties(Object source, Object target, String... ignoreProperties)</code> 方法可以方便的做类属性的拷贝。</p></li><li><p>SpringBoot security 在使用 <code>.antMatchers(&quot;/management/**&quot;).hasAnyRole(&quot;SuperAdmin&quot;, &quot;admin&quot;)</code> 要注意数据库里保存的角色名称必须要以 <code>&#39;ROLE_&#39;</code> 开头，这里的角色在数据库的名称应为 <code>&quot;ROLE_SuperAdmin&quot;</code> 和 <code>&quot;ROLE_admin&quot;</code>。</p></li><li><p>SpringBoot security 的注解 <code>@PreAuthorize</code> 可以用在类或方法上来进行权限控制，其中 <code>hasRole()</code> 和 <code>hasAuthority()</code> 的区别在于前者可以忽略角色信息的前缀（默认是 “ROLE_”），而后者则必须要包含前缀。例如当保存的角色信息为”ROLE_admin”时， <code>hasRole(&#39;admin&#39;)</code> 和 <code>hasAuthority(&#39;ROLE_admin&#39;)</code> 是等效的。</p></li><li><p>SpringBoot 在整合 shiro 时无法在使用 rememberMeCookie 实现”记住我”（即 rememberMe）功能的同时实现使用 sessionIdCookie 单独管理用户 session 信息。而使用 sessionIdCookie 可以解决出现404之后刷新页面直接跳转到登录页面的问题（问题详情：<a href="http://jinnianshilongnian.iteye.com/blog/1999182">http://jinnianshilongnian.iteye.com/blog/1999182</a>）。</p></li><li><p>SpringBoot JPA 可以很简单的集成分页和排序功能，支持的 request 参数如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page，第几页，从 0 开始，默认为第 0 页；  </span><br><span class="line">size，每一页的数量，默认为 10；  </span><br><span class="line">sort，排序相关的信息，以 `property,direction(,ASC|DESC)` 的方式组织，例如 `sort=firstname&amp;sort=lastname,desc` 表示在按 firstname 增序排列的基础上按 lastname 的降序排列。  </span><br></pre></td></tr></table></figure><p> 例如请求链接为：<br> <code>http://host:port/blogs?page=0&amp;size=3&amp;sort=category,asc&amp;sort=description,desc</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Blog&gt; <span class="title">findAll</span><span class="params">(<span class="meta">@PageableDefault(size = 10, page = 0, sort = &quot;id&quot;, direction = Sort.Direction.DESC)</span> Pageable pageable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Page&lt;Blog&gt; blogPage = (Page&lt;Blog&gt;) redisTemplate.opsForValue().get(blogCachePrefix + JSON.toJSONString(pageable));</span><br><span class="line">    <span class="keyword">if</span> (blogPage == <span class="keyword">null</span>) &#123;</span><br><span class="line">        blogPage = blogRepository.findAll(pageable);</span><br><span class="line">        redisTemplate.opsForValue().set(blogCachePrefix + JSON.toJSONString(pageable), blogPage, <span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页博客博客，pageable ：&#123;&#125;, 耗时：&#123;&#125;ms&quot;</span>, JSON.toJSONString(pageable), (endTime - startTime));</span><br><span class="line">    <span class="keyword">return</span> blogPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 jackson 将实体对象转成 JSON ，在属性上加上 @JsonInclude(JsonInclude.Include.NON_NULL) 注解，当该属性NULL或者为空时将不参加序列化。JsonInclude 可选项有：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JsonInclude.Include.ALWAYS      //默认总是参加序列化</span><br><span class="line">JsonInclude.Include.NON_DEFAULT //属性为默认值不序列化</span><br><span class="line">JsonInclude.Include.NON_EMPTY   //属性为空或NULL都不序列化</span><br><span class="line">JsonInclude.Include.NON_NULL    //属性为NULL不序列化</span><br></pre></td></tr></table></figure></li><li><p>实体类里的<strong>Enum</strong>类型的属性映射数据库字段的时候可以使用 <code>@Convert(converter = Status.class, attributeName = &quot;status&quot;)</code> 注解；jackson 在序列化<strong>Enum</strong>类型的时候可以在<strong>Enum</strong>类对应的<strong>getter</strong>方法使用 <code>@JsonValue</code> 注解来定义向前端输出的内容，而前端传过来的值同样可以通过 <code>@JsonCreator</code> 注解反序列化得到对应的<strong>Enum</strong>类型对象。</p></li><li><p><em>1.5.6.RELEASE</em> 版本的<strong>SpringBoot</strong>在使用 <code>ElasticsearchRespository</code> 类时会产生以下异常：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException:                 Could not write JSON document: (was java.lang.NullPointerException) (through reference chain: org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl[&quot;facets&quot;]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain:     org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl[&quot;facets&quot;])</span><br></pre></td></tr></table></figure><p> 推荐使用 <em>1.4.7.RELEASE</em> 版本。</p></li><li><p>Json 序列化的时候会将 Long 等类型强转成类似于 Javascript 中的 number 类型（内部实现<strong>可能</strong>是转成 Double 类型），这样会导致大数值丢失精度的问题。jackson 可以使用 <code>@JsonSerialize(using = ToStringSerializer.class)</code> 注解将 Long 类型转成String 再进行序列化，但这样会导致前端接收到的数据类型变成了 String 而不是 number。</p></li><li><p>在进行批量更新操作时，需要将待更新的数据进行排序之后再进行批量操作，这样可以避免并发场景下的死锁问题。</p></li><li><p>@RequestBody注解的实体对象如果需要将前端传过来的 array 转成实体中相应的 String 类型的属性时，可以在该属性的 setter 方法进行转换操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;welcome_message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeMessage</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;articles&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String articles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArticles</span><span class="params">(List&lt;WxMpXmlOutNewsMessage.Item&gt; articles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.articles = JSON.toJSONString(articles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;WxMpXmlOutNewsMessage.Item&gt; getArticles() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(<span class="keyword">this</span>.articles, WxMpXmlOutNewsMessage.Item.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 相应的，如果需要将数据库中存储的 String 转成 List 传回前端或者应用于后台逻辑，可以在字段对应属性的 getter 方法进行转换。<br> 这里使用的是 fastjson 的 JSON 类。</p></li><li><p>过长的 Long 类型主键转 Json 传回前端会使用js处理会丢失精度，可以在实体的 @Id 上配置转成 Json 的序列化及反序列化处理类，在将 id 传回前端或者接收 前端传过来的 id 时使用 String 类型来进行转换保证精度，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决Long类型的主键转json传回前端丢失精度的问题，将Long转成String</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> yupaits</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2017/12/18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Long value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jsonGenerator.writeString(String.valueOf(value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将前端String类型的主键转成Long类型</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> yupaits</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2017/12/18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String value = jsonParser.getText();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="keyword">null</span> : Long.parseLong(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = LongJsonSerializer.class)</span></span><br><span class="line"><span class="meta">@JsonDeserialize(using = LongJsonDeserializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li><li><p>SpringAop的Order顺序遵循先进后出的原则。如Aop1（order=1），Aop2（order=2），则切面的执行顺序为<code>Aop1.doAround.beforeProceed</code> -&gt;  <code>Aop1.doBefore</code> -&gt; <code>Aop2.doAround.beforeProcced</code> -&gt; <code>Aop2.doBefore</code> -&gt; <code>Aop2.doAround.afterProcced</code> -&gt; <code>Aop2.doAfter</code> -&gt; <code>Aop2.doAfterReturning</code> -&gt; <code>Aop1.doAround.afterProcced</code> -&gt; <code>Aop1.doAfter</code> -&gt; <code>Aop1.doAfterReturning</code>。</p></li><li><p>Spring Boot启动时指定环境。</p><ul><li>IDEA中进入 <code>Run/Debug Configurations</code> 设置 <code>Environment-&gt;VM options</code> 为 <code>-Dspring.profiles.active=test</code>，或者在 <code>Environment variables</code> 中添加参数 <code>spring.profiles.active</code> 并指定参数的值为 <code>test</code>。</li><li>命令行使用 <code>java -jar *.jar</code> 启动时，在命令的后面增加 <code>--spring.profiles.active=test</code>。</li><li>在 <code>application.yml</code> 中配置 <code>spring.profiles.active</code> 的值为 <code>test</code>。</li></ul></li><li><p>通过zuul上传包含中文名的文件时，需要在上传文件url的path加上 <code>/zuul</code> 前缀即可。</p><p> 例如：当上传url为 <code>http://localhost:10060/upload/image</code>，上传名为 <code>头像.jpg</code> 的文件，会出现报错 <code>java.io.FileNotFoundException: E:\upload\image\2018-5\??.jpg (文件名、目录名或卷标语法不正确。)</code>。如果将url直接改为<code>http://localhost:10060/zuul/upload/image</code> 则可以上传成功。</p></li><li><p>Spring Boot Jpa实现实体联合主键：实体类加上 <code>@IdClass(XxxKey.class)</code> 注解，实体类中多个联合注解的属性上都加上 <code>@Id</code> 注解。示例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(UserRoleKey.class)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shop_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRoleKey</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Spring Cloud Sleuth的日志中会包含链路追踪的信息，具体体现为:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-04-08 23:56:50.459 INFO [bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false] 8764 — [nio-8080-exec-1] demo.JpaSingleDatasourceApplication : Step 2: Handling print</span><br><span class="line">2017-04-08 23:56:50.459 INFO [bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false] 8764 — [nio-8080-exec-1] demo.JpaSingleDatasourceApplication : Step 1: Handling home</span><br></pre></td></tr></table></figure><p> 比一般的日志多出了 <code>[bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false]</code> 这些内容，对应 <code>[appname,traceId,spanId,exportable]</code>。</p><ul><li>appname：服务名称</li><li>traceId\spanId：链路追踪的两个术语</li><li>exportable: 是否是发送给zipkin</li></ul></li><li><p>SpringBoot中使用 <code>logback-spring.xml</code> 进行日志打印的配置。示例：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;app-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; - [$&#123;appName&#125;] - $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %c - %m%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;amqp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.amqp.rabbit.logback.AmqpAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>5672<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">applicationId</span>&gt;</span>okbuy<span class="tag">&lt;/<span class="name">applicationId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">routingKeyPattern</span>&gt;</span>logstash<span class="tag">&lt;/<span class="name">routingKeyPattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">declareExchange</span>&gt;</span>true<span class="tag">&lt;/<span class="name">declareExchange</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exchangeType</span>&gt;</span>direct<span class="tag">&lt;/<span class="name">exchangeType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exchangeName</span>&gt;</span>okbuy.log<span class="tag">&lt;/<span class="name">exchangeName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateId</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxSenderRetries</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxSenderRetries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">durable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">durable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryMode</span>&gt;</span>PERSISTENT<span class="tag">&lt;/<span class="name">deliveryMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdoutAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;asyncStdoutAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdoutAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;amqp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;asyncStdoutAppender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring的事务控制和数据库的事务控制之间的关系：</p><ul><li>数据库开启事务、提交事务、回滚事务对应jdbc的三个api，Spring事务控制的本质是通过AOP把这三个方法增强在不同的地方调用，实现Spring的事务在方法之间的传播。</li><li>数据库在开启事务到提交的过程中，数据库本身有异常都会回滚。 </li><li>业务异常导致数据库回滚，是Spring通过调用 <code>jdbc rollback</code> 的api实现的。</li></ul></li><li><p>Spring Security OAuth2 Client项目中@EnableOAuth2Sso注解修饰Application启动类时不起作用，需要放在@Configuration修饰的类上（通常是继承WebSecurityConfigurerAdapter的配置类）才能正常工作。</p></li><li><p>检查幂等（是否重复请求）伪代码：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_unique` (</span><br><span class="line">    `request_id` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;request id&#x27;</span>,</span><br><span class="line">    `gmt_create` <span class="type">timestamp</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `gmt_modified` <span class="type">timestamp</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`request_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;幂等表&#x27;</span>;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bool <span class="title">checkUnique</span><span class="params">(String requestId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        UniqueDO uniqueDO = buildUniqueDO(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reqeustId唯一索引，重复则抛异常DataIntegrityViolationException</span></span><br><span class="line">        uniqueDao.insert(uniqueDO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入成功说明之前没有数据，返回没有被幂等</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (DataIntegrityViolationException ex) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//出现异常不一定时由于db里面有数据，可能是事务隔离级别导致，</span></span><br><span class="line">        <span class="comment">//所以要再查一次，确认数据再db里面存在</span></span><br><span class="line">        UniqueDO uniqueDO = uniqueDao.selectByRequestId(requestId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uniqueDO == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//不存在数据则抛异常让方法重试</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存在返回被幂等</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> requestId一般由客户端sdk生成和具体业务相关联。</p></li><li><p>profile为default时会读取 <code>application.yml</code> 的配置，而当profile不是default时，会读取对应的 <code>applicaiton-&#123;profile&#125;.yml</code> 的配置。需要注意的是，如果 <code>application.yml</code> 和 <code>application-&#123;profile&#125;.yml</code> 中存在相同的配置项时，<code>application.yml</code> 的优先级更高，所以一般在 <code>application.yml</code> 中设置共用的配置项。</p></li><li><p>在SpringMVC中 <code>@RequestBody</code> 注解修饰的对象如果存在 <code>@DateTimeFormat</code> 注解修饰的属性，而且使用 jackson 进行反序列，那么 <code>@DateTimeFormat</code> 注解实际上是不起作用的，此时需要使用 <code>@JsonFormat</code> 注解进行代替。示例如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime startTime;</span><br></pre></td></tr></table></figure></li><li><p>Spring AOP 的切入点（PointCut）表达式使用规则：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)</span><br></pre></td></tr></table></figure><ul><li><code>?</code> 的部分表示可省略</li><li><code>*</code> 用来代表任意字符</li><li><code>..</code> 用来表示任意个参数</li><li><code>modifiers-pattern</code> 表示修饰符如 public、protected 等</li><li><code>ret-type-pattern</code> 表示方法返回类型</li><li><code>declaring-type-pattern</code> 表示特定的类</li><li><code>name-pattern</code> 表示方法名称</li><li><code>param-pattern</code> 表示参数</li><li><code>throws-pattern</code> 表示抛出的异常</li></ul></li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><ol><li>页面的modal元素记得加上 <code>data-backdrop=&#39;static&#39;</code> 和 <code>data-keyboard=&#39;false&#39;</code>，禁用非 modal 内点击和点击键盘 ESC 键 取消 modal。</li></ol><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><ol><li><p>批量删除并返回批量删除的结果时，ajax 方法中 async 一定要配置成 false，否则页面无法正确响应批量删除的结果。</p></li><li><p>使用 qrcodejs 生成二维码图片之后直接使用 <code>$(&#39;img&#39;).attr(&#39;src&#39;)</code> 返回的值是undefined，这时需要使用 <code>setTimeout(function(), delay_time)</code> 来拿到图片的 src 。</p></li><li><p>js数组遍历删除元素的方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        arr.splice(i, <span class="number">1</span>);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p>局部列表滚动查看css，height和max-height二选一。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>; //固定高度的列表</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">500px</span>; //列表最大高度</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-list</span>::-webkit-scrollbar &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个基于网格的响应式布局简单示例：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="number">1</span>fr;</span><br><span class="line">    grid-gap: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">719px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">        grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">719px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">        grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 浏览器窗口宽度大于719px时，元素呈2列排布，反之呈1列排布。</p></li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li>使用原生HTML进行表单开发时，如果没有指定 <code>&lt;button&gt;</code> 的 <code>type</code> 属性，则默认 <code>type=&quot;submit&quot;</code>，最终导致点击之后 <code>window.location.href</code> 的路径中会自动多一个 <code>?</code>，这是因为原生的表单提交是以path后拼接form的参数进行请求的，所以在进行异步请求时需要指定提交的按钮为 <code>&lt;button type=&quot;button&quot;&gt;</code>。</li></ol><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ol><li><p>使用局部的 filter 代替 methods 中的方法格式化数据显示。</p></li><li><p>vue 在绑定 date 类型的 input 输入框时，设置默认值要用 <code>:value=&quot;date | toDate&quot;</code>，toDate 为过滤器；当 date 的值是 timestamp 类型时，toDate 可以为以下方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateTime</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (date) &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">        <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> day = date.getDate();</span><br><span class="line">        <span class="keyword">var</span> hour = date.getHours();</span><br><span class="line">        <span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line">        <span class="keyword">return</span> date.getFullYear() + <span class="string">&#x27;-&#x27;</span> + </span><br><span class="line">            (month &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + month : month) + <span class="string">&#x27;-&#x27;</span> + </span><br><span class="line">            (day &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + day : day) + <span class="string">&#x27; &#x27;</span> + </span><br><span class="line">            (hour &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + hour : hour) + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">            (minute &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + minute : minute) + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">            (second &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + second : second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue.js 2.5.2版本在 v-for 循环中使用 v-model 绑定数组元素时会报如下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.</span><br></pre></td></tr></table></figure><p> 从提示信息可以看出 vue 建议使用 array 的某个元素的属性值作为 v-model 绑定的主体，如果元素并不是 Object 类型而是 String 类型时，需要通过 index 来实现元素绑定。具体代码如下：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(el, index)  in array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;array[index]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将数组中位于 index1 的元素移动至 index2 的位置：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.splice(index2, <span class="number">0</span>, list.splice(index1, <span class="number">1</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p> 交换数组中位于 index1 和 index2 的两个元素：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[index1] = list.splice(index2, <span class="number">1</span>, list[index1])[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p> vue 组件中实时交换位于 index1 和 index2 的两个元素：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$set(list, index1, list.splice(index2, <span class="number">1</span>, list[index1])[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>Vue的 <code>filters</code> 块中的过滤器不能加载自身 <code>data()</code> 块中的变量，如果需要使用 <code>data()</code> 中的变量对数据进行转换时可以将过滤器的逻辑写在 <code>methods</code> 块中。</p></li><li><p>在使用基于Vue的前端框架进行开发时，有些框架组件无法对点击事件进行监听和处理（如 <code>ant-design-vue</code> 的 <code>popconfirm</code> 组件，详见 <a href="https://github.com/ant-design/ant-design/issues/7233">Could you add a property in PopConfirm to stop click event propagation?</a>），而如果此时正好需要阻止某个组件的点击事件向上层元素传播时，可以使用如下方式：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;e =&gt; e.stopPropagation()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-popconfirm</span>&gt;</span><span class="tag">&lt;/<span class="name">a-popconfirm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Vue的 <code>style scoped</code> 中的样式不起作用时，可以新增一个无scoped修饰的 <code>style</code> 来定义css样式，例如：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.scoped-style</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.global-style</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Vue中使用JSX语法时，需要注意以下方面：</p><ul><li>所有的运算赋值操作都需要在 <code>&#123;&#125;</code> 中，如获取变量值，调用方法等。</li><li>不支持Vue的过滤器，需要使用方法来代替。</li><li>事件监听 <code>@click=&quot;handleClick(param)&quot;</code> =&gt; <code>onClick=&#123;this.handleClick.bind(this, param)&#125;</code>，<code>@click.native=&quot;handleNativeClick(param)&quot;</code> =&gt; <code>nativeOnClick=&#123;this.handleNativeClick.bind(this, param)&#125;</code>，这里需要使用js原生的<code>bind</code>方法来进行方法调用。</li><li>不支持Vue的指令，常用的指令的备选解决方案：<code>v-if=&quot;condition&quot;</code> =&gt; <code>v-show=&quot;condition&quot;</code> 或者 <code>&#123;condition ? &lt;div&gt;JSX&lt;/div&gt; : &#39;&#39;&#125;</code>；<code>&lt;li v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;item&#125;&lt;/li&gt;</code> =&gt; <code>&#123;items.map((item, index) =&gt; &#123;return &lt;li&gt;&#123;item&#125;&lt;/li&gt;&#125;)&#125;</code>。</li></ul></li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ol><li>使用 redis-cli 进入 redis 的命令行模式时，可以使用 <code>keys **</code> 查看所有 key 值，使用 <code>get [key]</code> 查看 key 对应的 value 值。需要注意的是，使用 <code>keys **</code> 查看到的 key 值如果使用 “” 包括，那么 <code>get [key]</code> 的 key 也需要用 “” 包括起来。</li></ol><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ol><li><p>使用 <strong><code>frontend-maven-plugin</code></strong> 整合前后端项目构建时，需要注意web模块需要放在server模块之前，保证web先构建，这样才能将web构建好的文件复制到server的 <code>resources/public</code> 目录下。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 同时要注意后台不要对 <code>@RequestMapping(&quot;/&quot;)</code> 做处理，否则有可能会使得访问 <code>&quot;/&quot;</code> 无法显示前端构建好的index.html页面。</p></li><li><p>maven引用私服的jar包时，需要在 <code>pom.xml</code> 文件的 <code>&lt;repositories&gt;</code> 标签下中指定私服的 <code>&lt;id&gt;</code>、<code>&lt;name&gt;</code>、<code>&lt;url&gt;</code>。</p></li><li><p>gitlab-runner的 <code>config.toml</code> 在 <code>[runners.docker] </code>中配置 <code>extra_hosts = [&quot;xxx.xxx.com:172.17.0.1&quot;]</code>可实现runner容器的ip和host映射关系的配置。</p></li><li><p>设置maven的 <code>setting.xml</code> 中 mirror 节点的 <code>mirrorOf</code> 有以下配置策略：</p><ul><li>*：everything</li><li>external:*：everything not on the localhost and not file based</li><li>repo,repo1：repo or repo1</li><li>*,!repo1：everything except repo1</li></ul></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><p>windows 下使用 Nginx 相关命令如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">点击 Nginx 目录下的 nginx.exe；cmd 运行 start nginx</span><br><span class="line"></span><br><span class="line">#关闭</span><br><span class="line">nginx -s stop #立即停止nginx，不保存相关信息</span><br><span class="line">nginx -s quit #正常退出nginx，并保存相关信息</span><br><span class="line"></span><br><span class="line">#重启（重新加载配置）</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>nginx 的配置文件 root 路径不识别 <code>\</code> 只识别 <code>/</code>。</p></li><li><p>Letsencrypt通配符证书的申请和在nginx配置：</p><ul><li><a href="https://my.oschina.net/kimver/blog/1634575">申请Let’s Encrypt通配符HTTPS证书</a></li><li><a href="http://www.cyberciti.biz/faq/how-to-configure-nginx-with-free-lets-encrypt-ssl-certificate-on-debian-or-ubuntu-linux/">How to configure Nginx with Let’s Encrypt on Debian/Ubuntu Linux</a></li></ul></li><li><p>使用 nginx 解决 CORS 问题</p><p> 使用反向代理将服务端（接口提供方）与客户端（接口调用方）部署在同一个域下。</p></li><li><p>使用 nginx 解决 X-Frame-Options: deny 问题</p><p> 使用<a href="https://github.com/openresty/headers-more-nginx-module">headers-more</a>插件，推荐直接下载带headers-more模块的openresty，<a href="https://openresty.org/en/download.html">下载地址</a>。</p><p> 在 nginx.conf 中（一般是在server下）配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除 &quot;X-Frame-Options&quot; header</span><br><span class="line">more_clear_headers &#x27;X-Frame-Options&#x27;;</span><br><span class="line"># 设置 &quot;X-Frame-Options: SAMEORIGIN&quot; 同域可嵌入iframe</span><br><span class="line">more_set_headers &#x27;X-Frame-Options: SAMEORIGIN&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>指定MySQL时区，在mysqld.conf中增加 <code>default-time-zone=&#39;+8:00&#39;</code> 配置。</p></li><li><p>在做微信公众号开发时，需要在公网上调用开发机器的接口，除了使用花生壳等软件进行内网穿透之外，如果有富余的公网服务器资源，可以使用一些简单方便的内网穿透工具，推荐 <a href="https://github.com/sosont/ichWebpass">ichWebpass</a>。</p></li><li><p>gitlab pg数据库配置</p><p> 修改<code>/var/opt/gitlab/postgresql/data/pg_hba.conf</code>文件，增加下面的配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host all all 192.168.1.10/22 trust</span><br></pre></td></tr></table></figure><p> 上述的修改会在使用<code>gitlab-ctl reconfigure</code>命令之后失效，通过修改gitlab配置文件中pg数据库的entries可以避免这种情况。具体为：</p><p> 在gitlab.rb中增加</p> <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postgresql<span class="section">[&#x27;custom_pg_hba_entries&#x27;]</span> = &#123;</span><br><span class="line">  APPLICATION: <span class="section">[&#123; # APPLICATION should identify what the settings are used for</span></span><br><span class="line"><span class="section">    type: &#x27;host&#x27;,</span></span><br><span class="line"><span class="section">    database: &#x27;all&#x27;,</span></span><br><span class="line"><span class="section">    user: &#x27;all&#x27;,</span></span><br><span class="line"><span class="section">    cidr: &#x27;192.168.1.0/24&#x27;,</span></span><br><span class="line"><span class="section">    method: &#x27;trust&#x27;,</span></span><br><span class="line"><span class="section">    #option: 0</span></span><br><span class="line"><span class="section">  &#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong> 这里的<code>APPLICATION</code>对象是一个数组，有些gitlab版本默认不是数组，需要手动修改。</p></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>GitHub 现在支持创建私有代码仓库了，但使用时需要注意：将 GitHub 的 repository 从 <em><strong>public</strong></em> 切换成 <em><strong>private</strong></em> 再切回 <em><strong>public</strong></em> 之后，需要 <code>push</code> 代码到 <code>master</code> 分支才能让已经404的 <code>Github Pages</code> 页面恢复正常。</li></ol><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li>为了在windows系统上安装docker，需要将win10系统升级到专业版开启HyperV虚拟机才行。 win10专业版升级密钥：DR9VN-GF3CR-RCWT2-H7TR8-82QGT</li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li><p>Ubuntu/Debian开机启动脚本 <code>spider.sh</code> 示例：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides: spider</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop: 0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: spider</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description: spider service start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"></span><br><span class="line">[shell content]</span><br></pre></td></tr></table></figure><ul><li>开机启动：<code>update-rc.d spider.sh defaults</code></li><li>移除开机启动：<code>update-rc.d spider.sh remove</code></li></ul></li><li><p>使用netstat查看系统网络端口情况：<code>netstat -tunlp</code>；如果发现没有 <code>PID</code> (进程号)，需要使用 <code>sudo netstat -tunlp</code>。</p></li><li><p>对于新安装的官方Ubuntu-server等系统，可以通过指令 <code>sudo apt-get install build-essential</code> 安装gcc环境。</p></li><li><p>取消sudo密码：<code>sudo visudo</code> 进入编辑界面；添加行 <code>username ALL=(ALL) NOPASSWD:ALL</code>，username为登录用户名，如果想作用于某个用户组则使用 <code>%usergroup ALL=(ALL:ALL) NOPASSWD:ALL</code>。</p></li><li><p>linux系统添加ssh公钥的方式：</p><ul><li><p>本地</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖</span></span><br><span class="line">cat [ssh_pub_key] &gt; ~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line">cat [ssh_pub_key] &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>远程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@[remote-server-ip]:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>  <strong>注：</strong> 需要输入远程服务器的登录密码进行认证。</p></li></ul></li><li><p>ssh对目录的权限有要求，具体如下：</p><table><thead><tr><th>目录/文件</th><th>权限</th></tr></thead><tbody><tr><td>~/.ssh</td><td>700</td></tr><tr><td>~/.ssh/*</td><td>600</td></tr><tr><td>~/.ssh/config</td><td>700</td></tr></tbody></table></li></ol><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><p>使用docker-compose的build参数构建docker镜像时，要注意指定的context目录下默认的Dockerfile文件名必须为 <code>Dockerfile</code>。如果想使用其他文件名，可以通过 <code>-f filename</code> 指定。 </p></li><li><p>docker环境为docker for windows，有效避免host为windows系统时 <code>docker run -v</code> 绑定的目录映射关系在系统重启之后失效的方法为：使用 <code>docker volume create path1</code> 创建volume，再使用 <code>-v path1:/container/path</code>。简单地说就是使用 “自定义数据卷” 代替 “容器自动创建的临时数据卷” 进行映射，完成docker容器的数据持久化。</p></li><li><p>指定docker的dns，防止网络环境变化时导致容器网络的不稳定。<br> 编辑docker的<code>daemon.json</code>:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;dns&quot;</span>: [<span class="string">&quot;114.114.114.114&quot;</span>, <span class="string">&quot;8.8.8.8&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用docker-compose来部署redash时，注意需要先创建redash数据库才能启动：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose run --rm server create_db</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>使用docker方式部署consul时，由于consul在docker虚拟网络中无法正确识别注册服务的hostname，因此需要在注册服务中配置 spring.cloud.consul.discovery.hostname=192.168.1.xxx (注册服务的局域网ip，要注意的是必须是docker宿主机所在地局域网ip，使用172.17.0.1等docker内网ip也不行)，才能确保consul正确地进行健康检查。</p></li></ol><Vssue title="开发实战总结"/>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Git </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Linux </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Maven </tag>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>色彩体系</title>
      <link href="/2020/02/10/%E8%89%B2%E5%BD%A9%E4%BD%93%E7%B3%BB/"/>
      <url>/2020/02/10/%E8%89%B2%E5%BD%A9%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>在日常的工作中，我们经常会使用到色彩，主流的色彩体系有 Material Design、Ant Design 等等。这里将主流的色彩体系做一个汇总收录，方便查找和使用。</p><span id="more"></span><h2 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h2><p><a href="https://material.io/design/color/">Material Design</a><br><a href="https://material.io/design/color/dark-theme.html">Material Design Dark</a></p><h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p><a href="https://ant.design/docs/spec/colors-cn">Ant Design</a><br><a href="https://ant.design/docs/spec/dark-cn">Ant Design Dark</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 色彩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jira基本概念</title>
      <link href="/2020/02/05/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/02/05/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Project（项目）"><a href="#Project（项目）" class="headerlink" title="Project（项目）"></a>Project（项目）</h2><p>Jira中的项目是一组问题单（issue）的集合，项目可以根据组织需求来定义，例如：软件研发项目，市场营销活动，服务台（helpdesk）系统，一个请假管理系统等等。每一个问题单属于一个项目。每个项目需要有一个名称（例如：Website Issues）和关键字（Key，例如WEB）。项目的关键字会成为项目问题单前缀，例如WEB-101，WEB-102等等。</p><span id="more"></span><h3 id="组件是什么（component）"><a href="#组件是什么（component）" class="headerlink" title="组件是什么（component）"></a>组件是什么（component）</h3><p>组件时项目中的问题单的一种逻辑分组。一个项目根据组织的需要可能会包括多种组件。</p><p>举例而言，一个软件开发项目可以包括如下组件：文档，后端，邮件子系统，界面。一个网站系统可能包括产品，联系方式等组件。在一个项目中，一个问题单可以归属于0到多个组件。</p><p>在Jira较新的版本中，组件被更名为模块。</p><h3 id="版本是什么（version）"><a href="#版本是什么（version）" class="headerlink" title="版本是什么（version）"></a>版本是什么（version）</h3><p>对于一些类型的项目，尤其是软件研发项目，把一个问题单关联到一个特定的项目版本（例如：1.0beta，1.0，1.2，2.。0）会非常有用。</p><p>问题单（Issues）有两个跟版本有关的字段：</p><ul><li>影响版本（Affects Version(s)）：这个是要说明受问题单影响的版本。举例而言，一个软件Bug可能影响1.1和1.2版本。</li><li>修复版本（Fix Version(s)）：这个是为了标明这个问题单在哪一个版本中被修复。继续上例，Bug的影响版本号是1.1和1.2，但是可能会在版本2.0中才被修复。没有修复版本号的问题单会被归类为未规划（Unscheduled）。</li></ul><p>版本可以是下面三种状态之一：发布（Released），未发布（Unreleased）和归档（Archived）。版本会有一个发布日期，并且如果在发布日期之后还没有按时发布，这个状态会自动变为国企状态（overdue）。</p><h2 id="Workflow（工作流）"><a href="#Workflow（工作流）" class="headerlink" title="Workflow（工作流）"></a>Workflow（工作流）</h2><p>Jira中的工作流由一系列的状态（statuses）和变迁（transitions）构成，一个问题单在其生命周期中会经过这些状态和变迁。下图为例：</p><p><img src="/images/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Jira%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="Jira工作流"></p><h2 id="Issue（问题单）"><a href="#Issue（问题单）" class="headerlink" title="Issue（问题单）"></a>Issue（问题单）</h2><p>Jira的问题单非常灵活，页面可以定制，字段也可以定义。这里介绍一些内置的基本概念。</p><h3 id="Issue-Type（问题单类型）"><a href="#Issue-Type（问题单类型）" class="headerlink" title="Issue Type（问题单类型）"></a>Issue Type（问题单类型）</h3><p>Jira可以用来跟踪不同类型的问题单。默认类型如下，Jira的系统管理员也可能会定制这些类型。</p><ul><li>Bug：故障，功能失效</li><li>Improvement：提升，既有功能增强</li><li>New Feature：新功能</li><li>Task：任务</li><li>Custom Issue：根据需要客户化定制</li></ul><h3 id="Priority（优先级）"><a href="#Priority（优先级）" class="headerlink" title="Priority（优先级）"></a>Priority（优先级）</h3><p>优先级也可以自定义，系统默认优先级如下：</p><ul><li>Highest：最高级别，表明问题阻塞了业务流程正常进行</li><li>High：高级，表明问题引发明显故障，需要紧急关注</li><li>Medium：中级，表明问题有一个明显的影响</li><li>Low：低级，表明问题有一个轻微的影响</li><li>Lowest：最低级</li></ul><h3 id="Status（状态）"><a href="#Status（状态）" class="headerlink" title="Status（状态）"></a>Status（状态）</h3><p>每一个问题单都会有一个当前的状态。一个问题单开始阶段可能是Open状态，然后可以转移到Resolved或者Closed，依赖于系统流程配置的方式。内置的常见状态如下：</p><ul><li>Open：打开状态，表明问题单已经被创建，等待被分配到开始处理状态。</li><li>In Progress：处理中状态，表明问题已经被分配人激活，并处于被处理状态中。</li><li>Resolved：已解决状态，表明问题已经被处理完成，等待问题报告人的验证。从这个状态，问题单一般可以进一步变更为重新打开状态（Reopened）或关闭状态（Closed）。</li><li>Reopened：重新打开状态，问题经过验证发现没有被解决，就可以变更到这个状态。</li><li>Closed：关闭状态，问题被彻底解决就可以转为这个状态。</li></ul><h3 id="Resolution（解决结果）"><a href="#Resolution（解决结果）" class="headerlink" title="Resolution（解决结果）"></a>Resolution（解决结果）</h3><p>一个问题可以有多种解决结果，其中只有一种方法是修复。一个解决结果通常会砸状态变更时候被设置起来。系统默认的问题解决结果会有以下几种：</p><ul><li>Fixed：修复。</li><li>Won’t Fix：不用修复。例如这个问题所描述的现象已不再有影响了。</li><li>Duplicate：重复。同其它已经存在的问题重复了，推荐把相关的单子链接起来。</li><li>Incomplete：未完成。没有足够的信息继续完成这个问题。</li><li>Cannot Reproduce：不能重现。如果以后有更多信息可以继续可以重新打开这张单子。</li><li>Won’t Do：不做。类似于不用修复的方案，适用于软件项目的默认状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具整合</title>
      <link href="/2020/02/05/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/"/>
      <url>/2020/02/05/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="GitLab-CI整合SonarQube"><a href="#GitLab-CI整合SonarQube" class="headerlink" title="GitLab-CI整合SonarQube"></a>GitLab-CI整合SonarQube</h2><p>……</p><h2 id="GitLab整合Jira"><a href="#GitLab整合Jira" class="headerlink" title="GitLab整合Jira"></a>GitLab整合Jira</h2><h3 id="一、整合步骤"><a href="#一、整合步骤" class="headerlink" title="一、整合步骤"></a>一、整合步骤</h3><h4 id="1、打开项目页面，进入-设置-→-集成-→-项目服务-→-JIRA"><a href="#1、打开项目页面，进入-设置-→-集成-→-项目服务-→-JIRA" class="headerlink" title="1、打开项目页面，进入 设置 → 集成 → 项目服务 → JIRA"></a>1、打开项目页面，进入 设置 → 集成 → 项目服务 → JIRA</h4><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab-Jira.png" alt="GitLab-Jira"></p><h4 id="2、填写并保存JIRA配置"><a href="#2、填写并保存JIRA配置" class="headerlink" title="2、填写并保存JIRA配置"></a>2、填写并保存JIRA配置</h4><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab%E7%9A%84Jira%E9%85%8D%E7%BD%AE.png" alt="GitLab的Jira配置"></p><p>Username 统一使用 gitlab-admin。</p><h3 id="二、整合示例"><a href="#二、整合示例" class="headerlink" title="二、整合示例"></a>二、整合示例</h3><p>提交代码时在提交说明中填写Jira Issue的ID（如下图的 STUDYCLOUD-3）即可自动关联上Jira。</p><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab-Jira%E6%95%B4%E5%90%88%E7%A4%BA%E4%BE%8B.png" alt="GitLab-Jira整合示例"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> Jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求分析</title>
      <link href="/2020/02/05/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/05/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、我们应当如何做需求分析？"><a href="#一、我们应当如何做需求分析？" class="headerlink" title="一、我们应当如何做需求分析？"></a>一、我们应当如何做需求分析？</h2><p>需求分析不是一蹴而就的，它应当贯穿整个开发周期，不断的分析确认的过程。这就是敏捷开发倡导的需求反馈。敏捷开发认为，需求分析阶段不可能解决所有的需求问题，因此在设计、开发、测试，直到最终交付客户，这整个过程都应当不停地用开发的成果与客户交流，及时获得反馈。只有这样才能及时纠正需求理解的偏差，保证项目的成功。</p><span id="more"></span><h2 id="二、我们应当怎样做需求调研？"><a href="#二、我们应当怎样做需求调研？" class="headerlink" title="二、我们应当怎样做需求调研？"></a>二、我们应当怎样做需求调研？</h2><p><img src="/images/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/%E9%9C%80%E6%B1%82%E8%B0%83%E7%A0%94%E6%B5%81%E7%A8%8B.png" alt="需求调研流程"></p><h3 id="1、初识"><a href="#1、初识" class="headerlink" title="1、初识"></a>1、初识</h3><p>我们对客户提出的需求进行深入理解以后，运用我们专业知识，提出比客户的原始需求更加合理、可操作的解决方案，让客户感觉你说的正是他们想要的。如果能够这样，客户不仅能够欣然接收你提出的方案，而且会感觉你非常专业，你在客户心目中的形象也会无形中提高，使你有更多的机会提出有利于开发的可行方案，降低开发的风险。这毫无疑问会形成一个良性循环，但要做到这一点并不容易，毫无疑问，在与客户接触初期的表现起到了极其关键的作用。</p><ol><li>高层领导关心的是宏观的目标，因此软件研发目标、宏观统计报表、决策支持功能，我们应该怎样做需求分析,应当与高层领导谈。</li><li>中层领导关心的是具体的效益，即软件给各个部门信息化管理方面带来的效益，因此，中层领导是各项业务流程、功能模块的需求决策者。他们关心功能的定义、业务流转的衔接、查询报表的设计，但不太关心一些具体的操作，以及一些具体业务流程的细节。</li><li>基层人员是每一项业务流程的操作者，也是软件今后真正的使用者。他们是真正了解你所要开发的软件的业务需求的领域专家，是你进行需求调研的重点对象。但是，基层人员往往受到自身视野的局限，可能只清楚自己工作涉及的十分狭小的一个范围，因此我们需要努力寻找那些业务涉及面广，经验丰富，又有一定大局观的真正的专家。另外 ，他们就是软件今后真正的使用者，让他们参加，会让他们成为今后软件推行的忠实支持者，对其他操作人员的指导者，益处多多。而他们关心的则是每项操作的细节。</li></ol><p>俗话说：万事开头难。如果你在项目开始的时候总感觉千头万绪不知如何着手，在这里我给大家的三点建议：</p><p>1）树立良好的职业威信；</p><p>2）进行详细角色分析，将与会各方代表对号入座；</p><p>3）从宏观上制订目标与方案。随后的工作，就是与各方代表建立联系，逐一拜访他们，将需求调研工作一步一步进行下去。</p><h3 id="2、拜访"><a href="#2、拜访" class="headerlink" title="2、拜访"></a>2、拜访</h3><p>需求调研不是一蹴而就的事情，是一件持续数月甚至数年的工作（假如项目还有后期维护） 。在这漫长的时间里，我们需要依靠客户这个群体的帮助，一步一步掌握真实可靠的业务需求 。不仅如此，技术这东西总有不如意甚至实现不了的地方，我们需要客户的理解与包容，这都需要有良好的客户关系。尽管如此，我们也不能总是期望客户中的所有人都能与我们合作，很多项目都不可避免地存在阻碍项目开展的人。</p><h3 id="3、研讨会"><a href="#3、研讨会" class="headerlink" title="3、研讨会"></a>3、研讨会</h3><ol><li>由于业务人员自身的局限 ，不可能对所有业务领域的细节全面掌握，往往总是有自己熟悉的部分，也有自己不熟悉的部<br>分。划分业务组，可以让业务人员分别在自己最熟悉的业务范围内参与讨论，可以有效提高业务讨论的质量；</li><li>集中式的业务研讨形式和分散式的业务研讨形式；</li><li>有效抑制个性化差异、分模块组织专项研讨会。</li></ol><h3 id="4、业务研讨"><a href="#4、业务研讨" class="headerlink" title="4、业务研讨"></a>4、业务研讨</h3><p>在需求分析过程中，客户存在的最大问题就是提不出正确的需求，这表现为几种形式：</p><ol><li>由于对软件不了解，客户提不出需求，不知道软件最终会做成什么样子。这类客户在需求讨论过程中，往往只能描述目前自己手工管理的方式是怎样的，不知道计算机会怎样管理。</li><li>能提出一些业务需求，但当软件做出来摆在自己面前时，需求就变了。这类客户，他们能熟练使用电脑，对信息化管理是清楚的。他们提出的业务需求从整体上应当是八九不离十的 。但是，由于没有实物，在软件中的一些具体操作并没有完全想清楚。</li><li>能非常详细地提出业务需求，甚至有时候该怎么做的提出来了。这类客户，参与过很多软件信息化建设，甚至有些还是软件开发的半专业人士。但是他们提出的业务需求过于具体 ，甚至怎样实现都说出来了，但这些有时候不是最佳设计方案、可能在技术上难于实现，甚至有些就是过于理想化而不可实现。</li></ol><p>解决办法：</p><ul><li>业务领域分析:客户现有的业务流程是什么样的，都有些什么操作？</li><li>客户在业务中都有些什么事物，什么专用名词，都是怎样定义的，相互之间的关系是什么？</li><li>客户在每一项操作中的目的是什么，为什么要这样做，他们制作的手工报表都说明了什么问题？</li></ul><p>(1)我们做需求分析，眼界不能仅仅停留在软件本身，应当更开阔一些，应当扩展到跟这个业务有关的那些领域知识中。</p><p>(2)在客户提出的所有原始需求中那些与业务实现有关的需求都是无效的需求，它们仅仅只能作为我们的一个参考。</p><p>(3)还有一些是技术难于实现或者根本就无法实现的需求，我们应当耐心地说服和引导客户，并给他提出一个更加合理的方案。</p><p>(4)需求分析不是一种简单的你说我记的收集活动，而是在大量业务分析与技术可行性分析基础上的分析活动。只有建立在这种分析基础上的软件研发，才能保证需求的正确与变更的可控。</p><h3 id="5、迭代"><a href="#5、迭代" class="headerlink" title="5、迭代"></a>5、迭代</h3><p>在第一次的需求分析阶段，我们在一段时期内需要与客户进行反复地讨论，这个过程往往是这样一个反复循环的过程：需求捕获-&gt;需求整理-&gt;需求验证-&gt;再需求捕获······</p><ol><li><p>需求捕获:就是我们与客户在一起开研讨会，讨论需求的活动,客户可能会描述他们的业务流程，这时我们在纸上绘制简单的流程草图，及时地记录下来；客户在描述业务的同时，可能会反复提到一些业务名词，详细询问这些名词的含义，以及它们与其它名词的关系，用类图或者对象图绘制简单的草图；客户在描述业务的同时，还会提出今后的软件希望实现的功能，如能够展示某个报表、能够导出文件，以需求列表的形式记录下来。一个功能，在需求列表中会有多个需求，而每个需求应当能够用 1、2 句话，在 20 个字以内就可以描述清楚 。需求列表是客户提出的最最原始的需求，他不掺杂任何分析设计，是我们的每项功能必须实现的内容。</p></li><li><p>需求整理:就是在需求研讨会后，需求分析人员对研讨内容的分析和整理的过程。首先，需求分析人员应当通过用例模型，划分整个系统的功能模块，以及各个模块的业务流程。用例模型分析是一个由粗到细的过程，这样一个过程也是符合人类认识世界的思维习惯的一个过程。最先，我们应当对整个系统绘制用例图，设计用例场景，并依次对这些用例进行用例描述、流程分析、角色分析等分析过程。当然，在整体用例分析的同时，我们还应当进行一个整体的角色分析，绘制一个角色分析图，进行一个流程分析，绘制一个流程分析图（可以是传统的流程图、UML 中的行动图，甚至一个简单的示意图，等等）,再在整体用例图的基础上，依次对每个用例绘制用例图。每个用例图中，会更细致地划分出多个用例，并依次进行用例描述、流程分析、角色分析等分析工作。如此这般地不断细化，直到我们认为需求已经描述清楚为止。</p></li><li><p>领域模型 :是对用户业务领域中相关事物、相互关系、相互行为操作的描述，它是以对象图和类图的形式表达的。需求人员对领域模型的分析，对业务理解的深度，对日后软件的设计，以及软件的功能扩展、升级演化，都起到了至关重要的作用。</p></li><li><p>需求验证:需求验证工作应当贯穿整个研发周期，并且在不同时期表现出不同的形式。首先，在需求分析阶段，需求验证工作表现为对需求理解是否正确的信息反馈。需求分析人员与客户再次坐在一起，一项一项描述我们对需求的整理和理解，客户则时不时地对一些问题进行纠正，或者更加深入地加以描述。我们则认真地记录，回来整理，并等待下一次的验证。在需求分析后期，我们还可以制作一些简单的原型，更加形象地描述我们对需求的理解，会使我们与客户的沟通更加顺畅。随后的设计开发阶段，我们则应当以迭代开发的形式进行。每开发完一个迭代周期，将开发的成果与客户反馈。这样做的结果是，客户可以及时地提出我们对需求理解的偏差，或者及时提出对我们设计不满意的地方，使我们存在的问题得到及时地发现与解决。问题及时的解决，使我们修复问题的代价得以降至最小。</p></li></ol><h3 id="6、需求捕获"><a href="#6、需求捕获" class="headerlink" title="6、需求捕获"></a>6、需求捕获</h3><p>经过深入分析我们会发现，从客户嘴中说出来的需求，只是整个软件需求中的冰山一角，还有两类需求需要我们自己去挖掘：客户嘴中没有说出来的需求 ，和客户压根儿就没有想到的需求。</p><ol><li><p>什么是客户嘴中没有说出来的需求：并不是客户故意卖弄官子不愿说出来，而是在客户所在业务领域已经约定俗称，在他们看来已经是天经地义，根本就不用说出来的业务规则。然而 ，作为刚刚涉足该领域的需求人员，他们是不了解这些规则的。如果采用被动的方式去仅仅记录客户说出来的需求，毫无疑问会遗失这部分需求，这就是为什么直到项目后期，软件被研发出来即将交付使用，客户才提出说这不是我想要的软件，并提出大量变更需求的原因。要求我们在需求分析的整个过程，不断进行业务领域知识的学习。在我做需求访谈的初期，我往往不是跟客户谈需求，而是先跟客户谈业务。你们是怎样操作的？都经过些什么流程？谁来完成这些操作的？为什么这样操作？注意，在所有这些问题中，最后一个问题是最重要的。客户业务领域中的所有操作、所有流程都是有它存在的意义的，它体现了其内部的原因与作用。多问为什么，可以让我们深入地理解这些领域知识 。站在客户的视角去思考问题，进而深入地理解客户为什么要提出他们的那些业务需求。</p></li><li><p>另一种就是客户压根儿没有想到的需求：在需求分析阶段，虽然客户压根儿没有想到，但需求分析人员是软件研发领域的专业人员，他们应当在深入理解业务领域与需求的基础上，通过分析提前发现这些需求。作为需求分析人员，他们应当站在客户的角度去思考，我们的软件应当设计成什么样子，每个需求的真实意图是什么。站在这个基础上，再运用专业知识去整理、分析与设计。我前面谈到，客户描述的最原始的需求是编写在需求列表中的，而经过需求分析人员的整理、分析与设计，经过用例分析、领域建模，最终形成产品需求说明书（或称为产品规格说明书）。先在一些非正式的场合单独跟客户聊，产生第一手资料，最后将这些需求在比较正式的场合，如各部门参加的业务讨论会、有用户代表参加的需求评审会、需求定稿签字确认会等等，以比较正式的形式讨论和确定下来。</p></li></ol><p>参考文档：</p><ul><li><a href="https://wenku.baidu.com/view/1e2bab73f46527d3240ce0cb.html">我们应该怎样做需求分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目决策</title>
      <link href="/2020/02/05/%E9%A1%B9%E7%9B%AE%E5%86%B3%E7%AD%96/"/>
      <url>/2020/02/05/%E9%A1%B9%E7%9B%AE%E5%86%B3%E7%AD%96/</url>
      
        <content type="html"><![CDATA[<p>在结果还没出现之前，一个决策的好坏似乎是无法判定的。但是当结果出现之后，再依据结果判定这个决策好坏，是否又为时已晚？判断决策优劣并非是为了以结果论英雄，更多的是为达到某个既定结果所进行的决策预判。</p><p>不论在军事还是商业，或者是生活上，一个好的决策一定是在其决策周期及决策目标下，基于确定性边界条件及核心逻辑演绎下的结果。也只有这样的决策才能算是一个好的决策。</p><p>决策有三个基础：决策目标、决策条件、决策逻辑。</p><p>一个好的决策一定是由对应的决策条件来做支撑，并且基于这些决策条件，以及想要达成的决策目标，有一套核心而正确的决策逻辑来实现。这三个决策基础实际上形成一个决策链条，环环相扣，任何一个环节的不利都将直接导致整个决策失效。</p><span id="more"></span><h2 id="决策目标"><a href="#决策目标" class="headerlink" title="决策目标"></a>决策目标</h2><p>在我们做决策的过程中，我们都会预先假设了这么一个决策目标，这也是一个成功决策首先要具备的条件。如果决策目标都改变了，那么这个决策当下就已经宣告无效。</p><p>决策目标包含两个作用：</p><ul><li>评价作用：评价作用主要体现在决策目标作为一个确定标准，能够对决策逻辑和决策条件进行定性，通过否定决策逻辑和决策条件来否定自身。</li><li>指导作用：在具体的决策过程中，指导作用能够帮助我们选择正确的决策逻辑去分析，并基于正确的逻辑去检视决策条件是否成立。</li></ul><p>在我们做决策时，是很难一开始就能够用最有效的决策逻辑去分析这个决策问题的，我们往往会采用一惯性且直观的逻辑去分析问题，但这些决策逻辑往往并不是正确的，对于很多决策，它们对应的决策逻辑通常很生僻，不容易在一开始就能够想到。</p><h2 id="决策条件"><a href="#决策条件" class="headerlink" title="决策条件"></a>决策条件</h2><p>商业活动需要资源，而决策活动则需要条件。没有条件的决策无异于空中楼阁。但并不是任何条件都能够最终成为决策条件，而成为决策条件的也不同等重要。</p><p>决策条件需要同时包含以下三个特点：完整性、确定性和持续性。</p><ol><li>完整性<ol><li>决策条件组合完整性：决策条件组合是一个决策成立所需要条件的集合，这个集合至少包含一个子条件，这些子条件对于决策目标的达成都是不可或缺的。比如我们要达到一个决策目标D，需要这么一个决策条件集合(A,B,C)。表达为A+B+C→D。那么这个条件组合中的任何一个子组合缺失，都将达不到决策目标D。</li><li>决策子条件的完整性：一个决策条件组合内包含多个子条件，而每个子条件又必须完成一个自证过程，也就是说它们必须依靠自身的完整性来证明自己是这么一个子条件。比如对于决策目标D，对应这么一个决策条件集合(A,B,C)，这解决的是一个需要什么而有什么的问题。而对于决策子条件的完整性，是A=a1+a2+a3的一个逻辑，解决的是一个要什么而是什么的问题。</li></ol></li><li>确定性：确定性是决策条件需要具备的又一个特性，而且大部分决策失败都是由决策条件的确定性不够而造成的，因为人总是会主观的判断条件的确定性程度，在决策条件都具备的前提下，主观的高估条件的确定性往往会给决策目标的达成带来很大的潜在风险。</li><li>持续性：对于一个决策，往往对应着一个周期。在这个决策周期内，决策条件还需要具备一定的持续性，这也是很多决策失败的重要原因，人们在做决策的时候，往往都只是注意到决策的当下，而忽略决策是有周期的这个事实，基于当下决策的条件如果不能在决策周期内保持着一种持续性，很有可能在决策实施的后期，因为决策条件缺失而无法进行。</li></ol><p><strong>决策条件是决策目标达成的根基，对于这样一个根基而言，无论是完整性、确定性还是持续性都将直接影响到决策目标的达成。没有条件的完整性，决策执行过程中将无法推进，如果没有条件的确定性不高，将影响目标达成的概率，而条件持续性的缺失相当于在决策执行过程中埋下夭折的伏笔。</strong></p><h2 id="决策逻辑"><a href="#决策逻辑" class="headerlink" title="决策逻辑"></a>决策逻辑</h2><p>决策逻辑是决策中尤为重要的一环，这也是最能体现决策能力的地方。优秀的决策逻辑在一定程度上能够弥补决策条件的不足，同时又能更有效率的实现决策目标。</p><p>决策逻辑是基于一定决策条件，并为达成预设决策目标而产生的一系列思维。在同样的决策条件和决策目标下，决策逻辑的不同直接影响到决策目标是否成立的判断。</p><p>不同的决策范围，对应的具体决策逻辑是不相同的，军事有军事的决策逻辑、商业有商业的决策逻辑。</p><p>决策逻辑分为两个维度：通用逻辑、专用逻辑。</p><ol><li>决策的通用逻辑：通用逻辑，通俗点说那就是用之四海而皆通的逻辑。通用逻辑更多的需要通过将不同专用逻辑比较提炼而得到，通过这些专用逻辑提炼出来的逻辑便是基于这些专用逻辑的通用逻辑，而这些专用逻辑对应的对象将构成通用逻辑所适用的“四海”。</li><li>决策的专用逻辑：在很多时候，我们做一个决策除了要基于一定的通用逻辑外，还要基于决策对象所特有的逻辑。专用逻辑由于具有特定对象差异性，所以它更多的是一种经验性质的逻辑，无法通过通用逻辑来弥补，所以仅仅知道通用逻辑，而忽略专用逻辑，也是很难在具体的决策过程中做出非常正确的决策的。那如何拥有这样的专用逻辑呢，这里有两种方法，第一种方法那就是不断拓展专业逻辑的储备，这更依赖于实践和学习，第二种方法那就是不断深化你的通用逻辑，让专业逻辑尽最大可能的变成通用逻辑。两种方法的配合将会促进这一过程发展。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>做好决策要基于三个基础：决策条件、决策逻辑与决策目标。这三个基础环环相扣，构成决策的系统。</li><li>决策条件需要满足三个条件：完整性、确定性及持续性。</li><li>决策逻辑有两个维度：通用逻辑和专用逻辑，对于一个具体决策，需要这两个维度的逻辑来综合分析。</li><li>决策目标不同于执行目标，它更多的是一种评价和指导，通过评价和指导来确定自身是否成立。</li></ol><p>参考资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/29583983">如何好做一个决策</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目规范</title>
      <link href="/2020/02/05/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
      <url>/2020/02/05/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="软件生命周期"></p><p>在日常工作中，使用wiki和jira进行协作的一般流程为：</p><ol><li>调研、收集资料，并形成相关文档记录在wiki上。</li><li>组织相关人员进行文档评审会议，指定与会人员进行会议记录，并形成行动项。</li><li>项目管理人员将行动项转换成jira的问题，指派问题的经办人，指定任务时间。</li><li>问题的报告人和经办人根据实际的执行情况修改jira问题的详情、状态等。</li><li>项目负责人周期性的对问题的执行情况进行跟踪反馈，并制定后续的行动策略。</li></ol><span id="more"></span><p>以下简称为<strong>一般流程</strong>。</p><h2 id="立项"><a href="#立项" class="headerlink" title="立项"></a>立项</h2><ol><li>完成《行业分析报告》、《竞品分析报告》、《技术可行性分析报告》、《成本与效益报告》、《项目计划》等文档的一般流程。</li><li>《项目计划》完成之后，会根据具体的项目计划内容形成多个jira史诗，每个史诗可以继续细分成多个故事或任务。jira故事（即常说的“用户故事”）一般需要编写相应的需求设计，而任务则会转化成具体的方案设计、开发任务等。</li></ol><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>根据用户故事进行需求分析，需求分析包含以下内容：<ol><li>明确基本需求</li><li>挖掘隐含需求</li><li>扩展需求</li><li>业务架构（前端流程、后台处理流程、资金链）</li><li>筛选不合理需求</li></ol></li><li>编写软件产品《需求设计》文档，并完成《需求设计》文档的一般流程。</li><li>需求设计完成之后关闭对应的jira故事。</li></ol><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ol><li>在明确了软件产品的需求之后，需要对系统的业务模块进行划分并记录为jira模块。</li><li>完成各个模块的《详细设计》文档的一般流程，《详细设计》文档中一般包含了功能详细设计、原型设计和交互设计。</li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li>根据《详细设计》创建jira开发任务，指定开发人员和开发周期。</li><li>开发人员按要求完成开发任务并修改jira开发任务状态。</li><li>项目代码托管在GitLab上，通过Git Flow模型进行代码版本管理。</li><li>开发人员提交代码后，平台会先确定代码能通过编译并进行静态代码检查，还会检查代码是否通过所有测试。</li><li>项目的主程序员完成代码审核，并执行分支合并操作。</li><li>完成代码的检查、测试和审核后，平台会对应用进行打包并发布到Nexus私服或者Harbor镜像仓库，并将应用部署至测试环境供测试人员进行测试。</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h2><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Full GC排查流程</title>
      <link href="/2020/02/04/FullGC%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/02/04/FullGC%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>针对之前出现过的full gc情况，这里给出排查的流成性建议，以后如果出现此类事件的时候，希望能够按照流程一步一步排查，防止手忙脚乱～（勿喷）</p><p><strong>A.</strong> 为了第一手确定full gc情况，先立即申请某一台主机权限。如果自己有dump的权限的话，先快速进行dump日志来观察一下具体的情况。 </p><p><strong>B.</strong> 10-20分钟无法找到原因并解决问题的话，联系PE协助。full gc频繁的话往往是因为内存的问题，但是有时候也可能某些线程运行不当出现代码BUG导致，所以如果此时没有解决问题的话需要快速重启服务器，但是需要保留2台问题机器，以便继续跟踪问题。</p><p><strong>C.</strong> 拿到jmap和jstack的dump信息之后按照以下流程进行排解：<br>    1.针对jstack的日志，需要确认是否有正在执行循环的线程，因为循环过程往往容易出现过多的中间数据对象。<br>    2.针对jmap日志，基本上只要看top的几个信息就行，如果top1和top2的大小差一个数量级的话，基本上top2就不用看了，直接关注最大的即可。在基本了解了内存的对象情况之后开发自行确认能否立即定位问题。 </p><p><strong>D.</strong> 如果此时依然无法定位问题，查看监控平台，从自己服务的provider和consumer信息中查看是否有异常的调用情况（平均RT突增，调用曲线跟发生full gc的时间曲线吻合，响应异常突增等。），如果此时发现了异常的调用，则跟进异常的接口信息，从代码逻辑分析其与jmap日志的内存情况是否有直接关联。如果能从这里基本定位业务代码，则立马与相关的业务方开发进行联系，确定以下具体的影响面，如果影响不大的话考虑里面在SOA上先把服务禁掉，以保证自身服务的可用性，然后在降低影响的情况下自己再另行修改。如果影响比较大的话，则需要立马快速修改代码，并在修改点做好开关，防止修改引起的BUG，然后立马通知主管，联系PE上线发布。</p><p><strong>E.</strong> 如果通过步骤C依然无法定位问题，则需要在D进行的同时并发执行另外一个操作，通过Eclipse Ememory Analyer查看更加详细的运行信息，然后结合D中分析到的内容进行问题排查。</p><p><strong>F.</strong> 基本上到这里问题都能找到，然后优化后续的操作是必经的逻辑。最后容易遗漏的一点是，检查现在的JVM参数是否可以优化，因为JVM参数往往关系着full gc 的频率问题，如果参数合理的话可以有效的减少一些STW引起的停顿时间，所以这一步还是有必要进行的。</p><p>基本上在出现线上问题的时候容易慌乱，对于jvm的一些命令页容易生疏，网页上查找的各式各样的命令容易眼花缭乱，这里就总结一下在以上过程中可能用到的命令情况： </p><ul><li>查看内存中占用量前10的对象情况： jmap -histo:live pid | head -n 10 </li><li>生成堆内的dump文件：jmap -dump:live,format=b,file=/tmp/dump.hprof pid 如果dump文件过大不利用传输的话需要进行压缩，压缩命令：tar czvf /tmp/dump.tar /tmp/dump.hprof 解压命令：tar zxvf /tmp/dump.tar</li><li>查看线程日志：jstack pid | grep -i “Deadlock” –color=auto 着重查看是否有死锁线程或者Waiting on condition（等待唤醒）或者Blocked（阻塞）或者Waiting on monitor entry（等待获取锁）线程。</li><li>如果对于监控平台监控的细节比较模糊，可以使用jstat 命令监控详细的内存各个区域情况，下面给出参考性脚本（见下）：</li><li>在从远程服务器往本地拷贝文件的时候需要使用scp命令： scp username@remoteIp:/tmp/dump.hprof /temp/dump.hprof</li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Full GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-CI环境搭建与SpringBoot项目CI配置总结</title>
      <link href="/2020/02/04/GitLab-CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8ESpringBoot%E9%A1%B9%E7%9B%AECI%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/04/GitLab-CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8ESpringBoot%E9%A1%B9%E7%9B%AECI%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="GitLab-CI环境搭建"><a href="#GitLab-CI环境搭建" class="headerlink" title="GitLab-CI环境搭建"></a>GitLab-CI环境搭建</h2><h3 id="运行GitLab-Runner容器"><a href="#运行GitLab-Runner容器" class="headerlink" title="运行GitLab Runner容器"></a>运行GitLab Runner容器</h3><blockquote><p>参考<a href="https://docs.gitlab.com/runner/install/docker.html#docker-image-installation-and-configuration">Run GitLab Runner in a container - Docker image installation and configuration</a></p></blockquote><p>执行下述命令运行gitlab-runner容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="注册GitLab-Runner"><a href="#注册GitLab-Runner" class="headerlink" title="注册GitLab Runner"></a>注册GitLab Runner</h3><blockquote><p>参考<a href="https://docs.gitlab.com/runner/register/index.html#gnu-linux">Registering Runners</a></p></blockquote><p>使用 <code>docker exec -it gitlab-runner /bin/bash</code> 命令进入 gitlab-runner 容器命令行环境。</p><p>执行 <code>gitlab-runner register</code> 命令开始注册一个 runner。</p><p>注册时只有输入共享Runner的注册令牌（token）才能注册为共享Runner。关于Runner executor的介绍可以查看 <a href="https://docs.gitlab.com/runner/executors/README.html">Executors</a>。Runner executor选择Docker时会要求填写要使用的默认docker镜像。</p><h2 id="SpringBoot项目的CI配置"><a href="#SpringBoot项目的CI配置" class="headerlink" title="SpringBoot项目的CI配置"></a>SpringBoot项目的CI配置</h2><h3 id="安全变量"><a href="#安全变量" class="headerlink" title="安全变量"></a>安全变量</h3><p>GitLab CI/CD的安全变量有两种，群组安全变量和项目安全变量，群组安全变量可作用于当前群组下所有项目以及子群组项目，递归继承；项目安全变量只作用当前项目。</p><p>实际项目配置的群组变量有：CI_REGISTRY（本地Docker Registry的地址），项目变量有：CI_REGISTRY_IMAGE（项目构建的docker镜像名称）</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jre</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/discovery-server-1.0.0.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10030</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djava.security.edg=file:/dev/./urandom&quot;</span>, <span class="string">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>, <span class="string">&quot;-Xmx128m&quot;</span>, <span class="string">&quot;-Xms64m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p>.gitlab-ci.yml文件可以使用的变量除了手动配置的安全变量外，默认还可以使用预定义变量（详情见<a href="https://docs.gitlab.com/ee/ci/variables/">GitLab CI/CD Variables</a>）。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker:dind</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;--insecure-registry=172.17.0.1:5000&quot;</span>]    <span class="comment"># 将本地Docker Registry私服设置为insecure，避免registry默认需要https才能访问</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">maven-package:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5-jdk-8-alpine</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">install</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">target/*.jar</span>    <span class="comment"># 将maven构建成功的jar包作为构建产出导出，可在下一个stage的任务中使用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE&quot;</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG&quot;</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG&quot;</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="Runner容器的配置"><a href="#Runner容器的配置" class="headerlink" title="Runner容器的配置"></a>Runner容器的配置</h2><p>将maven构建runner容器使用的maven仓库使用数据卷方式进行共享，解决容器每次构建时都要重新下载依赖的问题。具体方法为使用 <code>docker exec -it gitlab-runner /bin/bash</code> 进入gitlab-runner容器，编辑 <code>/etc/gitlab-runner/config.toml</code> 文件，在maven构建runner下的volumes加上 <code>/root/.m2</code> 本地仓库的数据卷映射关系。</p><p>docker构建runner的privileged设置为true，以root用户身份进入容器进行构建任务，避免了由于权限不足无法访问/var/run/docker.sock的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">concurrent = 6</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public docker runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;5223e807ba2c42b18e2aadeceb0e0b&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    registry_mirrors = [&quot;https://ub9x5g6o.mirror.aliyuncs.com/&quot;]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;docker:latest&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public maven runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;b97734914a435c7f3409bea71e122a&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;maven:3.5-jdk-8-alpine&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;, &quot;/home/maven/.m2:/root/.m2&quot;]</span><br><span class="line">    pull_policy = &quot;if-not-present&quot;</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public node runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;e0dea1b0cb42a8d2e1df94ee442b82&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;node:8-alpine&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public ssh runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;266dc28d04f012a5ead3987c1f004e&quot;</span><br><span class="line">  executor = &quot;ssh&quot;</span><br><span class="line">  [runners.ssh]</span><br><span class="line">    user = &quot;root&quot;</span><br><span class="line">    password = &quot;password&quot;</span><br><span class="line">    host = &quot;172.17.0.1&quot;</span><br><span class="line">    port = &quot;22&quot;</span><br><span class="line">    identity_file = &quot;/root/.ssh/id_rsa&quot;</span><br><span class="line">  [runners.cache]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab-CI </tag>
            
            <tag> GitLab </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java枚举类实例</title>
      <link href="/2020/02/04/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/02/04/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.ibm.com/developerworks/cn/java/j-lo-enum/index.html">Java 语言中 Enum 类型的使用介绍</a></p><p>枚举类型（Enumerated Type） 很早就出现在编程语言中，它被用来将一组类似的值包含到一种类型当中。而这种枚举类型的名称则会被定义成独一无二的类型描述符，在这一点上和常量的定义相似。不过相比较常量类型，枚举类型可以为申明的变量提供更大的取值范围。</p><span id="more"></span><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p>在 Java 中通过常量方式定义彩虹的七种颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RainbowColor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 红橙黄绿青蓝紫 其中颜色的常量定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RED = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> YELLOW = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GREEN = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CYAN = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLUE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PURPLE = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，可以在程序中直接引用这些常量。但是，这种方式还是存在着一些问题。</p><ul><li><p>类型不安全</p><p>  由于颜色常量的对应值是整形，所以程序执行过程中很有可能给颜色变量传入一个任意的整数值，导致出现错误。</p></li><li><p>没有命名空间</p><p>  由于颜色常量只是类的属性，当你使用的时候不得不通过类来访问。</p></li><li><p>一致性差</p><p>  因为整形枚举属于编译期常量，所以编译过程完成后，所有客户端和服务端引用的地方，会直接将整数值写入。这样，当你修改旧的枚举整数值后或增加新的枚举值后，所有引用地方代码都需要重新编译，否则运行时就会出现错误。</p></li><li><p>类型无指意性</p><p>  由于颜色枚举值仅仅是一些无任何含义的整数值，如果在运行期调试时，你就会发现日志中有许多魔术数字，但除了程序员本身，其他人很难明白其奥义。</p></li></ul><h2 id="如何定义-Enum-类型"><a href="#如何定义-Enum-类型" class="headerlink" title="如何定义 Enum 类型"></a>如何定义 Enum 类型</h2><p>为了改进 Java 语言在上述方面的不足， 5.0 版本 SDK 发布之后，在语言层面上增加了枚举类型。枚举类型的定义也非常简单，用 enum 关键字加上名称和大括号包含起来枚举值体即可，上面的彩虹颜色可以用 enum 方式进行定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RainbowColor</span> </span>&#123;</span><br><span class="line">    RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义-Enum-类型"><a href="#定义-Enum-类型" class="headerlink" title="定义 Enum 类型"></a>定义 Enum 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一周七天的枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WeekDayEnum</span> </span>&#123;</span><br><span class="line">    Mon, Tue, Wed, Thu, Fri, Sat, Sun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取当天的信息</span></span><br><span class="line">WeekDayEnum today = readToday();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据日期来选择进行活动</span></span><br><span class="line"><span class="keyword">switch</span> (today) &#123;</span><br><span class="line">    Mon: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Tue: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Wed: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Thu: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Fri: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Sat: play sports game; <span class="keyword">break</span>;</span><br><span class="line">    Sun: have a rest; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这些枚举的日期，JVM 都会在运行期构造成一个简单的对象实例一一对应。这些对象都有唯一的 identity，类似整形数值一样，switch 语句就是据此来执行跳转。</p><h2 id="如何定制-Enum-类型"><a href="#如何定制-Enum-类型" class="headerlink" title="如何定制 Enum 类型"></a>如何定制 Enum 类型</h2><p>除了以上这种最常见的枚举定义形式外，如果需要给枚举类型增加一些复杂功能，也可以通过类似 class 的定义来给枚举进行定制。比如要给 enum 类型增加属性，可以像下面这样定义：</p><h3 id="定制枚举类型"><a href="#定制枚举类型" class="headerlink" title="定制枚举类型"></a>定制枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 RSS(Really Simple Syndication) 种子的枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">NewsRSSFeedEnum</span> </span>&#123;</span><br><span class="line">    YAHOO_TOP_STORIES(<span class="string">&quot;http://rss.news.yahoo.com/rss/topstories&quot;</span>), </span><br><span class="line">    CBS_TOP_STORIES(<span class="string">&quot;http://feeds.cbsnews.com/CBSNewsMain?format=xml&quot;</span>), </span><br><span class="line">    LATIMES_TOP_STORIES(<span class="string">&quot;http://feeds.latimes.com/latimes/news?format=xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String rss_url;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NewsRSSFeedEnum</span><span class="params">(String rss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rss_url = rss;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRssURL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rss_url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面头条新闻的枚举类型增加了一个 RSS 地址的属性，记录头条新闻的访问地址。同时，需要外部传入 RSS 访问地址的值，因而需要定义一个构造方法来初始化此属性。此外，还需要想外提供 getter 方法读取 RSS 地址。</p><h2 id="如何避免错误使用-Enum"><a href="#如何避免错误使用-Enum" class="headerlink" title="如何避免错误使用 Enum"></a>如何避免错误使用 Enum</h2><p>在使用 Enum 的时候有几个地方需要注意：</p><ul><li>enum类型不支持 public 和 protected 修饰的构造方法，因此构造函数一定要是 private 或 friendly 的。正因如此，枚举对象无法在程序中通过直接调用其构造方法来初始化。</li><li>定义 enum 类型的时候，如果是简单类型，那么最后一个枚举值就不用跟任何一个符号；但如果有定制方法，那么最后一个枚举值与后面代码要用分号 ; 隔开，不能用逗号或空格。</li><li>由于 enum 类型的值实际上是通过运行期构造处对象来表示，所以在 cluster(集群) 环境下，每个虚拟机都会构造出一个同义的枚举对象。因而在做比较操作时需要注意，如果直接用等号（==）操作符，这些看似一样的枚举值一定不相等，因为这不是同一个对象实例。</li></ul><h3 id="避免错误使用-Enum-示例"><a href="#避免错误使用-Enum-示例" class="headerlink" title="避免错误使用 Enum 示例"></a>避免错误使用 Enum 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个一周七天的枚举类型</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WeekDayEnum</span> </span>&#123; </span><br><span class="line">   Mon(<span class="number">1</span>), Tue(<span class="number">2</span>), Wed(<span class="number">3</span>), Thu(<span class="number">4</span>), Fri(<span class="number">5</span>), Sat(<span class="number">6</span>), Sun(<span class="number">7</span>); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> index; </span><br><span class="line"></span><br><span class="line">   WeekDayEnum(<span class="keyword">int</span> idx) &#123; </span><br><span class="line">       <span class="keyword">this</span>.index = idx; </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> index; </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端程序，将一个枚举值通过网络传递给服务器端</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException; </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream; </span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress; </span><br><span class="line"><span class="keyword">import</span> java.net.Socket; </span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationClient</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123; </span><br><span class="line">       Socket socket = <span class="keyword">new</span> Socket(); </span><br><span class="line"> <span class="comment">// 建立到服务器端的连接</span></span><br><span class="line">       socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8999</span>)); </span><br><span class="line">   <span class="comment">// 从连接中得到输出流</span></span><br><span class="line">       OutputStream os = socket.getOutputStream(); </span><br><span class="line">       ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(os); </span><br><span class="line"> <span class="comment">// 将星期五这个枚举值传递给服务器端</span></span><br><span class="line">       oos.writeObject(WeekDayEnum.Fri); </span><br><span class="line">       oos.close(); </span><br><span class="line">       os.close(); </span><br><span class="line">       socket.close(); </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端程序，将从客户端收到的枚举值应用到逻辑处理中</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*; </span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket; </span><br><span class="line"><span class="keyword">import</span> java.net.Socket; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationServer</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123; </span><br><span class="line">       ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8999</span>); </span><br><span class="line"> <span class="comment">// 建立服务器端的网络连接侦听</span></span><br><span class="line">       Socket socket = server.accept(); </span><br><span class="line"> <span class="comment">// 从连接中获取输入流</span></span><br><span class="line">       InputStream is = socket.getInputStream(); </span><br><span class="line">       ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(is); </span><br><span class="line"> <span class="comment">// 读出客户端传递来的枚举值</span></span><br><span class="line">       WeekDayEnum day = (WeekDayEnum) ois.readObject(); </span><br><span class="line"> <span class="comment">// 用值比较方式来对比枚举对象</span></span><br><span class="line">       <span class="keyword">if</span> (day == WeekDayEnum.Fri) &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is same as server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day.equals(WeekDayEnum.Fri)) &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is equal to server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is not same as server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; </span><br><span class="line">       </span><br><span class="line"> <span class="comment">// 用 switch 方式来比较枚举对象</span></span><br><span class="line">       <span class="keyword">switch</span> (day) &#123; </span><br><span class="line">           <span class="keyword">case</span> Mon: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Monday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Tue: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Tuesday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Wed: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Wednesday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Thu: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Thursday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Fri: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Friday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Sat: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Saturday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Sun: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Sunday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">default</span>: </span><br><span class="line">               System.out.println(<span class="string">&quot;I don&#x27;t know which is day&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">       &#125; </span><br><span class="line">       </span><br><span class="line">       ois.close(); </span><br><span class="line">       is.close(); </span><br><span class="line">       socket.close(); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client Friday enum value is same as server&#x27;s </span><br><span class="line">Do Friday work</span><br></pre></td></tr></table></figure><p>通过程序执行结果，我们能够发现在分布式条件下客户端和服务端的虚拟机上都生成了一个枚举对象，即使看起来一样的 Fri 枚举值，如果使用等号‘ == ’进行比较的话会出现不等的情况。而 switch 语句则是通过 equal 方法来比较枚举对象的值，因此当你的枚举对象较复杂时候，你就需要小心 override 与比较相关的方法，防止出现值比较方面的错误。</p><h2 id="Enum-相关工具类"><a href="#Enum-相关工具类" class="headerlink" title="Enum 相关工具类"></a>Enum 相关工具类</h2><p>DK5.0 中在增加 Enum 类的同时，也增加了两个工具类 EnumSet 和 EnumMap，这两个类都放在 java.util 包中。EnumSet 是一个针对枚举类型的高性能的 Set 接口实现。EnumSet 中装入的所有枚举对象都必须是同一种类型，在其内部，是通过 bit-vector 来实现，也就是通过一个 long 型数。EnumSet 支持在枚举类型的所有值的某个范围中进行迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (WeekDayEnum day : EnumSet.range(WeekDayEnum.Mon, WeekDayEnum.Fri)) &#123;</span><br><span class="line">    System.out.println(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mon </span><br><span class="line">Tue </span><br><span class="line">Wed </span><br><span class="line">Thu </span><br><span class="line">Fri</span><br></pre></td></tr></table></figure><p>EnumSet 还提供了很多个类型安全的获取子集的 of 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnumSet&lt;WeekDayEnum&gt; subset = EnumSet.of(WeekDayEnum.Mon, WeekDayEnum.Wed);</span><br><span class="line"><span class="keyword">for</span> (WeekDayEnum day : subset) &#123;</span><br><span class="line">    System.out.println(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mon</span><br><span class="line">Wed</span><br></pre></td></tr></table></figure><p>与 EnumSet 类似，EnumMap 也是一个高性能的 Map 接口实现，用来管理使用枚举类型作为 keys 的映射表，内部是通过数组方式来实现。EnumMap 将丰富的和安全的 Map 接口与数组快速访问结合到一起，如果你希望要将一个枚举类型映射到一个值，你应该使用 EnumMap。</p><h3 id="EnumMap-示例"><a href="#EnumMap-示例" class="headerlink" title="EnumMap 示例"></a>EnumMap 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 EnumMap 对象，映射表主键是日期枚举类型，值是颜色枚举类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;WeekDayEnum, RainbowColor&gt; schema = </span><br><span class="line"><span class="keyword">new</span> EnumMap&lt;WeekDayEnum, RainbowColor&gt;(WeekDayEnum.class); </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123; </span><br><span class="line">    <span class="comment">// 将一周的每一天与彩虹的某一种色彩映射起来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; WeekDayEnum.values().length; i++) &#123; </span><br><span class="line">        schema.put(WeekDayEnum.values()[i], RainbowColor.values()[i]); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">System.out.println(<span class="string">&quot;What is the lucky color today?&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;It&#x27;s &quot;</span> + schema.get(WeekDayEnum.Sat));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What is the lucky color today? </span><br><span class="line">It&#x27;s BLUE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符instanceof的用法</title>
      <link href="/2020/02/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6instanceof%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/02/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6instanceof%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Java 中的 instanceof 运算符用来在运行时指出对象是否是特定类的一个实例。本文简要介绍下 instanceof 运算符的用法和注意事项。</p><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = object <span class="keyword">instanceof</span> <span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>参数：</p><p>result - boolean 类型</p><p>object - 必选项，任意对象实例</p><p>class - 任意已定义的对象类</p><p>说明：</p><p>如果 object 是 class 的一个实例，则 instanceof 运算符返回 true，反之若 object 不是指定 class 的一个实例或 object 为 null，则返回 false。</p><p>例子：</p><p>以下示例展示了实现、继承关系的类实例使用 instanceof 运算符的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">null</span>;</span><br><span class="line">B b = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;null instanceof A:&quot;</span> + (a <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;null instanceof B:&quot;</span> + (b <span class="keyword">instanceof</span> A));</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> B();</span><br><span class="line">b = <span class="keyword">new</span> B();</span><br><span class="line">System.out.println(<span class="string">&quot;a instanceof A:&quot;</span> + (a <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;a instanceof B:&quot;</span> + (a <span class="keyword">instanceof</span> B));</span><br><span class="line">System.out.println(<span class="string">&quot;b instanceof A:&quot;</span> + (b <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;b instanceof B:&quot;</span> + (b <span class="keyword">instanceof</span> B));</span><br><span class="line"></span><br><span class="line">B b2 = (C) <span class="keyword">new</span> C();</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof A:&quot;</span> + (b2 <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof B:&quot;</span> + (b2 <span class="keyword">instanceof</span> B));</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof C:&quot;</span> + (b2 <span class="keyword">instanceof</span> C));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">null instanceof A:false</span><br><span class="line">null instanceof B:false</span><br><span class="line">a instanceof A:true</span><br><span class="line">a instanceof B:true</span><br><span class="line">b instanceof A:true</span><br><span class="line">b instanceof B:true</span><br><span class="line">b2 instantceof A:true</span><br><span class="line">b2 instantceof B:true</span><br><span class="line">b2 instantceof C:true</span><br></pre></td></tr></table></figure><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><ol><li>null instanceof 任何类结果均为 false</li><li>对象类不包含 int、double 等基本类型</li><li>大多数情况下 instanceof 并不是推荐的做法，更推荐利用多态及方法重载</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java递归的实践</title>
      <link href="/2020/02/04/Java%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/04/Java%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>递归指的是方法或函数自身调用自身，适用于一个功能被重复使用，而每一次使用时的参数是由上次的结果来确定的情况。本文介绍了递归在实际工作场景中的应用。</p><span id="more"></span><p>以下是将一个多层结构数据转换成树形结构的实例，该实例能够很好的展示递归的使用方式。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li>原始数据</li></ul><table><thead><tr><th align="center">id</th><th align="center">parentId</th><th align="center">value</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">one</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">two</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">three</td></tr><tr><td align="center">4</td><td align="center">2</td><td align="center">four</td></tr><tr><td align="center">5</td><td align="center">2</td><td align="center">five</td></tr><tr><td align="center">6</td><td align="center">3</td><td align="center">six</td></tr><tr><td align="center">7</td><td align="center">4</td><td align="center">seven</td></tr><tr><td align="center">8</td><td align="center">4</td><td align="center">eight</td></tr><tr><td align="center">9</td><td align="center">4</td><td align="center">nine</td></tr><tr><td align="center">10</td><td align="center">5</td><td align="center">ten</td></tr><tr><td align="center">11</td><td align="center">6</td><td align="center">eleven</td></tr><tr><td align="center">12</td><td align="center">9</td><td align="center">twelve</td></tr></tbody></table><ul><li>层级结构</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;one&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;two&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;four&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;seven&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;eight&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;nine&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">                  <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;twelve&quot;</span>,</span><br><span class="line">                  <span class="attr">&quot;nodes&quot;</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;five&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;ten&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;three&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;six&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;id&quot;</span>: <span class="number">11</span>,</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;eleven&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java递归的实现"><a href="#Java递归的实现" class="headerlink" title="Java递归的实现"></a>Java递归的实现</h2><h3 id="递归得到树形结构"><a href="#递归得到树形结构" class="headerlink" title="递归得到树形结构"></a>递归得到树形结构</h3><ul><li>Model类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Integer parentId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNodes</span><span class="params">(List&lt;Item&gt; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from table where parentId = #&#123;parentId:INTEGER&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">getSubItemsByParentId</span><span class="params">(Integer parentId)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select id from table where parentId = #&#123;parentId:INTEGER&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getSubItemIds</span><span class="params">(Integer parentId)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select * from table where id = #&#123;id:INTEGER&#125;&quot;)</span></span><br><span class="line">    <span class="function">Item <span class="title">getItemById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="function">Item <span class="title">getItemTree</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getSubItemIds</span><span class="params">(Integer itemId)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getParentItemIds</span><span class="params">(Integer itemId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getItemTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item rootItem = itemMapper.getItemById(<span class="number">1</span>);</span><br><span class="line">        setItemTree(<span class="number">1</span>, rootItem);</span><br><span class="line">        <span class="keyword">return</span> rootItem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setItemTree</span><span class="params">(Integer itemId, Item item)</span> </span>&#123;</span><br><span class="line">        List&lt;Item&gt; subItems = itemMapper.getSubItemsByParentId(itemId);</span><br><span class="line">        <span class="keyword">if</span> (subItems != <span class="keyword">null</span> &amp;&amp; subItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Item subItem : subItems) &#123;</span><br><span class="line">                setItemTree(subItem.getId(), subItem);</span><br><span class="line">            &#125;</span><br><span class="line">            item.setNodes(subItems);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归获取指定item所有父item-ID的集合"><a href="#递归获取指定item所有父item-ID的集合" class="headerlink" title="递归获取指定item所有父item ID的集合"></a>递归获取指定item所有父item ID的集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getParentItemIds</span><span class="params">(Integer itemId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getParentItemIds(itemId, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getParentItemIds</span><span class="params">(Integer itemId, ArrayList&lt;Integer&gt; resultIds)</span> </span>&#123;</span><br><span class="line">        Item item = itemMapper.getItemById(itemId);</span><br><span class="line">        <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; item.getParentId() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultIds.add(item.getParentId());</span><br><span class="line">            getParentItemIds(item.getParentId(), resultIds);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归获取指定item下所有子item-ID的集合"><a href="#递归获取指定item下所有子item-ID的集合" class="headerlink" title="递归获取指定item下所有子item ID的集合"></a>递归获取指定item下所有子item ID的集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getSubItemIds</span><span class="params">(Integer itemId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSubItemIds(itemId, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getSubItemIds</span><span class="params">(Integer itemId, ArrayList&lt;Integer&gt; resultIds)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; subItemIds = itemMapper.getSubItemIds(itemId);</span><br><span class="line">        <span class="keyword">if</span> (subItemIds != <span class="keyword">null</span> &amp;&amp; subItemIds.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultIds.addAll(subItemIds);</span><br><span class="line">            <span class="keyword">for</span> (Integer subItemId : subItemIds) &#123;</span><br><span class="line">                getSubItemIds(subItemId, resultIds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合杂谈</title>
      <link href="/2020/02/04/Java%E9%9B%86%E5%90%88%E6%9D%82%E8%B0%88/"/>
      <url>/2020/02/04/Java%E9%9B%86%E5%90%88%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>Java 中的集合类在开发过程中经常被使用，本文介绍了集合相关的一些知识。</p><span id="more"></span><h4 id="ArrayList-的-remove-方法"><a href="#ArrayList-的-remove-方法" class="headerlink" title="ArrayList 的 remove 方法"></a>ArrayList 的 remove 方法</h4><p>我们首先从一个常见的面试题切入，代码如下：</p><p>代码1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】这里的 foreach 循环实际上等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = a.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String temp = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>《Java核心技术》中有写道：</p><blockquote><p>“for each” 循环可以与任何实现了 Iterable 接口的对象一起工作，这个接口只包含一个方法：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Collection 接口扩展了 Iterable 接口。因此，对于标准类库中的任何集合都可以使用 “for each” 循环。</p></blockquote><p>那么这段代码的运行结果是什么呢？结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br></pre></td></tr></table></figure><p>以下是该题的另外两段代码：</p><p>代码2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果分别是：</p><p>代码2运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:851)</span><br></pre></td></tr></table></figure><p>代码3运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br><span class="line">2---</span><br></pre></td></tr></table></figure><p>首先看 ArrayList.remove() 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】System.arraycopy() 方法可以实现数组之间的复制。依次接收四个参数 Object src（源数组）, int srcPos（源数组要复制的起始位置）, Object dest（目的数组）, int destPos（目的数组放置的起始位置）, int length（复制的长度）。该方法可以实现自己到自己复制，其实现过程为：先生成一个长度为 length 的临时数组，将源数组中 srcPos 到 srcPos + length - 1 之间的数组拷贝到临时数组中，再执行 System.arraycopy(临时数组,srcPos,数组,destPos,length)。需要注意的是源数组和目的数组必须是同类型或是可以进行类型转换的数组。</p><p>然后是 ArrayList 中 iterator() 方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源码之后可以发现 代码1 和 代码3 的运行逻辑：<br><code>a.remove()</code> -&gt; <code>fastremove()</code> 会使得 a 的 size 减 1，而此时的 cursor 已经等于 size - 1 了，继续循环调用 iterator.hasNext() 方法会返回 false 导致循环结束。</p><p>代码2 的运行逻辑：<br><code>modCount</code> 用于记录 iterator 的操作次数，成功调用 iterator 的 remove 方法会将 expectedModCount 与 modCount 进行同步。<code>a.remove()</code> 调用的并不是 iterator 的 remove() 方法，而是 ArrayList 的 remove() 方法，remove 之后并没有将 expectedModCount 进行更新，此时继续调用 iterator.next() 会触发 checkForComodification() 检查从而抛出 ConcurrentModificationException异常。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合类 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Confluence</title>
      <link href="/2020/02/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Confluence/"/>
      <url>/2020/02/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Confluence/</url>
      
        <content type="html"><![CDATA[<h2 id="Confluence简介"><a href="#Confluence简介" class="headerlink" title="Confluence简介"></a>Confluence简介</h2><p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建<strong>企业wiki</strong> 。通过它可以实现团队成员之间的协作和知识共享。</p><p>Confluence为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p><p>Confluence使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。</p><span id="more"></span><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>进入Confluence官网</p><p> 浏览<a href="https://www.atlassian.com/software/confluence">Confluence官网</a>，进入<a href="https://www.atlassian.com/software/confluence/download">下载页面</a>，选择 <strong>Linux 64Bit</strong> 版本进行下载，复制<a href="https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.3.2-x64.bin">下载地址</a>。</p></li><li><p>远程连接阿里云服务器实例。</p></li><li><p>下载Confluence</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>向安装文件添加执行权限</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>执行安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>填写配置信息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ125p3eqb4fw3Z data]<span class="comment"># ./atlassian-confluence-6.3.1-x64.bin </span></span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line">Aug 04, 2017 11:31:41 AM java.util.prefs.FileSystemPreferences<span class="variable">$2</span> run</span><br><span class="line">INFO: Created system preferences directory <span class="keyword">in</span> java.home.</span><br><span class="line"></span><br><span class="line">This will install Confluence 6.3.1 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o</span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (uses default settings) [1], </span><br><span class="line">Custom Install (recommended <span class="keyword">for</span> advanced users) [2, Enter], </span><br><span class="line">Upgrade an existing Confluence installation [3]</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Where should Confluence 6.3.1 be installed?</span><br><span class="line">[/opt/atlassian/confluence]</span><br><span class="line">/data/atlassian/confluence</span><br><span class="line">Default location <span class="keyword">for</span> Confluence data</span><br><span class="line">[/var/atlassian/application-data/confluence]</span><br><span class="line">/data/atlassian/application-data/confluence</span><br><span class="line">Configure <span class="built_in">which</span> ports Confluence will use.</span><br><span class="line">Confluence requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is <span class="built_in">where</span> you will access</span><br><span class="line">Confluence through your browser. The Control port is used to Startup and</span><br><span class="line">Shutdown Confluence.</span><br><span class="line">Use default ports (HTTP: 8090, Control: 8000) - Recommended [1, Enter], Set custom value <span class="keyword">for</span> HTTP and Control ports [2]</span><br><span class="line">1</span><br><span class="line">Confluence can be run <span class="keyword">in</span> the background.</span><br><span class="line">You may choose to run Confluence as a service, <span class="built_in">which</span> means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install Confluence as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                        </span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> we configure Confluence.</span><br><span class="line">Installation of Confluence 6.3.1 is complete</span><br><span class="line">Start Confluence now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> Confluence starts up.</span><br><span class="line">Launching Confluence ...</span><br><span class="line">Installation of Confluence 6.3.1 is complete</span><br><span class="line">Your installation of Confluence 6.3.1 is now ready and can be accessed via</span><br><span class="line">your browser.</span><br><span class="line">Confluence 6.3.1 can be accessed at http://localhost:8090</span><br><span class="line">Finishing installation ...</span><br></pre></td></tr></table></figure></li><li><p>完成安装，在浏览器中打开 <code>http://&#123;host&#125;:8090</code> 访问Confluence</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Confluence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2020/02/04/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/02/04/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.cnblogs.com/laov/p/3541414.html#Linux">【Linux】Linux中常用操作命令</a></p><p>本文列举了一些Linux下比较常用的操作命令，方便日常查看和使用。</p><span id="more"></span><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ls        显示文件或目录  </span><br><span class="line">    -l      列出文件详细信息l(list)  </span><br><span class="line">    -a      列出当前目录下所有文件及目录，包括隐藏的a(all)  </span><br><span class="line">mkdir     创建目录  </span><br><span class="line">    -p      创建目录，若无父目录，则创建p(parent)  </span><br><span class="line">cd        切换目录  </span><br><span class="line">touch     创建空文件  </span><br><span class="line">echo      创建带有内容的文件  </span><br><span class="line">cat       查看文件内容  </span><br><span class="line">cp        拷贝  </span><br><span class="line">mv        移动或重命名  </span><br><span class="line">rm        删除文件  </span><br><span class="line">    -r      递归删除，可删除子目录及文件  </span><br><span class="line">    -f      强制删除  </span><br><span class="line">find      在文件系统中搜索某文件  </span><br><span class="line">wc        统计文本中行数、字数、字符数  </span><br><span class="line">grep      在文本文件中查找某个字符串  </span><br><span class="line">rmdir     删除空目录  </span><br><span class="line">tree      树形结构显示目录，需要安装tree包  </span><br><span class="line">pwd       显示当前目录  </span><br><span class="line">ln        创建链接文件  </span><br><span class="line">more、less 分页显示文本文件内容  </span><br><span class="line">head、tail 显示文件头、尾内容  </span><br><span class="line">ctrl+alt+F1   命令行全屏模式  </span><br></pre></td></tr></table></figure><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stat      显示指定文件的详细信息，比ls更详细  </span><br><span class="line">who       显示在线登陆用户  </span><br><span class="line">whoami    显示当前操作用户  </span><br><span class="line">hostname  显示主机名  </span><br><span class="line">uname     显示系统信息  </span><br><span class="line">top       动态显示当前耗费资源最多进程信息  </span><br><span class="line">ps        显示瞬间进程状态 ps -aux  </span><br><span class="line">du        查看目录大小 du -h /home带有单位显示目录信息  </span><br><span class="line">df        查看磁盘大小 df -h 带有单位显示磁盘信息  </span><br><span class="line">ifconfig  查看网络情况  </span><br><span class="line">ping      测试网络连通  </span><br><span class="line">netstat   显示网络状态信息  </span><br><span class="line">man       命令不会用了，找男人  如：man ls  </span><br><span class="line">clear     清屏  </span><br><span class="line">alias     对命令重命名 如：alias showmeit=&quot;ps -aux&quot; ，另外解除使用unaliax showmeit  </span><br><span class="line">kill      杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程 </span><br></pre></td></tr></table></figure><h2 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gzip</span><br><span class="line">bzip2</span><br><span class="line">tar         打包压缩  </span><br><span class="line">    -c      归档文件  </span><br><span class="line">    -x      压缩文件  </span><br><span class="line">    -z      gzip压缩文件  </span><br><span class="line">    -j      bzip2压缩文件  </span><br><span class="line">    -v      显示压缩或解压缩过程 v(view)  </span><br><span class="line">    -f      使用档名  </span><br></pre></td></tr></table></figure><p>例： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc.tar /home/abc        只打包，不压缩</span><br><span class="line">tar -zcvf /home/abc.tar.gz /home/abc    打包，并用gzip压缩</span><br><span class="line">tar -jcvf /home/abc.tar.bz2 /home/abc   打包，并用bzip2压缩</span><br></pre></td></tr></table></figure><p>当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“c” 换成“x” 就可以了。</p><h2 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown  </span><br><span class="line">   -r       关机重启  </span><br><span class="line">   -h       关机不重启  </span><br><span class="line">   now      立刻关机  </span><br><span class="line">halt        关机  </span><br><span class="line">reboot      重启  </span><br></pre></td></tr></table></figure><h2 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a>Linux管道</h2><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;close&quot; /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。</span><br></pre></td></tr></table></figure><h2 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h2><ul><li><p><strong>dpkg</strong> (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。</p><p>  比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i tree_1.5.3-l_i386.deb  安装软件</span><br><span class="line">sudo dpkg -r tree                   卸载软件</span><br></pre></td></tr></table></figure><p>  注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；</p></li><li><p><strong>APT</strong>（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p><p>  依然以tree为例</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tree           安装tree</span><br><span class="line">sudo apt-get remove tree            卸载tree</span><br><span class="line">sudo apt-get update                 更新软件</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>将.rpm文件转为.deb文件</p><p>  .rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo alien abc.rpm</span><br></pre></td></tr></table></figure></li></ul><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p><p>命令模式下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:q                      退出</span><br><span class="line">:q!                     强制退出</span><br><span class="line">:wq                     保存并退出</span><br><span class="line">:set number             显示行号</span><br><span class="line">:set nonumber           隐藏行号</span><br><span class="line">/apache                 在文档中查找apache 按n跳到下一个，shift+n上一个</span><br><span class="line">yyp                     复制光标所在行，并粘贴</span><br><span class="line">h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</span><br></pre></td></tr></table></figure><h2 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd     存储用户账号</span><br><span class="line">/etc/group      存储组账号</span><br><span class="line">/etc/shadow     存储用户账号的密码</span><br><span class="line">/etc/gshadow    存储用户组账号的密码</span><br><span class="line">useradd 用户名</span><br><span class="line">userdel 用户名</span><br><span class="line">adduser 用户名</span><br><span class="line">groupadd 组名</span><br><span class="line">groupdel 组名</span><br><span class="line">passwd root     给root设置密码</span><br><span class="line">su root</span><br><span class="line">su - root </span><br><span class="line">/etc/profile    系统环境变量</span><br><span class="line">bash_profile    用户环境变量</span><br><span class="line">.bashrc         用户环境变量</span><br><span class="line">su user         切换用户，加载配置文件.bashrc</span><br><span class="line">su - user       切换用户，加载配置文件/etc/profile ，加载bash_profile</span><br></pre></td></tr></table></figure><ul><li>更改文件的用户及用户组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown [-R] owner[:group] &#123;File|Directory&#125;</span><br></pre></td></tr></table></figure>例如：还以jdk-7u21-linux-i586.tar.gz为例，属于用户hadoop，组hadoop</li></ul><p>要想切换此文件所属的用户及组。可以使用命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root jdk-7u21-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><p>三种基本权限  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R   读       数值表示为4</span><br><span class="line">W   写       数值表示为2</span><br><span class="line">X   可执行     数值表示为1</span><br></pre></td></tr></table></figure><p><img src="http://images.cnitblog.com/blog/352072/201402/091549405142313.png" alt="linux文件权限"></p><p>如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r–</p><p>-rw-rw-r–一共十个字符，分成四段。</p><p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p><p>第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6</p><p>第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2=6</p><p>第八九十个字符“r–”表示其他用户权限。              所以用数值表示为2</p><p>所以操作此文件的权限用数值表示为662 </p><ul><li>更改权限  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 </span><br></pre></td></tr></table></figure>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+x g+w o+r  filename</span><br></pre></td></tr></table></figure>上面的例子可以用数值表示  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 765 filename</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统设置静态IP</title>
      <link href="/2020/02/04/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
      <url>/2020/02/04/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/</url>
      
        <content type="html"><![CDATA[<p>在日常工作中，常常会由于动态IP分配导致指定主机或者服务器的内网IP发生变化，造成很多不便，通过设置静态IP可以有效解决此问题。本文简单介绍如何在CentOS 7和Ubuntu 18.04系统中设置静态IP。</p><span id="more"></span><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><h3 id="1-通过ifconfig命令查看当前的网络设置"><a href="#1-通过ifconfig命令查看当前的网络设置" class="headerlink" title="1. 通过ifconfig命令查看当前的网络设置"></a>1. 通过ifconfig命令查看当前的网络设置</h3><p><img src="/images/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF.png" alt="获取网卡信息"></p><h3 id="2-修改网卡配置"><a href="#2-修改网卡配置" class="headerlink" title="2. 修改网卡配置"></a>2. 修改网卡配置</h3><p>找到 <code>/etc/sysconfig/network-scripts/</code> 目录下网卡xxx的配置文件并修改为如下内容：</p><p><img src="/images/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="网卡配置文件"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;p8p1&quot;</span><br><span class="line">UUID=&quot;d7fcxxxx-xxxx-xxxx-xxxx-xxxx4d87xxxx&quot;</span><br><span class="line">DEVICE=&quot;p8p1&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.1.101&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br><span class="line">DNS2=&quot;192.168.1.1&quot;</span><br><span class="line">PREFIX=&quot;24&quot;</span><br><span class="line">IPV6_PRIVACY=&quot;no&quot;</span><br><span class="line">ZONE=</span><br></pre></td></tr></table></figure><p>其中 <code>IPADDR</code> 即是我们设置的静态IP地址。</p><h3 id="3-重启network服务"><a href="#3-重启network服务" class="headerlink" title="3. 重启network服务"></a>3. 重启network服务</h3><p>修改配置文件之后，执行 <code>service network restart</code> 命令重启network服务即可让配置生效。</p><h2 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h2><h3 id="1-修改网卡配置"><a href="#1-修改网卡配置" class="headerlink" title="1. 修改网卡配置"></a>1. 修改网卡配置</h3><p>找到 <code>/etc/netplan/</code> 目录下的 <code>yaml</code> 格式配置文件，修改配置文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">networK:</span><br><span class="line">    ethernets:</span><br><span class="line">        p8p1:</span><br><span class="line">            dhcp4: no</span><br><span class="line">            addresses: [192.168.1.101/24]</span><br><span class="line">            optional: true</span><br><span class="line">            gateway4: 192.168.1.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: [114.114.114.114, 192.168.1.1]</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><h3 id="2-配置生效"><a href="#2-配置生效" class="headerlink" title="2. 配置生效"></a>2. 配置生效</h3><p>执行 <code>sudo netplan apply</code> 命令使配置生效。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2020/02/04/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/04/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>引用自：Te_Lee的 <a href="http://www.jianshu.com/p/1e402922ee32">Markdown——入门指南</a></p><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p><span id="more"></span><h2 id="语法简要规则"><a href="#语法简要规则" class="headerlink" title="语法简要规则"></a>语法简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effeaclhiyj20eh09cwez.jpg" alt="Markdown标题"></p><p>每篇文章都离不开标题，层次分明的标题可以让文章的结构清晰明了，让读者能快速抓住行文脉络。</p><p><code># 一级标题</code><br><code>## 二级标题</code><br><code>### 三级标题</code></p><p>以此类推，最多可以到六级标题，#号后的空格可加可不加，规范的写法是加上一个空格。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><img src="http://ww4.sinaimg.cn/large/6aee7dbbgw1effew5aftij20d80bz3yw.jpg" alt="Markdown列表"></p><p>无序列表在文字需要前加上 <code>-</code> 或者 <code>*</code>；而有序列表则需要在文字前加上 <code>1. </code> ，注意空格，这里的数字1并不是固定写死的，使用任意数字都可以。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effezhonxlj20e009c3yu.jpg" alt="Markdown引用"></p><p>当你需要引用其他地方的一段文字时，需要用到引用的格式，在文本前加上 <code>&gt;</code>。</p><blockquote><p>青年的朝气倘已消失，前进不己的好奇心已衰退以后，人生就没有意义。 ——穆勒</p></blockquote><h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" alt="Markdown图片与链接"></p><p>插入链接与插入图片的语法很相似，区别在一个 <code>!</code> 号。<br>图片： <code>![描述](url)</code><br>链接： <code>[描述](url)</code></p><p>图片的地址一般需要<strong>图床</strong>工具或服务生成URL地址。</p><h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>用两个<code>*</code>包含一段文本即可显示该段文本的黑体，类似的，用一个<code>*</code>或者<code>_</code>包含则可以显示斜体。</p><p><strong>粗体</strong> <em>斜体</em></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>用两个<code>~</code>包含一段文本即可在该段文本上显示删除线。</p><p><del>标记删除的文本</del> </p><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effg1lsa97j20lt0a8dgs.jpg" alt="Markdown代码框"></p><p>用两个 ` 把中间的代码段包裹起来即可让代码段显示在代码框里。</p><p><code>Hello, world!</code></p><p>多行代码可以用三个 ` 前后包裹，加上编程语言类型可以使代码正确地显示语法高亮。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>tab</code>进行缩进。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要三个<code>*</code>号。</p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>下面上表格语法的一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h3><p>使用 <code>&lt;details&gt;</code> 标签表示一个可以折叠的块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;折叠块展示的标题&lt;/summary&gt;</span><br><span class="line">    &lt;p&gt;折叠块的内容&lt;/p&gt;</span><br><span class="line">    Hello, Wrold!</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><details>    <summary>折叠块展示的标题</summary>    <p>折叠块的内容</p>    Hello, Wrold!</details><h3 id="GitHub的checkbox列表"><a href="#GitHub的checkbox列表" class="headerlink" title="GitHub的checkbox列表"></a>GitHub的checkbox列表</h3><p>在列表符号（即 <code>-</code> 或者 <code>*</code>）后面加上 <code>[x]</code> 或者 <code>[ ]</code>（注意中间的空格） 表示选中或者未选中的checkbox。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- [x] Java</span><br><span class="line">- [x] JavaScript</span><br><span class="line">- [x] HTML</span><br><span class="line">- [x] CSS</span><br><span class="line">- [ ] C++</span><br><span class="line">- [ ] Go</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> Java</li><li><input checked="" disabled="" type="checkbox"> JavaScript</li><li><input checked="" disabled="" type="checkbox"> HTML</li><li><input checked="" disabled="" type="checkbox"> CSS</li><li><input disabled="" type="checkbox"> C++</li><li><input disabled="" type="checkbox"> Go</li></ul><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h4><ul><li><a href="http://markdownpad.com/">MarkdownPad</a></li><li><a href="http://mouapp.com/">Mou</a></li><li><a href="http://cloose.github.io/CuteMarkEd">CuteMarkEd</a></li><li><a href="http://code52.org/DownmarkerWPF/">MarkPad</a></li><li><a href="http://pad.haroopress.com/user.html">Haroopad</a></li></ul><h4 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h4><ul><li><a href="http://droplr.com/">Droplr</a>  </li><li><a href="http://www.getcloudapp.com/">Cloudapp</a>  </li><li><a href="https://itunes.apple.com/cn/app/yi-xiang/id672522335?mt=12&uo=4">ezShare for Mac</a>  </li><li><a href="http://weibotuchuang.sinaapp.com/">围脖图床修复计划</a>  </li></ul><p>下图介绍了图床的用途。</p><p><img src="https://pic2.zhimg.com/v2-f0c54b4b142546767d920f7fb488cf81_b.jpg" alt="图床"></p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><blockquote><p>官方文档<br><a href="http://daringfireball.net/projects/markdown/syntax">创始人 John Gruber 的 Markdown 语法说明</a><br><a href="http://wowubuntu.com/markdown/">Markdown 中文版语法说明</a></p></blockquote><ul><li><a href="http://www.jianshu.com/p/qqgjln">为什么作家应该用 Markdown 保存自己的文稿</a>  </li><li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">Markdown写作浅谈</a>  </li><li><a href="http://www.appinn.com/markdown-tools/">Markdown 工具补完</a>  </li><li><a href="http://jianshu.io/p/63HYZ6">Drafts + Scriptogr.am + Dropbox 打造移动端 Markdown 风格博客</a>  </li><li><a href="http://news.cnblogs.com/n/139649/">为什么我们要学习Markdown的三个理由</a>  </li><li><a href="http://ibuick.me/?p=4093">Markdown 语法写作入门指南 by ibuick</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装部署及常见问题</title>
      <link href="/2020/02/04/RabbitMQ%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/04/RabbitMQ%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.cnblogs.com/zhjh256/p/5922562.html">centos/rhel 6.5（更新至centos 7）下rabbitmq安装（最简单方便的方式）</a>，<a href="http://www.cnblogs.com/junrong624/p/4121656.html">rabbitMQ windows 安装 入门</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从<a href="https://www.rabbitmq.com/download.html">RabbitMQ官方下载页面</a>下载对应版本的安装包，执行安装包的时候会提示安装 <strong>Erlang</strong> 并打开 Erlang 的官方下载页面，下载安装 Erlang，之后 RabbitMQ会继续安装完成。</p><span id="more"></span><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>windows系统下 RabbitMQ 会作为服务安装并设置为自启动，因此无需进行额外的设置。在开始菜单中可以找到服务的启动、停止控制。</p><p><img src="http://img.blog.csdn.net/20131227171128312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9famF2YV9fX0E=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="RabbitMQ服务启动、停止控制"></p><p>进入 RabbitMQ 安装目录下的 sbin 文件夹，在控制台下执行下述命令启用 RabbitMQ 的web管理工具，在浏览器中访问 <a href="http://localhost:15672/">http://localhost:15672/</a> 即可进行管理，默认 <strong>用户名 | 密码</strong> 是 <strong>guest | guest</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启用控制台"><a href="#启用控制台" class="headerlink" title="启用控制台"></a>启用控制台</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server ~]# rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@dev-server... started 6 plugins.</span><br></pre></td></tr></table></figure><p>在某些情况下，可能会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: The following plugins could not be found:</span><br><span class="line">  rabbitmq_management</span><br></pre></td></tr></table></figure><p>此时是因为rabbitmq查找插件的路径不正确所致。可按照如下方式解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/rabbitmq</span><br><span class="line">vi /etc/rabbitmq/rabbitmq-env.conf </span><br></pre></td></tr></table></figure><p>这个是 rabbitmq 环境变量的配置文件,这个文件的位置是确定和不能改变的，位于：**/etc/rabbitmq** 或 <strong>$RABBITMQ_HOME/etc/rabbitmq</strong> 目录下（视具体的安装方式而定）,具体可参考<a href="http://www.rabbitmq.com/configure.html%E3%80%82">http://www.rabbitmq.com/configure.html。</a></p><p>增加如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_MNESIA_BASE=/usr/local/rabbitmq/data</span><br><span class="line">RABBITMQ_LOG_BASE=/usr/local/rabbitmq/log</span><br><span class="line">RABBITMQ_PLUGINS_DIR=/usr/local/rabbitmq/plugins</span><br></pre></td></tr></table></figure><p>或者也可以在 <strong>sbin/rabbitmq-env</strong> 中增加。</p><p>重启rabbitmq，问题解决。</p><p>PS：rabbitmq 的标准配置文件是 <strong>rabbitmq.config</strong>,它既有默认的目录，也可以在 <strong>rabbitmq-env.conf</strong> 文件中配置。具体可参考<a href="http://www.rabbitmq.com/configure.html%E3%80%82">http://www.rabbitmq.com/configure.html。</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot和Vue单页面前后端分离项目的整合与构建</title>
      <link href="/2020/02/04/SpringBoot%E5%92%8CVue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E6%9E%84%E5%BB%BA/"/>
      <url>/2020/02/04/SpringBoot%E5%92%8CVue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>日常开发前后端分离应用时，通常会使用到Spring Boot开发后台服务，Vue.js开发前端SPA，而在部署时通常将后台服务和前端应用分开部署，使用nginx反向代理或者后台配置cors解决前后端的跨域问题。这样的方式在部署环节时稍显繁琐，本文介绍一种在构建环节直接将前端SPA直接打包进后台服务的jar包，只用部署jar包即可访问前端页面的方法。</p><span id="more"></span><p>以<a href="https://gitee.com/yupaits/ultimate-spider">ultimate-spider</a>为例说明该方法是如何实现将SPA打进后台服务jar包的。</p><p><strong>ultimate-spider</strong>是采用IDEA的project + modules的方式进行开发的，该项目有两个module：spider-server，后台服务；spider-web，前端SPA。以下是相关的pom.xml文件的内容。</p><ul><li>ultimate-spider的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Ultimate Spider Application<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spider-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spider-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spider-server的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spider-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>22.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy frontend content<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>src/main/resources/public<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.parent.basedir&#125;/spider-web/target/dist<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>static/<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spider-web的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spider-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frontend-maven-plugin.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">frontend-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;frontend-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v8.1.3<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm set registry<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>config set registry https://registry.npm.taobao.org<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm set non-strict ssl<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>config set strict-ssl false<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm run build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>run build<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方法的大致流程如下：</p><p>1）在ultimate-spider下执行<code>mvn clean install</code>；</p><p>2）spider-web使用<code>frontend-maven-plugin</code>插件进行构建并生成<code>target/dist</code>目录；</p><p>3）spider-server使用<code>spring-boot-maven-plugin</code>插件构建基于Spring Boot的可执行jar文件；</p><p>4）spider-server使用<code>maven-resources-plugin</code>插件将spider-web下的<code>target/dist</code>复制到<code>resources/public</code>，<code>resources/public</code>作为资源文件会被打进Spring Boot的可执行jar文件中；</p><p>5）执行基于Spring Boot的可执行jar之后，访问<code>/</code>会默认跳转到<code>public</code>目录下的<code>index.html</code>。</p><p>该方法的核心就在于基于maven构建的配置文件pom.xml，这里对pom.xml里的几个关键配置项进行说明。</p><ol><li><p>spider-web采用了maven的前端应用构建插件<code>frontend-maven-plugin</code>实现了基于npm的SPA项目的构建，这里是该插件的<a href="https://github.com/eirslett/frontend-maven-plugin">GitHub地址</a>。</p></li><li><p>ultimate-spider中<code>&lt;modules&gt;</code>标签中必须是前端SPA模块spider-web在前，后台服务模块spider-server在后。</p></li><li><p>在执行<code>npm run build</code>构建之前必须执行<code>npm install</code>下载依赖项。</p></li><li><p><code>maven-resources-plugin</code>注意配置<code>&lt;overwirte&gt;true&lt;/overwirte&gt;</code>，构建时覆盖掉之前的构建结果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String.format的用法</title>
      <link href="/2020/02/04/String-format%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/02/04/String-format%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自 <a href="http://www.open-open.com/lib/view/open1388316512922.html">Java中String.format的使用</a></p></blockquote><span id="more"></span><p>String类的format()方法用于创建格式化的字符串一级连接多个字符串对象。format()方法有两种重载形式。</p><ul><li><code>format(String format, Object... args)</code> 新字符串使用本地语言环境，根据字符串格式和参数生成格式化的新字符串。</li><li><code>format(Locale locale, String format, Object... args)</code> 使用制定的语言环境，根据字符串格式和参数生成格式化的字符串。</li></ul><h2 id="转换符"><a href="#转换符" class="headerlink" title="转换符"></a>转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td></tr><tr><td>%c</td><td>字符类型</td></tr><tr><td>%b</td><td>布尔类型</td></tr><tr><td>%d</td><td>十进制整数</td></tr><tr><td>%x</td><td>十六进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%f</td><td>浮点类型</td></tr><tr><td>%a</td><td>十六进制浮点类型</td></tr><tr><td>%e</td><td>指数类型</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td></tr><tr><td>%h</td><td>散列码</td></tr><tr><td>%%</td><td>百分号</td></tr><tr><td>%n</td><td>换行符</td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符）</td></tr></tbody></table><h2 id="搭配转换符的标志"><a href="#搭配转换符的标志" class="headerlink" title="搭配转换符的标志"></a>搭配转换符的标志</h2><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号</td></tr><tr><td>−</td><td>左对齐</td></tr><tr><td>0</td><td>数字前面补0</td></tr><tr><td>空格</td><td>在整数之前添加指定数量的空格</td></tr><tr><td>,</td><td>以“,”对数字分组</td></tr><tr><td>(</td><td>使用括号包含负数</td></tr><tr><td>#</td><td>如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td></tr><tr><td>&lt;</td><td>格式化前一个转换符所描述的参数</td></tr><tr><td>$</td><td>被格式化的参数索引</td></tr></tbody></table><h2 id="日期与时间转换符"><a href="#日期与时间转换符" class="headerlink" title="日期与时间转换符"></a>日期与时间转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td></tr><tr><td>F</td><td>“年-月-日”格式</td></tr><tr><td>D</td><td>“月/日/年”格式</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式（12时制）</td></tr><tr><td>T</td><td>“HH:MM:SS”格式（24时制）</td></tr><tr><td>R</td><td>“HH:MM”格式（24时制）</td></tr></tbody></table><h2 id="日期转换符"><a href="#日期转换符" class="headerlink" title="日期转换符"></a>日期转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>b或者h</td><td>月份简称</td></tr><tr><td>B</td><td>月份全称</td></tr><tr><td>a</td><td>星期的简称</td></tr><tr><td>A</td><td>星期的全称</td></tr><tr><td>C</td><td>年的前两位数字（不足两位前面补0）</td></tr><tr><td>y</td><td>年的后两位数字（不足两位前面补0）</td></tr><tr><td>Y</td><td>4位数字的年份（不足4位前面补0）</td></tr><tr><td>j</td><td>一年中的天数（即年的第几天）</td></tr><tr><td>m</td><td>两位数字的月份（不足两位前面补0）</td></tr><tr><td>d</td><td>两位数字的日（不足两位前面补0）</td></tr><tr><td>e</td><td>月份的日（前面不补0）</td></tr></tbody></table><h2 id="时间转换符"><a href="#时间转换符" class="headerlink" title="时间转换符"></a>时间转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>H</td><td>2位数字24时制的小时（不足2位前面补0）</td></tr><tr><td>I</td><td>2位数字12时制的小时（不足2位前面补0）</td></tr><tr><td>k</td><td>2位数字24时制的小时（前面不补0）</td></tr><tr><td>l</td><td>2位数字12时制的小时（前面不补0）</td></tr><tr><td>M</td><td>2位数字的分钟（不足2位前面补0）</td></tr><tr><td>S</td><td>2位数字的秒（不足2位前面补0）</td></tr><tr><td>L</td><td>3位数字的毫秒（不足3位前面补0）</td></tr><tr><td>N</td><td>9位数字的毫秒数（不足9位前面补0）</td></tr><tr><td>p</td><td>小写字母的上午或下午标记</td></tr><tr><td>z</td><td>相对于GMT的RFC822时区的偏移量</td></tr><tr><td>Z</td><td>时区缩写字符串</td></tr><tr><td>s</td><td>1970-1-1 00:00:00 到现在所经过的秒数</td></tr><tr><td>Q</td><td>1970-1-1 00:00:00 到现在所经过的毫秒数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Todo-Tomato技术解读</title>
      <link href="/2020/02/04/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/"/>
      <url>/2020/02/04/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>Todo-Tomato 是一款融合待办事项管理和番茄工作法，用于高效处理工作事务的工作利器，本文对 Todo-Tomato 使用的技术进行简要解读。</p><span id="more"></span><p>话不多说，先放上Todo-Tomato的界面截图。</p><p><img src="/images/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/Todo-Tomato%E7%95%8C%E9%9D%A2.png" alt="Todo-Tomato界面"></p><p>本文的技术解读基于<a href="https://gitee.com/yupaits/todo-tomato/tree/v1.0.0/">Todo-Tomato v1.0.0版本</a>。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>使用目前比较流行的前后端分离进行开发：</p><ul><li><p>前端技术栈：Vue.js + vue-router + vuex + axios + element-ui</p></li><li><p>后端技术栈：Spring Boot + Spring JPA + MySQL + druid + Redis</p></li><li><p>部署：阿里云ECS + Ubuntu16.04 + Nginx + OpenJDK8 + HTTPS</p></li></ul><p>由于使用的技术比较繁杂，这里选取一些个人觉得比较有记录价值的技术点进行说明。</p><h2 id="后端技术点"><a href="#后端技术点" class="headerlink" title="后端技术点"></a>后端技术点</h2><h3 id="Log4j2日志配置"><a href="#Log4j2日志配置" class="headerlink" title="Log4j2日志配置"></a>Log4j2日志配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Configuration:</span></span><br><span class="line">  <span class="attr">status:</span> <span class="string">warn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Properties:</span></span><br><span class="line">    <span class="attr">Property:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.console</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.com.yupaits.todotomato</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.base</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">/root/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">project.name</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">todo-tomato</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.pattern</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">&quot;%d - $&#123;project.name&#125; - %p [%t] [%C&#123;0&#125;:%M] - %c - %m%n&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Appenders:</span></span><br><span class="line">    <span class="attr">Console:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">CONSOLE</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">SYSTEM_OUT</span></span><br><span class="line">      <span class="attr">ThresholdFilter:</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">$&#123;sys:log.level.console&#125;</span></span><br><span class="line">        <span class="attr">onMatch:</span> <span class="string">ACCEPT</span></span><br><span class="line">        <span class="attr">onMismatch:</span> <span class="string">DENY</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">pattern:</span> <span class="string">$&#123;log.pattern&#125;</span></span><br><span class="line">    <span class="attr">RollingFile:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ROLLIING_FILE</span></span><br><span class="line">        <span class="attr">ignoreExceptions:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">fileName:</span> <span class="string">$&#123;log.base&#125;/$&#123;project.name&#125;.log</span></span><br><span class="line">        <span class="attr">filePattern:</span> <span class="string">&quot;$&#123;log.base&#125;/$&#123;project.name&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span></span><br><span class="line">        <span class="attr">PatternLayout:</span></span><br><span class="line">          <span class="attr">pattern:</span> <span class="string">$&#123;log.pattern&#125;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">          <span class="attr">TimeBasedTriggeringPolicy:</span></span><br><span class="line">            <span class="attr">interval:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">modulate:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">SizeBasedTriggeringPolicy:</span></span><br><span class="line">            <span class="attr">size:</span> <span class="string">&quot;10 MB&quot;</span></span><br><span class="line">        <span class="attr">DefaultRolloverStrategy:</span></span><br><span class="line">          <span class="attr">max:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Loggers:</span></span><br><span class="line">    <span class="attr">Root:</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">AppenderRef:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">CONSOLE</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ROLLIING_FILE</span></span><br><span class="line">    <span class="attr">Logger:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.com.yupaits.todotomato</span></span><br><span class="line">        <span class="attr">additivity:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">$&#123;sys:log.level.com.yupaits.todotomato&#125;</span></span><br><span class="line">        <span class="attr">AppenderRef:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">CONSOLE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ROLLIING_FILE</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>filePattern</code> 和 <code>PatternLayout.pattern</code> 配置，当存在 <code>%d</code>、<code>%i</code> 等日志专用变量地时候，yaml配置文件需要加上 “”，否则配置不会被正确读取。</p><h3 id="AuthorizationInterceptor鉴权拦截器"><a href="#AuthorizationInterceptor鉴权拦截器" class="headerlink" title="AuthorizationInterceptor鉴权拦截器"></a>AuthorizationInterceptor鉴权拦截器</h3><ul><li>WebConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> AuthorizationInterceptor(objectMapper)).addPathPatterns(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AuthorizationInterceptor.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">AuthorizationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationInterceptor</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Boolean authorized = (Boolean) httpServletRequest.getSession().getAttribute(Constants.AUTHORIZED_KEY);</span><br><span class="line">    <span class="keyword">boolean</span> hasAuth = authorized != <span class="keyword">null</span> &amp;&amp; authorized;</span><br><span class="line">    <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        httpServletResponse.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        objectMapper.writeValue(httpServletResponse.getWriter(), ResultCode.UNAUTHORIZED.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasAuth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BaseEntity-JPA实体类基类"><a href="#BaseEntity-JPA实体类基类" class="headerlink" title="BaseEntity JPA实体类基类"></a>BaseEntity JPA实体类基类</h3><ul><li>BaseEntity.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span>&lt;<span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> ID id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_at&quot;)</span></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date createAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_by&quot;)</span></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_modified_at&quot;)</span></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date lastModifiedAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_modified_by&quot;)</span></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="keyword">private</span> String lastModifiedBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    createAt = <span class="keyword">new</span> Date();</span><br><span class="line">    lastModifiedAt = createAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lastModifiedAt = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EntityAuditorAware.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityAuditorAware</span> <span class="keyword">implements</span> <span class="title">AuditorAware</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCurrentAuditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Constants.ADMINISTRATOR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Task.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tdtmt_task&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column( name = &quot;todo_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer todoId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;task_desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String taskDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;is_done&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean done = Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">boolean</span> withPk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isValid = ValidateUtils.validId(todoId) &amp;&amp; StringUtils.isNotBlank(taskDesc);</span><br><span class="line">    <span class="keyword">return</span> withPk ? ValidateUtils.validId(<span class="keyword">this</span>.getId()) &amp;&amp; isValid : isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端技术点"><a href="#前端技术点" class="headerlink" title="前端技术点"></a>前端技术点</h2><h3 id="axios自定义实例配置"><a href="#axios自定义实例配置" class="headerlink" title="axios自定义实例配置"></a>axios自定义实例配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Api = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://***.***.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Api.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res.data;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">    store.dispatch(<span class="string">&#x27;logout&#x27;</span>);</span><br><span class="line">    router.push(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Api</span><br></pre></td></tr></table></figure><h3 id="router-beforeEach路由钩子"><a href="#router-beforeEach路由钩子" class="headerlink" title="router.beforeEach路由钩子"></a>router.beforeEach路由钩子</h3><p>前端项目主观上只有两个界面，登录页和主页。因此在路由 <strong>beforeEach</strong> 钩子函数中的鉴权逻辑比较简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> hasAuth = store.getters.hasAuth;</span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">      next(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasAuth) &#123;</span><br><span class="line">      next(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局Api"><a href="#全局Api" class="headerlink" title="全局Api"></a>全局Api</h3><p>在 <code>main.js</code> 中加入如下代码，将自定义的axios实例 <strong>Api</strong> 注入到<strong>全局Vue</strong>对象中，之后在Vue组件中就可以使用 <code>this.Api.get()</code> 的方式进行http请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.Api = Api</span><br></pre></td></tr></table></figure><h2 id="部署技术点"><a href="#部署技术点" class="headerlink" title="部署技术点"></a>部署技术点</h2><h3 id="申请免费SSL证书用于站点HTTPS化"><a href="#申请免费SSL证书用于站点HTTPS化" class="headerlink" title="申请免费SSL证书用于站点HTTPS化"></a>申请免费SSL证书用于站点HTTPS化</h3><p><a href="https://letsencrypt.org/getting-started/">Let’s Encrypt</a> 提供了免费SSL证书的申请服务。推荐使用With Shell Access方式，使用命令行工具 <a href="https://certbot.eff.org/">Certbot</a> 申请证书。</p><p>完成证书申请之后，使用 <code>certbot renew --dry-run</code> 测试更新证书，可以正常更新的话，添加如下的 <strong>cron</strong> 任务定期更新证书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 每天3:00更新证书</span><br><span class="line">0 3 * * * certbot renew &gt;&gt; ~/cron/cert.log --renew-hook &quot;/usr/sbin/nginx -s reload&quot;</span><br></pre></td></tr></table></figure><p>使用 <code>--renew-hook</code> 才能保证使用的是最新的证书。</p><h3 id="Nginx-HTTPS反向代理"><a href="#Nginx-HTTPS反向代理" class="headerlink" title="Nginx HTTPS反向代理"></a>Nginx HTTPS反向代理</h3><p>Nginx配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    </span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line">  types_hash_max_size 2048;</span><br><span class="line">    </span><br><span class="line">  include /etc/nginx/mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">  access_log /var/log/nginx/access.log;</span><br><span class="line">  error_log /var/log/nginx/error.log;</span><br><span class="line">    </span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;;</span><br><span class="line">    </span><br><span class="line">  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">  include /etc/nginx/conf.d/*.conf;</span><br><span class="line">  include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name jenkins.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/jenkins.***.com-0001/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/jenkins.***.com-0001/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name rabbit.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/rabbit.***.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/rabbit.***.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:15672;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name todo-tomato.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/todo-tomato.***.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/todo-tomato.***.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    root /usr/share/todo-tomato;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /checkVisitCode &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /signOut &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置同时将服务器上的 <code>Jenkins</code> 和 <code>RabbitMQ</code> 也进行了HTTPS反向代理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code常用插件记录</title>
      <link href="/2020/02/04/VSCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/02/04/VSCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="语言包"><a href="#语言包" class="headerlink" title="语言包"></a>语言包</h2><ul><li>Chinese (Simplified) Language Pack for Visual Studio Code</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>Smile Theme</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>IntelliJ IDEA Keybindings</li></ul><h2 id="Project-Manage"><a href="#Project-Manage" class="headerlink" title="Project Manage"></a>Project Manage</h2><ul><li>Project Manager</li><li>Todo Tree</li></ul><h2 id="HTML-CSS-JS"><a href="#HTML-CSS-JS" class="headerlink" title="HTML CSS JS"></a>HTML CSS JS</h2><ul><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Beautify</li><li>HTML CSS Support</li><li>Path Autocomplete</li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li>npm</li></ul><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ul><li>Vetur</li><li>Ant Design Vue helper</li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li>Markdown PDF</li><li>Markdown TOC</li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>GitLens</li><li>Git History</li><li>Git Graph</li></ul><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul><li>Go</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li>Python</li></ul><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul><li>Flutter</li><li>Dart</li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li>Docker</li></ul><h2 id="远程工具"><a href="#远程工具" class="headerlink" title="远程工具"></a>远程工具</h2><ul><li>Remote - WSL</li></ul><h2 id="Properties-File"><a href="#Properties-File" class="headerlink" title="Properties File"></a>Properties File</h2><ul><li>Better TOML</li><li>YAML</li></ul><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><ul><li>FreeMarker</li></ul><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><ul><li>Bracket Pair Colorizer</li><li>Highlight Matching Tag</li><li>TODO Highlight</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron语法简单总结</title>
      <link href="/2020/02/04/cron%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/04/cron%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://chinaxxren.iteye.com/blog/839630">cron 表达式的格式</a></p><p>Quartz cron 表达式的格式十分类似于 UNIX cron 格式，但还是有少许明显的区别。区别之一就是 Quartz 的格式向下支持到秒级别的计划，而 UNIX cron 计划仅支持至分钟级。许多我们的触发计划要基于秒级递增的(例如，每45秒)，因此这是一个非常好的差异。</p><span id="more"></span><p>在 UNIX cron 里，要执行的作业（或者说命令）是存放在 cron 表达式中的，在第六个域位置上。Quartz 用 cron 表达式存放执行计划。引用了 cron 表达式的CronTrigger 在计划的时间里会与 job 关联上。</p><p>另一个与 UNIX cron 表达式的不同点是在表达式中支持域的数目。UNIX 给出五个域(分、时、日、月和周)，Quartz 提供七个域。表 5.1 列出了 Quartz cron 表达式支持的七个域。</p><table><thead><tr><th align="center">名称</th><th align="center">是否必须</th><th align="center">允许值</th><th align="center">特殊字符</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">是</td><td align="center">0-59</td><td align="center">,-*/</td></tr><tr><td align="center">分</td><td align="center">是</td><td align="center">0-59</td><td align="center">,-*/</td></tr><tr><td align="center">时</td><td align="center">是</td><td align="center">0-23</td><td align="center">,-*/</td></tr><tr><td align="center">日</td><td align="center">是</td><td align="center">1-31</td><td align="center">,-*?/L W C</td></tr><tr><td align="center">月</td><td align="center">是</td><td align="center">1-12 或 JAN-DEC</td><td align="center">,-*/</td></tr><tr><td align="center">周</td><td align="center">是</td><td align="center">1-7 或 SUN-SAT</td><td align="center">,-*?/L C #</td></tr><tr><td align="center">年</td><td align="center">否</td><td align="center">空 或 1970-2099</td><td align="center">,-*/</td></tr></tbody></table><p>月份和星期的名称是不区分大小写的。FRI 和 fri 是一样的。</p><p>域之间有空格分隔，这和 UNIX cron 一样。无可争辩的，我们能写的最简单的表达式看起来就是这个了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * ? * *</span><br></pre></td></tr></table></figure><p>这个表达会每秒钟(每分种的、每小时的、每天的)激发一个部署的 job。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>同 UNIX cron 一样，Quartz cron 表达式支持用特殊字符来创建更为复杂的执行计划。然而，Quartz 在特殊字符的支持上比标准 UNIX cron 表达式更丰富了。</p><h3 id="星号"><a href="#星号" class="headerlink" title="* 星号"></a>* 星号</h3><p>使用星号(*) 指示着你想在这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发这个 trigger。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * 17 * * ?</span><br></pre></td></tr></table></figure><p>意义：每天从下午5点到下午5:59中的每分钟激发一次 trigger。它停在下午 5:59 是因为值 17 在小时域上，在下午 6 点时，小时变为 18 了，也就不再理会这个 trigger，直到下一天的下午5点。</p><p>在你希望 trigger 在该域的所有有效值上被激发时使用 * 字符。</p><h3 id="问号"><a href="#问号" class="headerlink" title="? 问号"></a>? 问号</h3><p>? 号只能用在日和周域上，但是不能在这两个域上同时使用。你可以认为? 字符是 “我并不关心在该域上是什么值。” 这不同于星号，星号是指示着该域上的每一个值。? 是说不为该域指定值。</p><p>不能同时这两个域上指定值的理由是难以解释甚至是难以理解的。基本上，假定同时指定值的话，意义就会变得含混不清了：考虑一下，如果一个表达式在日域上有值11，同时在周域上指定了WED。那么是要 trigger 仅在每个月的11号，且正好又是星期三那天被激发？还是在每个星期三的11号被激发呢？要去除这种不明确性的办法就是不能同时在这两个域上指定值。</p><p>只要记住，假如你为这两域的其中一个指定了值，那就必须在另一个字值上放一个 ?。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10,44 14 ? 3 WEB</span><br></pre></td></tr></table></figure><p>意义：在三月中的每个星期三的下午 2:10 和 下午 2:44 被触发。</p><h3 id="逗号"><a href="#逗号" class="headerlink" title=", 逗号"></a>, 逗号</h3><p>逗号 (,) 是用来在给某个域上指定一个值列表的。例如，使用值 0,15,30,45 在秒域上意味着每15秒触发一个 trigger。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0,15,30,45 * * * ?</span><br></pre></td></tr></table></figure><p>意义：每刻钟触发一次 trigger。</p><h3 id="斜杠"><a href="#斜杠" class="headerlink" title="/ 斜杠"></a>/ 斜杠</h3><p>斜杠 (/) 是用于时间表的递增的。我们刚刚用了逗号来表示每15分钟的递增，但是我们也能写成这样0/15。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0/15 0/30 * * * ?</span><br></pre></td></tr></table></figure><p>意义：在整点和半点时每15秒触发 trigger。</p><h3 id="中划线"><a href="#中划线" class="headerlink" title="- 中划线"></a>- 中划线</h3><p>中划线 (-) 用于指定一个范围。例如，在小时域上的 3-8 意味着 “3,4,5,6,7 和 8 点。” 域的值不允许回卷，所以像 50-10 这样的值是不允许的。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 45 3-8 ? * *</span><br></pre></td></tr></table></figure><p>意义：在上午的3点至上午的8点的45分时触发 trigger。</p><h3 id="L-字母"><a href="#L-字母" class="headerlink" title="L 字母"></a>L 字母</h3><p>L 说明了某域上允许的最后一个值。它仅被日和周域支持。当用在日域上，表示的是在月域上指定的月份的最后一天。例如，当月域上指定了JAN 时，在日域上的L 会促使 trigger 在1月31号被触发。假如月域上是SEP，那么 L 会预示着在9月30号触发。换句话说，就是不管指定了哪个月，都是在相应月份的时最后一天触发 trigger。</p><p>表达式 <code>0 0 8 L * ?</code> 意义是在每个月最后一天的上午 8:00 触发 trigger。在月域上的 * 说明是 “每个月”。</p><p>当 L 字母用于周域上，指示着周的最后一天，就是星期六 (或者数字7)。所以如果你需要在每个月的最后一个星期六下午的 11:59 触发 trigger，你可以用这样的表达式0 59 23 ? * L。</p><p>当使用于周域上，你可以用一个数字与 L 连起来表示月份的最后一个星期 X。例如，表达式 <code>0 0 12 ? * 2L</code> 说的是在每个月的最后一个星期一触发 trigger。</p><blockquote><p>不要让范围和列表值与 L 连用，虽然你能用星期数(1-7)与 L 连用，但是不允许你用一个范围值和列表值与 L 连用。这会产生不可预知的结果。</p></blockquote><h3 id="W-字母"><a href="#W-字母" class="headerlink" title="W 字母"></a>W 字母</h3><p>W 字符代表着平日 (Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。例如，日域中的15W 意味着 “离该月15号的最近一个平日。” 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一（这个例子中是17号）离15号更近。（译者Unmi注：不会在17号触发的，如果是15W，可能会是在14号(15号是星期六)或者15号(15号是星期天)触发，也就是只能出现在邻近的一天，如果15号当天为平日直接就会当日执行）。W 只能用在指定的日域为单天，不能是范围或列表值。</p><h3 id="井号"><a href="#井号" class="headerlink" title="# 井号"></a># 井号</h3><p># 字符仅能用于周域中。它用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。另一个例子2#1 意思是某月的第一个星期一 (2=星期一，#1意味着月份中的第一周)。注意，假如你指定#5，然而月份中没有第 5 周，那么该月不会触发。</p><p>此处的 Cron 表达式 cookbook 旨在为常用的执行需求提供方案。尽管不可能列举出所有的表达式，但下面的应该为满足你的业务需求提供了足够的例子。</p><h2 id="分钟的-Cron-表达式"><a href="#分钟的-Cron-表达式" class="headerlink" title="分钟的 Cron 表达式"></a>分钟的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>每天的从 5:00 PM 至 5:59 PM 中的每分钟触发</td><td>0 * 17 * * ?</td></tr><tr><td>每天的从 11:00 PM 至 11:55 PM 中的每五分钟触发</td><td>0 0/5 23 * * ?</td></tr><tr><td>每天的从 3:00 至 3:55 PM 和 6:00 PM 至 6:55 PM 之中的每五分钟触发</td><td>0 0/5 15,18 * * ?</td></tr><tr><td>每天的从 5:00 AM 至 5:05 AM 中的每分钟触发</td><td>0 0-5 5 * * ?</td></tr></tbody></table><h2 id="日-的-Cron-表达式"><a href="#日-的-Cron-表达式" class="headerlink" title="日 的 Cron 表达式"></a>日 的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>每天的 3:00 AM</td><td>0 0 3 * * ?</td></tr><tr><td>每天的 3:00 AM (另一种写法)</td><td>0 0 3 ? * *</td></tr><tr><td>每天的 12:00 PM (中午)</td><td>0 0 12 * * ?</td></tr><tr><td>在 2005 中每天的 10:15 AM</td><td>0 15 10 * * ? 2005</td></tr></tbody></table><h2 id="周和月的-Cron-表达式"><a href="#周和月的-Cron-表达式" class="headerlink" title="周和月的 Cron 表达式"></a>周和月的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>在每个周一,二, 三和周四的 10:15 AM</td><td>0 15 10 ? * MON-FRI</td></tr><tr><td>每月15号的 10:15 AM</td><td>0 15 10 15 * ?</td></tr><tr><td>每月最后一天的 10:15 AM</td><td>0 15 10 L * ?</td></tr><tr><td>每月最后一个周五的 10:15 AM</td><td>0 15 10 ? * 6L</td></tr><tr><td>在 2002, 2003, 2004, 和 2005 年中的每月最后一个周五的 10:15 AM</td><td>0 15 10 ? * 6L 2002-2005</td></tr><tr><td>每月第三个周五的 10:15 AM</td><td>0 15 10 ? * 6#3</td></tr><tr><td>每月从第一天算起每五天的 12:00 PM (中午)</td><td>0 0 12 1/5 * ?</td></tr><tr><td>每一个 11 月 11 号的 11:11 AM</td><td>0 11 11 11 11 ?</td></tr><tr><td>三月份每个周三的 2:10 PM 和 2:44 PM</td><td>0 10,44 14 ? 3 WED</td></tr></tbody></table><h2 id="创建一个即刻触发的-Trigger"><a href="#创建一个即刻触发的-Trigger" class="headerlink" title="创建一个即刻触发的 Trigger"></a>创建一个即刻触发的 Trigger</h2><p>有时候，你需要立即执行一个 job。例如，想像一下，你正在构建一个 GUI 程序并允许用户能立刻执行。另一个例子，你或许已经检测到了某个 Job 未执行成功，因此你想要即刻重跑一次。在 Quartz 1.5，有几个方法被加入到了TriggerUtils 类中，使得实现那些事很容易了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/02/04/designpattern-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>为其它对象提供一种代理以控制对这个对象的访问。</p><p><strong>类结构图</strong></p><p><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/proxy.png" alt="proxy"></p><p>Subject：接口类，定义了一些需要代理的接口方法。</p><p>RealSubject：具体的实现类。</p><p>ProxySubject：代理类，保存一个Subject引用，可以注入一个具体的子类比如RealSubject。</p><p>代理模式其实就是在操作对象时引用一定程度的间接性。这种间接性，可以增加很多附加操作。比如权限控制，参数校验等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPersonManager</span> <span class="keyword">implements</span> <span class="title">PersonManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接口引用</span></span><br><span class="line">    PersonManager realPersonManager = <span class="keyword">new</span> RealPersonManager();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">(String name, String operateName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 增加一些的权限判断。比如操作人是否有查询某人工资的权限</span></span><br><span class="line">        <span class="comment">// 2. 具体类的调用</span></span><br><span class="line">        <span class="keyword">return</span> realPersonManager.getSalary(name, operateName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/02/04/designpattern-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h2 id="双重锁检测"><a href="#双重锁检测" class="headerlink" title="双重锁检测"></a>双重锁检测</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (install == <span class="keyword">null</span>) &#123;                      <span class="comment">// 双重检测机制</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;        <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;             <span class="comment">// 双重检测机制</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为了防止new Singleton被执行多次，因此在new操作之前加上Synchronized 同步锁，锁住整个类（注意，这里不能使用对象锁）。</p></li><li><p>进入Synchronized 临界区以后，还要再做一次判空。因为当两个线程同时访问的时候，线程A构建完对象，线程B也已经通过了最初的判空验证，不做第二次判空的话，线程B还是会再次构建instance对象。</p></li><li><p>经过volatile的修饰，当线程A执行instance = new Singleton的时候，JVM执行顺序是什么样？始终保证是下面的顺序：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();     <span class="comment">//1：分配对象的内存空间 </span></span><br><span class="line">ctorInstance(memory);   <span class="comment">//2：初始化对象 </span></span><br><span class="line">instance =memory;       <span class="comment">//3：设置instance指向刚分配的内存地址 </span></span><br></pre></td></tr></table></figure><p>  如此在线程B看来，instance对象的引用要么指向null，要么指向一个初始化完毕的Instance，而不会出现某个中间态，保证了安全。</p></li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>从外部无法访问静态内部类LazyHolder，只有当调用Singleton.getInstance方法的时候，才能得到单例对象INSTANCE。</p></li><li><p>INSTANCE对象初始化的时机并不是在单例类Singleton被加载的时候，而是在调用getInstance方法，使得静态内部类LazyHolder被加载的时候。因此这种实现方式是利用classloader的加载机制来实现懒加载，并保证构建单例的线程安全。</p></li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>单例模式实现</th><th>是否线程安全</th><th>是否懒加载</th><th>是否防止反射构建</th></tr></thead><tbody><tr><td>双重锁检测</td><td>是</td><td>是</td><td>否</td></tr><tr><td>静态内部类</td><td>是</td><td>是</td><td>否</td></tr><tr><td>枚举</td><td>是</td><td>否</td><td>是</td></tr></tbody></table><p><strong>参考资料：</strong></p><p><a href="https://mp.weixin.qq.com/s/1fQkkdtzYh_OikbYJnmZWg">漫画：什么是单例模式？（整合版）</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合成模式</title>
      <link href="/2020/02/04/designpattern-%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>合成模式属于对象的结构模式，有时又叫做“部分-整体”模式。合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式可以使客户端将单纯元素与复合元素同等看待。</p><p><strong>结构类图</strong></p><p><img src="/images/%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/composite.gif" alt="composite"></p><p>Component：这是一个抽象角色，它给参与组合的对象规定一个接口。这个角色给出共有接口及其默认行为，可以用来管理所有的子对象。合成对象通常把它所包含的子对象当作类型为Component的对象。在安全模式的合成模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝构件对象给出。</p><p>Leaf：代表餐价组合的树叶对象。一个树叶对象没有下级子对象，定义了参加组合的原始对象的行为。</p><p>Composite：代表参加组合的有子对象的对象，并给出树枝构件对象的行为。树枝构件给出了所有的管理子对象的方法，如add、remove以及getChild。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/02/04/designpattern-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>类图</strong></p><p><img src="/images/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/factory.jpg" alt="factory"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2020/02/04/designpattern-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>应用场景很多，尤其是在框架设计中，提供了一个方便的开发程序的模板，你只要实现模板中的一些接口或者方法就能完成一个复杂的任务。</p><p><strong>结构类图</strong></p><p><img src="/images/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/template-method.png" alt="template-method"></p><p>AbstractTemplate：定义一个完整的框架，方法的调用顺序已经确定，但会定义一些抽象的方法留给子类去实现。</p><p>SubTemplate：实现抽象模板中定义的抽象方法，从而形成一个完整的流程逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TradeFlowActionResult <span class="title">execute</span><span class="params">(TradeFlowActionParam param, Map context)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;    <span class="comment">// 业务逻辑校验</span></span><br><span class="line">        <span class="keyword">this</span>.validateBusinessLogic(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;validateBusinessLogic got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;validateBusinessLogic got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 卖家发货业务逻辑</span></span><br><span class="line">        <span class="keyword">this</span>.sendGoods(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;sendGoods got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;sendGoods got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 补充业务（结果不影响核心业务）</span></span><br><span class="line">        <span class="keyword">this</span>.addition(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;addition got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;addition got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到的三个抽象方法（业务逻辑校验、卖家发货业务逻辑、补充业务）都是在子类中实现的。</p><p>使用模板方法模式既控制了主流程结构，又不失灵活性，可以让使用者在其基础上定制开发。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/02/04/designpattern-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>策略模式通常是指完成某个操作可能会有多种方法，适用于多种场合。我们需要把每个操作方法当作一个实现策略，调用者可根据需要（特定的规则）选择合适的策略。</p><p><strong>结构类图</strong></p><p><img src="/images/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy.png" alt="strategy"></p><p>Context：使用不同的策略环境，根据自身的条件选择不同的策略实现类来完成所需要的操作。它持有一个策略实例的引用。</p><p>Strategy：抽象策略，定义每个策略都要实现的方法。</p><p>Realize1，Realize2：负责实现抽象策略中定义的策略方法。</p><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Enhancement(&#123;@Capability(type = CapabilityTypeEnum.INVOCATION_STATS)&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendGoods</span><span class="params">(SendGoodsParam param)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (param == <span class="keyword">null</span> || param.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.throwInValidError(ErrorCodeEnum.NULL_PARAM, <span class="keyword">null</span>, param);</span><br><span class="line">    &#125;</span><br><span class="line">    TradeFlowService tfs = createTradeFlowServiceByOrderId(param.getId());</span><br><span class="line">    tfs.sendGoods(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createTradeFlowServiceByOrderId</code>方法会根据“订单号的长短”选择具体的子策略。</p><ul><li>长订单号：tpTradeFlowService</li><li>短订单号：unifyTradeFlowService</li></ul><p>彼此子策略实现互不干扰，有效达到隔离效果。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/2020/02/04/designpattern-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>装饰者模式，在保持原有功能不变的情况下将一个类重新装饰，使其具有更强大的功能，用一句成语形容“锦上添花”。</p><p><strong>类结构：</strong></p><p><img src="/images/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/decorator.png" alt="decorator"></p><p>Component：抽象组件，定义了一组抽象的接口，制定了被修饰的组件都有哪些功能。</p><p>ComponentImpl：抽象组件实现类，完成了基本的功能实现。</p><p>Decorator：装饰器角色，持有Component的实例引用，有点递归的感觉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Component c = <span class="keyword">new</span> ComponentImpl();</span><br><span class="line">Decorator d1 = <span class="keyword">new</span> Decorator();</span><br><span class="line">d1.setComponent(c);</span><br><span class="line">Decorator d2 = <span class="keyword">new</span> Decorator();</span><br><span class="line">d2.setComponent(d1);</span><br><span class="line">Decorator d3 = <span class="keyword">new</span> Decorator();</span><br><span class="line">d3.setComponent(d2);</span><br><span class="line">Decorator d4 = <span class="keyword">new</span> Decorator();</span><br><span class="line">d4.setComponent(d3);</span><br><span class="line">d4.methodA();</span><br></pre></td></tr></table></figure><p>装饰模式和适配器模式有点类似，都是包装（wrapper）了一个类，但目的却不相同。适配器模式是将一个接口转换成另一个接口，从而达成匹配。而装饰模式并没有改变原来的接口，而是改变原有对象的处理方法，借助递归提升性能。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2020/02/04/designpattern-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式通常也叫 <strong>发布-订阅</strong> 模式，或者事件监听模式，定义一对多的依赖关系，让多个观察者对象同时监听一个主题对象，如果这个主体对象的状态发生变化时，会通知所有的观察者对象。异步消息（MQ、ActiveMQ）都是基于这种模式。</p><p><strong>类结构</strong></p><p><img src="/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/observer.png" alt="observer"></p><p>Subject：主题类，将所有的观察者对象保存在一个List集合中，并提供增、删方法，以及状态变化后的通知方法。</p><p>Observer：观察者的抽象接口，提供了一个抽象的动作方法，具体的业务由子类来实现。</p><p>ConcreteObserver：具体的观察者，负责实现自己的业务动作。</p><p>ConcreteSubject：具体的主题类，在内部状态发生变化时，给所有登记过的观察者发出通知。</p><p><strong>优点</strong></p><ul><li><p>解耦，将耦合的双方都依赖于抽象类，而不是依赖于具体。从而使得各自的变化不会影响到另一边的变化。</p></li><li><p>Observer采用的是抽象类，这样的好处是可以将多个子类相同的代码逻辑抽取出来，放到抽象类中。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2020/02/04/designpattern-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>责任链模式就是很多对象由每个对象对其下家的引用串联起来形成一条链，请求在这条链上传递，知道最终处理完。就像一根水管一样，水从一端流入，会经过一系列的阀门，最终从另一端流出。如果有一个阀门关着，水就流不出来。</p><p><strong>链上的节点可以控制，根据是否执行分为两种情况：</strong></p><ul><li>找到对应的点，执行，跳出。如：for循环的break。</li><li>所有的节点都执行一遍，上个节点的返回结果作为下个节点的入参。</li></ul><p><strong>业务需求：抽奖</strong></p><p>步骤：</p><ul><li><p>抽奖资格判断    </p><ol><li>判断人群    </li><li>判断抽奖限制（如每天只能抽3次）    </li><li>黑名单    </li><li>判断中奖次数限制（如最多只能中3次）    。。。。。。。。</li></ol></li><li><p>中奖逻辑    </p><ol><li>根据用户V等级进行概率过滤    </li><li>根据抽奖概率进行过滤</li></ol></li><li><p>发奖逻辑    </p><ol><li>取出当前奖品分布，并选出一个奖品分布来发奖    </li><li>减库存    </li><li>发奖    </li><li>发奖成功后的逻辑处理    </li><li>处理其它processor中添加的callback</li></ol></li></ul><p>代码示例 ：</p><ol><li>主流程：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAwardCommanderProcedure</span> <span class="keyword">implements</span> <span class="title">AwardCommanderProcdure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Commander&gt; commanderList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AwardResult <span class="title">execute</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getCommanderList() == <span class="keyword">null</span> || getCommanderList().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AwardResultUtils.buildErrorResult(DefaultResultCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Commander commander : getCommanderList()) &#123;</span><br><span class="line">            AwardResult result = commander.execute(context);</span><br><span class="line">            <span class="keyword">if</span>(!result.isSuccess()) &#123;</span><br><span class="line">                AwardLogUtils.getAwardLog().warn(<span class="string">&quot;DefaultAwardCommanderProcedure.execute() return false|context=&quot;</span> + context + <span class="string">&quot;|awardResult=[&quot;</span> + result + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        AwardLogUtils.getAwardLog().warn(<span class="string">&quot;DefaultAwardCommanderProcedure.execute() return success|context=[&quot;</span> + context + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> AwardResultUtils.buildSuccessResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Commander&gt; <span class="title">getCommanderList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commanderList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommanderList</span><span class="params">(List&lt;Commander&gt; commanderList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commanderList = commanderList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主流程bean xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认抽奖流程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultAwardCommanderProcedure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.wireless.award.biz.forward.biz.procedure.impl.DefaultAwardCommanderProcedure&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;commanderList&quot;</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>                 </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;permissionCommander&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 抽奖逻辑 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;winCommander&quot;</span> /&gt;</span>         <span class="comment">&lt;!-- 中奖逻辑 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dispatchCommander&quot;</span> /&gt;</span>    <span class="comment">&lt;!-- 发奖逻辑 --&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>抽奖逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultCommander</span> <span class="keyword">implements</span> <span class="title">Commander</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> List&lt;Processor&gt; processorList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AwardResult <span class="title">execute</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getProcessorList() == <span class="keyword">null</span> || getProcessorList().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AwardResultUtils.buildErrorResult(DefaultResultCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Processor processor : getProcessorList()) &#123;</span><br><span class="line">            AwardResult result = processor.process(context);</span><br><span class="line">            <span class="keyword">if</span>(!result.isSuccess()) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> AwardResultUtils.buildSuccessResult();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Processor&gt; <span class="title">getProcessorList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processorList;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessorList</span><span class="params">(List&lt;Processor&gt; processorList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processorList = processorList;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、判断抽奖资格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;permissionCommander&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.wireless.award.biz.forward.biz.commander.impl.PermissionCommander&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorList&quot;</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkUserGroupProcessor&quot;</span> /&gt;</span>                  <span class="comment">&lt;!-- 判断人群 --&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;awardCountingProcessor&quot;</span> /&gt;</span>                   <span class="comment">&lt;!-- 活动抽奖数计数 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkAndReducePermitPermissionProcessor&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 判断是否有抽奖权限，有则减权限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkBlacklistPermissionProcessor&quot;</span> /&gt;</span>        <span class="comment">&lt;!-- 黑名单 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkWinCountPermissionProcessor&quot;</span> /&gt;</span>         <span class="comment">&lt;!-- 判断中奖次数限制（如最多只能中3次） --&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>         </span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>具体的原子执行逻辑</li></ol><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 处理逻辑 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AwardResult <span class="title">process</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类则根据具体的业务功能单独封装实现。</p><p><strong>总结</strong></p><ol><li>串行执行所有的逻辑，如果有一个条件不满足或抛异常，则返回false，跳出流程</li><li>扩展性好，能很好地满足各种业务变更，只需要实现相应的接口，增加相应的xml配置即可</li><li>直观，将日志统一放到一个日志类管理</li><li>定义上下文参数类Context，扩展参数强</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2020/02/04/designpattern-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/designpattern-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适配器模式就是一个类的接口不能被客户端接受，需要转换成另一种接口，从而使两个不匹配的接口能在一起工作。</p><p><strong>类结构</strong></p><p><img src="/images/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/adapter.png" alt="adapter"></p><p>Adaptee：源接口，需要适配的接口。</p><p>Target：目标接口，暴露出去的接口。</p><p>Adapter：适配器，将源接口适配成目标接口。</p><p>举个例子：</p><p>Adaptee是内存卡，Target是电脑，而Adapter则是USB读卡器。</p><p><strong>适用场景</strong></p><p>比如查物流信息，由于物流公司的系统都是各自独立，而编程语言和交互方式上有很大差异，需要针对不同的物流公司做单独适配，同时结合不同公司的系统性能，配置不同的响应超时时间。</p><p><img src="/images/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/adapter-logistics.png" alt="adapter-logistics"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flatten-maven-plugin插件配置说明</title>
      <link href="/2020/02/04/flatten-maven-plugin%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/02/04/flatten-maven-plugin%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自：<a href="https://my.oschina.net/liyuj/blog/874929">使用flatten-maven-plugin对发布的POM进行精简</a></p></blockquote><p>使用maven开发的模块化应用，可以发布出去供他人使用，比如各种开源库，使用时，要么是继承，要么是以依赖的形式引入。但我们看各种库的pom.xml文件，通常都比较简单，一般只有一些必要的依赖信息，作为开发者，通常认为使用者也就需要这些信息。但是真正开发时，对应模块的pom可能比较复杂，可能要使用各种插件，引用各种依赖，组件间有继承关系，甚至根据不同的参数走不同的分支，即使用profile机制等，maven默认在部署时，会保留对应模块中的pom的所有信息，不会做改动。这样就给模块的发布带来了一定的麻烦，如果直接发布这样的pom.xml，是可能给使用者造成干扰的，出了问题又很难进行定位。</p><p>解决这个问题有很多的做法，比如构建两个工程，一个用于开发，一个用于版本发布，两个工程的pom是不同的，这样看上去也更符合软件开发的常规流程，另外，也可以考虑禁用maven默认的deloy过程，然后直接调用 <code>deploy:deploy-file</code> 单独部署某个文件。总之，不管怎样，办法肯定是有的。</p><p>而本文的目的，是想介绍一种新的方式，来优雅地解决这个问题，也许实际开发中并不需要这样做。</p><span id="more"></span><p>具体做法是，使用社区专门针对这个问题开发的插件，即Maven Flatten Plugin，这个插件使用起来非常简单，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flatten-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个插件的作用是，生成一个压缩版的pom.xml文件，然后在install和deploy阶段使用压缩后的pom.xml文件，替换原来的pom.xml文件，具体压缩策略如下：</p><ul><li>和构建有关的元素会被删除；</li><li>和开发有关的元素默认会被删除；</li><li>只包含构件的使用者必须的一些信息；</li><li>变量会被解析；</li><li>上级关系会被解析，然后被压缩删除；</li><li>构建时实际使用的profile会被评估，视情况处理；</li><li>由JDK或者OS驱动的profile会被保留，需要时可以动态地控制依赖。</li></ul><p>在默认的压缩逻辑下，插件如何处理各种元素，可以看这里。 下面会重点介绍如何通过各种参数来控制压缩的过程：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>embedBuildProfileDependencies</td><td>Boolean</td><td>由OS或者JDK的不同而触发的profile，可能根据环境的不同而产生不同的依赖，但是由属性等触发的profile，就不确定了，如果属性设置为true，profile中的依赖会直接写入生成的pom中，如果设置为false，所有的profile信息都会保留,默认是false。</td></tr><tr><td>flattenMode</td><td>FlattenMode</td><td>插件预定义了若干种压缩模式，下面会详述。</td></tr><tr><td>flattenedPomFilename</td><td>String</td><td>生成的压缩后的<code>pom.xml</code>文件的文件名，默认为<code>.flattened-pom.xml</code>。</td></tr><tr><td>outputDirectory</td><td>File</td><td>生成的压缩后的<code>pom.xml</code>文件的存放位置，默认为<code>$&#123;project.basedir&#125;</code>。</td></tr><tr><td>pomElements</td><td>FlattenDescriptor</td><td>该元素定义了如何处理额外的元素，如果可能，尽量使用<code>flattenMode</code>，这个元素仅仅用于进一步提高灵活性，它可以控制具体的某个元素是保留还是删除，比如要指定删除repositories，可以这样：<code>&lt;pomElements&gt;&lt;repositories&gt;flatten&lt;/repositories&gt;&lt;/pomElements&gt;</code>。</td></tr><tr><td>updatePomFile</td><td>Boolean</td><td>插件默认只会处理packaging属性为非pom的，如果要处理packaging为pom的，可将本属性值设置为true。</td></tr></tbody></table><p>插件预定义了若干种模式，可以满足若干种常见的场景，这些模式定义在org.codehaus.mojo.flatten.FlattenMode枚举中，具体可以看代码，本文简单描述如下：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>minimum</td><td>不推荐使用，会展开<code>pluginRepositories</code>。</td></tr><tr><td>bom</td><td>会保留<code>dependencyManagement</code>，展开<code>properties</code>。</td></tr><tr><td>oss</td><td>推荐开源项目使用，会展开<code>ciManagement</code>、<code>contributors</code>、<code>distributionManagement</code>、<code>inceptionYear</code>、<code>issueManagement</code>、<code>mailingLists</code>、<code>organization</code>、<code>prerequisites</code></td></tr><tr><td>ossrh</td><td>会展开<code>name</code>、<code>description</code>、<code>url</code>、<code>scm</code>、<code>developers</code></td></tr><tr><td>defaults</td><td>会展开<code>repositories</code></td></tr><tr><td>clean</td><td>删除全部可选元素</td></tr></tbody></table><p>具体可以看<a href="https://www.mojohaus.org/flatten-maven-plugin/apidocs/index.html">FlattenMode的javadoc</a>。</p><table><thead><tr><th>pomElement处理方式</th><th>描述</th></tr></thead><tbody><tr><td>expand</td><td>Take the element from the effective POM.</td></tr><tr><td>flatten</td><td>Flatten the element.</td></tr><tr><td>interpolate</td><td>Take the element from the interpolated POM (original POM with variables interpolated).</td></tr><tr><td>keep</td><td>Take the element untouched from the original POM.</td></tr><tr><td>remove</td><td>Remove the element entirely so it will not be present in flattened POM.</td></tr><tr><td>resolve</td><td>Take the element from the resolved POM.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weixin-java-tools微信JavaSDK开发工具包</title>
      <link href="/2020/02/04/weixin-java-tools%E5%BE%AE%E4%BF%A1JavaSDK%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
      <url>/2020/02/04/weixin-java-tools%E5%BE%AE%E4%BF%A1JavaSDK%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://github.com/Wechat-Group/weixin-java-tools/wiki">微信Java SDK开发文档</a></p><p><a href="https://github.com/Wechat-Group/weixin-java-tools">weixin-java-tools</a> 是一款开源的微信 Java SDK 工具，对微信接口封装的比较全，简单配置即可使用，正式版的更新频率是两个月，是 Java 开发微信项目的利器。此文主要介绍使用过程中遇到的的一些 wiki 中没有详细介绍的地方。</p><span id="more"></span><h2 id="CP-如何调用未支持的接口"><a href="#CP-如何调用未支持的接口" class="headerlink" title="CP_如何调用未支持的接口"></a>CP_如何调用未支持的接口</h2><blockquote><p><a href="https://github.com/wechat-group/weixin-java-tools/wiki/CP_%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E6%9C%AA%E6%94%AF%E6%8C%81%E7%9A%84%E6%8E%A5%E5%8F%A3">CP_如何调用未支持的接口</a></p></blockquote><p>使用 <code>wxCpService.get(url, queryParam)</code> 和 <code>wxCpService.post(url, postData)</code> 方法时 url 和 queryParam 不用附带 accessToken 参数，因为该参数在实际调用微信接口时已经封装在 url 的 queryParam 里了。post 方法中的 postData 是 stringify 处理之后的 JSON 字符串 而不是 JSON 对象。</p><h2 id="MP-js-api"><a href="#MP-js-api" class="headerlink" title="MP_js_api"></a>MP_js_api</h2><blockquote><p><a href="https://github.com/Wechat-Group/weixin-java-tools/wiki/MP_js_api">MP_js_api</a></p></blockquote><p>微信企业号服务获取JS-SDK需要的证书信息可以调用 <code>wxCpService.createJsapiSignature(url)</code>，其中 url 必须是调用 JS-SDK 页面的全路径（包括?后的 queryString）中第一个#之前的字符串。例如当前的页面全路径是 <code>http://www.yupaits.com/hello?text=world&amp;next=config#wechat</code>，则 url 应该是 <code>http://www.yupaits.com/hello?text=world&amp;next=config</code>。</p><p>页面上可以<a href="http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E6.AD.A5.E9.AA.A4.E4.BA.8C.EF.BC.9A.E9.80.9A.E8.BF.87config.E6.8E.A5.E5.8F.A3.E6.B3.A8.E5.85.A5.E6.9D.83.E9.99.90.E9.AA.8C.E8.AF.81.E9.85.8D.E7.BD.AE">通过config接口注入权限验证配置</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，企业号的唯一标识，此处填写企业号corpid</span></span><br><span class="line">    <span class="attr">timestamp</span>: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    <span class="attr">signature</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    <span class="attr">jsApiList</span>: [] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>两者结合的实例。点击页面上的“扫码”按钮，调用 js 中的 <code>scan()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/jssdk&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsSdkPage</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String url = request.getRequestURL().append(StringUtils.isNotBlank(HttpUtil.getRequest().getQueryString()) ? <span class="string">&quot;?&quot;</span> + HttpUtil.getRequest().getQueryString() : <span class="string">&quot;&quot;</span>).toString();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;jsApiSignature&quot;</span>, JSON.toJSONString(wxCpService.createJsapiSignature(url)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;获取JS-API的签名出错，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;weixin/jssdk&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsapisignature = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;$&#123;jsApiSignature&#125;&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scan</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.config(&#123;</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">appId</span>: jsapisignature.appid,</span><br><span class="line">        <span class="attr">timestamp</span>: jsapisignature.timestamp,</span><br><span class="line">        <span class="attr">nonceStr</span>: jsapisignature.noncestr,</span><br><span class="line">        <span class="attr">signature</span>: jsapisignature.signature,</span><br><span class="line">        <span class="attr">jsApiList</span>: [</span><br><span class="line">            <span class="string">&#x27;scanQRCode&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        wx.scanQRCode(&#123;</span><br><span class="line">            <span class="attr">needResult</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;恭喜你&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(res.errMsg.indexOf(<span class="string">&#x27;function_not_exist&#x27;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    alert(<span class="string">&#x27;版本过低请升级&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.error(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;微信JS接口验证失败，无法调用相关接口&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub和Jenkins自动构建并部署静态页面</title>
      <link href="/2020/02/04/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/02/04/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>随着DevOps的日趋成熟，CI/CD的概念已经慢慢为广大开发运维人员所熟知和认同，本文记录了GitHub结合Jenkins自动构建和部署静态页面的方法，并从中窥见CI/CD之一二，同时也是做一个备忘记录。</p><span id="more"></span><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>创建任务时选择<strong>构建一个自由风格的软件项目</strong>。</p><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1.png" alt="jenkins创建任务"></p><h2 id="配置Jenkins任务"><a href="#配置Jenkins任务" class="headerlink" title="配置Jenkins任务"></a>配置Jenkins任务</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-General.png" alt="任务配置-General"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.png" alt="任务配置-源码管理"></p><p>填写源码的git地址，用于下载源码到jenkins的工作空间，以便后续进行构建操作。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="任务配置-构建触发器"></p><p><a href="https://github.com/YupaiTS/yupaits-work/settings/hooks">进入GitHub的相应项目中配置webhook</a>，webhook的<code>Payload URL</code>填写格式为<code>http://jenkins所在的domain或者ip:port/github-webhook/</code>。完成配置后，github接收特定的事件之后会触发请求该url。jenkins接收到请求之后会触发任务执行构建。</p><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83.png" alt="任务配置-构建环境"></p><p>在<code>Console Output</code>中加入时间戳，将<code>nodejs</code> 和 <code>npm</code>命令加入PATH，方便进行全局执行。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA.png" alt="任务配置-构建"></p><p>首先执行<code>npm install</code>安装依赖包，再执行<code>npm run build</code>进行构建。</p><p><strong>YupaitsWork.sh</strong>脚本用于将构建生成的页面覆盖掉nginx的静态页面，实现自动更新nginx主页的效果，其内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -rf /var/www/html/**</span><br><span class="line">cp -rf /var/lib/jenkins/workspace/YupaitsWork/dist/** /var/www/html</span><br></pre></td></tr></table></figure><p>需要注意的是，默认的jenkins用户是没有<code>/var/www/html</code>目录的操作操作权限的，需要使用<code>chown -R jenkins:jenkins /var/www/html</code>更改该目录的所有者为jenkins用户。</p><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E5%90%8E%E6%93%8D%E4%BD%9C.png" alt="任务配置-构建后操作"></p><p>将构建后的<code>dist</code>文件夹内容进行归档。</p><h2 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h2><p>完成任务的创建和配置之后，进入任务页面点击<strong>立即构建</strong>即可完成nginx主页的构建和覆盖部署。当然也可以通过push代码实现自动构建和部署。</p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gitee+Jenkins+Docker完成前后端分离项目的CI/CD</title>
      <link href="/2020/02/04/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/"/>
      <url>/2020/02/04/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitee-Webhook配置"><a href="#Gitee-Webhook配置" class="headerlink" title="Gitee Webhook配置"></a>Gitee Webhook配置</h2><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/Webhook%E9%85%8D%E7%BD%AE.png" alt="Webhook配置"></p><p>URL的格式为 <code>http://[username]:[password或者jenkins的api_token]@www.yupaits.com:8080/generic-webhook-trigger/invoke</code> 。</p><p>webhook请求提交的数据参考<a href="http://git.mydoc.io/?t=154711">码云平台帮助文档</a>。</p><span id="more"></span><h2 id="Jenkins插件安装、环境配置"><a href="#Jenkins插件安装、环境配置" class="headerlink" title="Jenkins插件安装、环境配置"></a>Jenkins插件安装、环境配置</h2><h3 id="必需插件"><a href="#必需插件" class="headerlink" title="必需插件"></a>必需插件</h3><p>Jenkins需要安装以下插件：</p><ul><li>Generic Webhook Trigger Plugin</li><li>Git Plugin</li><li>NodeJS Plugin</li></ul><h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><p>Jenkins需要配置以下全局工具：</p><ul><li>JDK</li><li>Git</li><li>Maven</li><li>NodeJS</li></ul><h2 id="Jenkins任务配置"><a href="#Jenkins任务配置" class="headerlink" title="Jenkins任务配置"></a>Jenkins任务配置</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-General.png" alt="任务配置-General"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.png" alt="任务配置-源码管理"></p><p>填写Gitee代码仓库地址，选择需要构建的分支。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="任务配置-构建触发器"></p><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A81.png" alt="任务配置-构建触发器1"></p><p>配置触发器参数和触发过滤条件。这里选择了分支名称和项目名称作为构建时的过滤条件。<code>Expression</code>里的<code>$</code>是webhook请求中的请求体JSON数据对象，而<code>Variable</code>中的ref则是Jenkins触发器的变量名，在<code>Optional filter</code>中可以通过<code>$ref</code>来引用该变量。</p><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83.png" alt="任务配置-构建环境"></p><p>由于<code>Todo-Tomato</code>项目里有基于<code>vue-loader</code>的前端SPA，所以构建时需要<code>nodejs</code>和<code>npm</code>环境。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA.png" alt="任务配置-构建"></p><p>构建分三步：构建前执行脚本；maven构建；构建后执行脚本。</p><ul><li>构建前脚本：停止相关docker容器；安装npm依赖；npm构建；dist文件夹移入后台Spring Boot项目的resources/public资源文件目录下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker stop todo-tomato</span><br><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/workspace/TodoTomato/todo-tomato-web</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">mkdir -p ../todo-tomato-server/src/main/resources/public</span><br><span class="line">rm -rf ../todo-tomato-server/src/main/resources/public/**</span><br><span class="line">cp -rf dist/** ../todo-tomato-server/src/main/resources/public</span><br></pre></td></tr></table></figure><ul><li>构建后脚本：将构建生成的Jar包和DockerFile移入目标文件夹；停止相关docker容器并删除相关docker镜像；构建docker镜像；运行基于docker镜像的容器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mkdir -p /var/lib/jenkins/workspace/TodoTomato/todo-tomato-server/target/docker</span><br><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/workspace/TodoTomato/todo-tomato-server/target</span><br><span class="line">cp -f todo-tomato-server-*.jar docker</span><br><span class="line">cp -f ../src/main/docker/DockerFile docker</span><br><span class="line"><span class="built_in">cd</span> docker</span><br><span class="line">docker stop todo-tomato</span><br><span class="line">docker rm todo-tomato</span><br><span class="line">docker rmi yupaits/todo-tomato:latest</span><br><span class="line">docker build -f DockerFile -t yupaits/todo-tomato:latest .</span><br><span class="line">docker run -d -p 6060:6060 --restart always --name todo-tomato -v /root/todo-tomato/logs:/root/logs yupaits/todo-tomato:latest</span><br></pre></td></tr></table></figure><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E5%90%8E%E6%93%8D%E4%BD%9C.png" alt="任务配置-构建后操作"></p><p>构建完成后，将生成的Jar包和DockerFile进行归档。</p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Gitee </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布jar包到Maven中央仓库</title>
      <link href="/2020/02/04/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2020/02/04/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/">发布jar包到maven中央仓库</a></p></blockquote><p>在 maven 中引入第三方 jar 包是非常简单的，只需使用 groupId + artifactId + version 就能从 Maven 仓库中下载对应的 jar 包。</p><p>例如：引入 guava 的 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gruopId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>25.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本文就介绍如何将自己的 jar 包发布到 Maven 中央仓库。</p><span id="more"></span><h2 id="创建issue"><a href="#创建issue" class="headerlink" title="创建issue"></a>创建issue</h2><p>首先需要在 <a href="https://issues.sonatype.org/secure/Dashboard.jspa">https://issues.sonatype.org/secure/Dashboard.jspa</a> 注册一个账号，创建一个新项目的 issue 并提交。</p><p><img src="/images/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/%E5%88%9B%E5%BB%BAissue.png" alt="创建issue"></p><ul><li>Project 选择 Community Support，Issue type 选择 New Project。</li><li>注意 Group Id，如果有对应域名的话则使用域名对应的 Group Id（例如 netty 项目的域名是 netty.io，则 Group Id 为 io.netty），没有自己的域名最好就填 com.github.xxx，因为在 issue 里审核员会询问你是否拥有 Group Id 对应的域名并且要求你进行技术验证，没有的话审核会不通过，而托管在 github 上的话就可以直接使用 github 的域名来完成审核。</li></ul><h2 id="issue审核"><a href="#issue审核" class="headerlink" title="issue审核"></a>issue审核</h2><p>创建成功后等 1-2 个小时左右就会有工作人员评论 issue，问你是否持有域名。</p><p><img src="/images/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/issue%E5%AE%A1%E6%A0%B8.png" alt="issue审核"></p><p>如果是用com.github.xxx的 Group Id，就回复要使用com.github.xxx作为你的域名，否则有域名就回复有就好,接着等待工作人员确认(我等了一天)，确认成功之后 issue 的状态就会变成RESOLVED，这个时候就有资格上传 jar 包到 maven 仓库了。</p><h2 id="gpg管理密钥"><a href="#gpg管理密钥" class="headerlink" title="gpg管理密钥"></a>gpg管理密钥</h2><p>在上传 jar 包之前，先要使用 gpg 工具生成 RSA 密钥对，并把公钥上传到公共密钥服务器，这样在发布 jar 包时能校验用户的身份。</p><ol><li><p>下载 gpg 工具，<a href="https://www.gnupg.org/download/index.html">下载地址</a>，下载对应操作系统的版本然后进行安装。</p></li><li><p>验证安装和上传生成的公钥</p><ul><li><p>验证 gpg 是否安装成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure></li><li><p>生成 RSA 密钥对</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpgp --gen-key</span><br></pre></td></tr></table></figure><p>  接着需要填写名字和邮箱等等基本信息，这些都不是重点，最主要的是有个 <code>Passphase</code> 的选项在填完之后记下来，到时候发布 jar 包的时候要用到。</p></li><li><p>查看生成的密钥，并上传至密钥服务器</p><p>  需要上传到服务器的就是 pub 里的公钥串 <code>DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------</span><br><span class="line">pub   rsa2048 2019-03-08 [SC] [expires: 2021-03-08]</span><br><span class="line">    DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br><span class="line">uid           [ultimate] yupaits &lt;ts495606653@hotmail.com&gt;</span><br><span class="line">sub   rsa2048 2019-03-08 [E] [expires: 2021-03-08]</span><br></pre></td></tr></table></figure><p>  上传公钥至密钥服务器，国内可以用这个服务器 <code>hkp://keyserver.ubuntu.com:11371</code>。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br></pre></td></tr></table></figure><p>  上传完成后验证是否成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --receive-keys DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br></pre></td></tr></table></figure><p>  验证成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><ol><li><p>修改项目中的pom.xml文件，添加部署相关配置，以下是个人项目 <code>project-commons</code> 的 pom.xml 示例：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>project-commons<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>项目通用commons<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons.git<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>MIT License<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons/blob/master/LICENSE<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>yupaits<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>ts495606653@hotmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.12<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-annotation<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-extension<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-jpa<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-mybatis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">additionalOption</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flatten-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">updatePomFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updatePomFile</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">flattenMode</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">flattenMode</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">pomElements</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">parent</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>resolve<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">properties</span>&gt;</span>interpolate<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">pomElements</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把之前创建 issue 时注册的账号配置到 maven 的配置文件里，找到 maven 的 setting.xml文件，在 <code>&lt;servers&gt;</code> 标签里添加。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署jar包"><a href="#部署jar包" class="headerlink" title="部署jar包"></a>部署jar包</h2><ol><li><p>使用下面的命令行将项目打包构建并上传至maven仓库。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -Dgpg.passphrase=YourPassphrase</span><br></pre></td></tr></table></figure></li><li><p>使用创建 issue 时的账号登录到 <a href="https://oss.sonatype.org/%EF%BC%8C%E7%84%B6%E5%90%8E%E7%9C%8B%E5%9B%BE%E6%93%8D%E4%BD%9C%E3%80%82">https://oss.sonatype.org/，然后看图操作。</a></p><p> <img src="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/1532339455164.png" alt="Close Staging Repository"></p></li><li><p>Close 完了系统会验证 jar 包，点击刷新可以看到最新的进度，当全部验证通过的时候，状态会变成 <code>closed</code>，然后再选中文件 <code>Release</code> 就发布完成了。然后等个几个小时就可以在中央仓库搜索到自己发布的 jar 包了。</p><p> <img src="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/1532339866124.png" alt="Realease"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目License的介绍</title>
      <link href="/2020/02/04/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AELicense%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/04/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AELicense%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://gitee.com/oschina/git-osc/wikis/License">《开源许可证的一些介绍》</a></p></blockquote><p>当我们在github、gitee上新建项目的时候，往往不知道到该如何选择一个合适的开源许可证，本文引用gitee上的License介绍对常见的License做一个简单的介绍。</p><span id="more"></span><h1 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h1><h2 id="Apache-v2-License"><a href="#Apache-v2-License" class="headerlink" title="Apache v2 License"></a><a href="http://opensource.org/licenses/Apache-2.0">Apache v2 License</a></h2><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ol><li>需要给代码的用户一份Apache Licence</li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li></ol><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h2 id="MIT-License"><a href="#MIT-License" class="headerlink" title="MIT License"></a><a href="http://opensource.org/licenses/MIT">MIT License</a></h2><p>MIT许可证之名源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称「X条款」（X License）或「X11条款」（X11 License）</p><p>MIT内容与三条款BSD许可证（3-clause BSD license）内容颇为近似，但是赋予软体被授权人更大的权利与更少的限制。</p><p>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软体及软体的副本。</p><p>被授权人可根据程式的需要修改授权条款为适当的内容。</p><p>在软件和软件的所有副本中都必须包含版权声明和许可声明。</p><p>此授权条款并非属copyleft的自由软体授权条款，允许在自由/开放源码软体或非自由软体（proprietary software）所使用。</p><p>此亦为MIT与BSD（The BSD license, 3-clause BSD license）本质上不同处。</p><p>MIT条款可与其他授权条款并存。另外，MIT条款也是自由软体基金会（FSF）所认可的自由软体授权条款，与GPL相容。</p><h2 id="GPL-v2"><a href="#GPL-v2" class="headerlink" title="GPL v2"></a><a href="http://opensource.org/licenses/GPL-2.0">GPL v2</a></h2><p>GPL 是GNU通用公共许可协议(GNU General Public License)的简称，我们很熟悉的 Linux 和 Git 就是采用了 GPL，该协议力图保障你分享和修改某程序全部版本的权利——确保自由软件对其用户来说是自由的。</p><p>所谓自由软件，强调自由，而非免费。GNU通用公共许可协议设计用于确保你享有分发自由软件的自由（你可以为此服务收费），确保你可以在需要的时候获得这些软件的源码，确保你可以修改这些软件或者在新的自由软件中复用其中某些片段，并且确保你在这方面享有知情权。</p><p>自由权利包括复制、分发和修改。源码是指所有修改作品及生成、安装、运行（对可执行作品而言）目标码所需的源码，包括控制上述行为的脚本，但其中不包括系统库、通用工具。</p><p>简而言之，如果你分发自由软件的副本，那么副本中必须包含许可协议和版权声明，并确保接收者能够获取到该副本的源代码及其依赖库的源码。</p><h2 id="Artistic-License-2-0"><a href="#Artistic-License-2-0" class="headerlink" title="Artistic License 2.0"></a><a href="http://opensource.org/licenses/Artistic-2.0">Artistic License 2.0</a></h2><p>Artistic License，又称艺术许可协议（英语：Artistic License），通常指最初的艺术许可协议（1.0版），是一个自由软件授权条款，主要用在官方发布的Perl解释器和大部分CPAN模块的授权。原始的艺术许可协议是由Perl的创始人Larry Wall编写发布的。</p><h2 id="BSD-2-Clause-license"><a href="#BSD-2-Clause-license" class="headerlink" title="BSD 2-Clause license"></a><a href="http://opensource.org/licenses/BSD-2-Clause">BSD 2-Clause license</a></h2><p>BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。</p><p>BSD鼓励代码共享的同时，要求尊重代码作者的著作权。</p><p>使用BSD协议，需要遵守以下规则：</p><ol><li>再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档那个和版权声明中包含原来代码中的BSD协议。</li></ol><h2 id="Affero-GPL"><a href="#Affero-GPL" class="headerlink" title="Affero GPL"></a><a href="http://opensource.org/licenses/AGPL-3.0">Affero GPL</a></h2><p>是一个广泛被使用的自由软件特许条款，最初由Affero, Inc撰写。此特许条款最新版本为“第3版”（v3），2007年11月发布。Affero 通用公众特许条款是改自GNU通用公众特许条款，并加入额外条款，其目的是为了Copyleft条款应用于在网络上运行的应用程式（如Web应用），从而避免有人以应用服务提供商方式逃避GNU通用公众特许条款。</p><h2 id="LGPL-v2-1"><a href="#LGPL-v2-1" class="headerlink" title="LGPL v2.1"></a><a href="http://opensource.org/licenses/LGPL-2.1">LGPL v2.1</a></h2><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h2 id="BSD-3-Clause-License"><a href="#BSD-3-Clause-License" class="headerlink" title="BSD (3-Clause) License"></a><a href="http://opensource.org/licenses/BSD-3-Clause">BSD (3-Clause) License</a></h2><p>BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。</p><p>BSD鼓励代码共享的同时，要求尊重代码作者的著作权。</p><p>使用BSD协议，需要遵守以下规则：</p><ol><li>再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档那个和版权声明中包含原来代码中的BSD协议;</li><li>不可以用开源代码的“作者/机构的名字”或“原来产品的名字”做市场推广。</li></ol><h2 id="Eclipse-Public-License-v1-0"><a href="#Eclipse-Public-License-v1-0" class="headerlink" title="Eclipse Public License v1.0"></a><a href="http://opensource.org/licenses/EPL-1.0">Eclipse Public License v1.0</a></h2><p>EPL允许使用者任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。</p><p>使用EPL协议，需要遵守以下规则：</p><ol><li>当一个代码贡献者将源码的整体或部分再次开源发布的时候,必须继续遵循EPL开源协议来发布,而不能改用其他协议发布.除非你得到了原“源码”拥有者的授权；</li><li>EPL协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,或者当你再发布的是二进制文件的时候,你必须声明它的源代码是可以获取的,而且要告知获取方法；</li><li>当你需要将EPL下的源码作为一部分跟其他私有的源码混和着成为一个Project发布的时候,你可以将整个Project/Product以私人的协议发布,但要声明哪一部分代码是EPL下的,而且声明那部分代码继续遵循EPL；</li><li>独立的模块(Separate Module),不需要开源。</li></ol><h2 id="LGPL-v3"><a href="#LGPL-v3" class="headerlink" title="LGPL v3"></a><a href="http://opensource.org/licenses/LGPL-3.0">LGPL v3</a></h2><p>相对于LGPL v2，不仅要求用户公布修改的源代码，还阻止了其他一些私有化的方式，例如：不得将产品内的软件“tivo化”或“锁定”，或者（用行业内的话来说）“安全启动”，也就是说，不得以任何形式阻止用户修改产品内的以 GPL 许可协议发布的软件。</p><h2 id="Mozilla-Public-License-Version-2-0"><a href="#Mozilla-Public-License-Version-2-0" class="headerlink" title="Mozilla Public License Version 2.0"></a><a href="http://opensource.org/licenses/MPL-2.0">Mozilla Public License Version 2.0</a></h2><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对 源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p><ul><li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个 豁口。 </li><li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。 </li><li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是 专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。 </li><li>对源代码的定义<br>而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择 取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始 源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。” </li><li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li></ul><h2 id="GPL-v3"><a href="#GPL-v3" class="headerlink" title="GPL v3"></a><a href="http://opensource.org/licenses/GPL-3.0">GPL v3</a></h2><p>GPL v3与GPL v2类似。区别在于，不仅要求用户公布修改的源代码，还阻止了其他一些私有化的方式，例如：不得将产品内的软件“tivo化”或“锁定”，或者（用行业内的话来说）“安全启动”，也就是说，不得以任何形式阻止用户修改产品内的以 GPL 许可协议发布的软件。</p><h2 id="Public-Domain"><a href="#Public-Domain" class="headerlink" title="Public Domain"></a><a href="http://fairuse.stanford.edu/overview/public-domain/welcome/">Public Domain</a></h2><p>Public Domain 是人类的一部分作品与一部分知识的总汇，可以包括文章、艺术品、音乐、科学、发明等等。对于领域内的知识财产，任何个人或团体都不具所有权益（所有权益通常由版权或专利体现）。这些知识发明属于公有文化遗产，任何人可以不受限制地使用和加工它们（此处不考虑有关安全、出口等的法律）。创立版权制度的初衷是借由给予创作者一段时期的专有权利作为（经济）刺激以鼓励作者从事创作。当专有权利期间届止，作品便进入公有领域。公有领域的作品由于没有专属权利人，因此公众有权自由使用它们。  </p><h1 id="选择合适的License"><a href="#选择合适的License" class="headerlink" title="选择合适的License"></a>选择合适的License</h1><p>GitHub的使用帮助中对<a href="https://help.github.com/articles/licensing-a-repository/">如何授权一个项目</a>有着详细介绍，着重关注一下其推荐的<a href="https://choosealicense.com/">Choose an open source license</a>和<a href="https://opensource.guide/legal/">The Legal Side of Open Source</a>，按需选择适合自己项目的开源License。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> License </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号管理平台的实现</title>
      <link href="/2020/02/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>微信公众号管理平台是对多个公众号统一配置管理的平台，本文介绍了该平台的实现方案。项目地址：<a href="https://gitee.com/yupaits/wechat-admin">wechat-admin</a>，该项目尚未开放，待对项目中的内容进行脱敏之后会公开。</p><span id="more"></span><h2 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h2><p><em><strong>多个公众号如何复用同一个消息接口、同一套消息处理逻辑？</strong></em></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>微信Java开发工具包<a href="https://github.com/Wechat-Group/weixin-java-tools">weixin-java-tools</a>中的公众号开发工具<strong>weixin-java-mp</strong>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li><p>多个公众号使用统一的消息接收接口，并附带公众号在管理平台的id作为标识；</p></li><li><p>统一消息接收接口获取id，<strong>动态配置</strong>仅用于本次消息处理的消息路由；</p></li><li><p>消息路由根据实际接收到的消息事件做出响应。</p></li></ol><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ul><li>WxPortalController.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/portal/WxMpAccount/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxPortalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpServiceHelper wxMpServiceHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCRYPT_TYPE_AES = <span class="string">&quot;aes&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(produces = &quot;text/plain; charset=utf-8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authGet</span><span class="params">(<span class="meta">@PathVariable</span> Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(&quot;echostr&quot;)</span> String echostr)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;\n接收到来自微信服务器的认证消息：[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]&quot;</span>, signature, timestamp, nonce, echostr);</span><br><span class="line">        <span class="keyword">if</span> (wxMpServiceHelper.wxMpService(id).checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;非法请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(produces = &quot;application/xml; charset=utf-8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(<span class="meta">@PathVariable</span> Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestBody</span> String requestBody,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="meta">@RequestParam(name = &quot;msg_signature&quot;,required = false)</span> String msgSignature)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;\n接收微信请求：[signature=[&#123;&#125;], encType=[&#123;&#125;], msgSignature=[&#123;&#125;], timestamp=[&#123;&#125;], nonce=[&#123;&#125;], &quot;</span> +</span><br><span class="line">                <span class="string">&quot;requestBody=[\n&#123;&#125;\n] &quot;</span>, signature, encType, msgSignature, timestamp, nonce, requestBody);</span><br><span class="line">        <span class="keyword">if</span> (!wxMpServiceHelper.wxMpService(id).checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;非法请求，可能属于伪造的请求！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String out  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (encType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">            WxMpXmlOutMessage outMessage = wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</span><br><span class="line">            out = outMessage == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : outMessage.toXml();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPT_TYPE_AES.equalsIgnoreCase(encType)) &#123;</span><br><span class="line">            WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(requestBody,</span><br><span class="line">                    wxMpServiceHelper.wxMpService(id).getWxMpConfigStorage(), timestamp, nonce, msgSignature);</span><br><span class="line">            logger.debug(<span class="string">&quot;\n消息解密后内容为：\n&#123;&#125;&quot;</span>, inMessage.toString());</span><br><span class="line">            WxMpXmlOutMessage outMessage = wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</span><br><span class="line">            out = outMessage == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : outMessage.toEncryptedXml(wxMpServiceHelper.wxMpService(id).getWxMpConfigStorage());</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">&quot;\n回复信息：&#123;&#125;&quot;</span>, out);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信消息统一接收接口，此处最核心的就是<code>wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</code>。</p><ul><li>WxMpServiceHelper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WxMpServiceHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpAccountRepository wxMpAccountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubscribeHandler subscribeHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxEventHandlers handlers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgHandler msgHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseWxServiceImpl <span class="title">wxMpService</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseWxServiceImpl(id, wxMpAccountRepository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpMenuServiceImpl <span class="title">wxMpMenuService</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WxMpMenuServiceImpl(wxMpService(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpMessageRouter <span class="title">wxMpMessageRouter</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        WxMpMessageRouter router = <span class="keyword">new</span> WxMpMessageRouter(wxMpService(id));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录所有事件的日志</span></span><br><span class="line">        router.rule().handler(<span class="keyword">new</span> LogHandler(id)).next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关注公众号</span></span><br><span class="line">        router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SUBSCRIBE).handler(subscribeHandler.getHandler(id)).end();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义处理逻辑</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String, WxMpMessageHandler&gt; mpHandlerMap = (Map&lt;String, WxMpMessageHandler&gt;) MapUtils.getMap(handlers.getHandlerMap(), id);</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(mpHandlerMap)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, WxMpMessageHandler&gt; handler : mpHandlerMap.entrySet()) &#123;</span><br><span class="line">                router.rule().async(<span class="keyword">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(handler.getKey()).handler(handler.getValue()).end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动回复消息</span></span><br><span class="line">        router.rule().async(<span class="keyword">false</span>).handler(msgHandler.getHandler(id)).end();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据传入微信公众号在公众号管理平台中的id，动态获取该公众号的配置参数、消息类型与处理类路径的对应关系列表，并以此生成该公众号的消息路由。消息路由根据实际传入的消息事件作出响应。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建OpenLDAP服务</title>
      <link href="/2020/02/04/%E6%90%AD%E5%BB%BAOpenLDAP%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/02/04/%E6%90%AD%E5%BB%BAOpenLDAP%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自 <a href="https://segmentfault.com/a/1190000014683418">我花了一个五一终于搞懂了OpenLDAP</a></p></blockquote><blockquote><p>轻型目录访问协议（英文：Lightweight Directory Access Protocol，缩写：LDAP）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p></blockquote><p>大部分企业级工具都支持LDAP协议，我们可以搭建OpenLDAP服务使得这些企业级工具共享同一套用户名和密码来进行认证授权。</p><span id="more"></span><h2 id="安装OpenLDAP"><a href="#安装OpenLDAP" class="headerlink" title="安装OpenLDAP"></a>安装OpenLDAP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openldap openldap-clients openldap-servers</span><br></pre></td></tr></table></figure><p>启动OpenLDAP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service slapd start</span><br></pre></td></tr></table></figure><h2 id="配置OpenLDAP"><a href="#配置OpenLDAP" class="headerlink" title="配置OpenLDAP"></a>配置OpenLDAP</h2><h3 id="root-ldif"><a href="#root-ldif" class="headerlink" title="root.ldif"></a>root.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dn: olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=admin,dc=example,dc=com</span><br><span class="line">-</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=example,dc=com</span><br><span class="line">-</span><br><span class="line">replace: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;RLFdZ/Ym/O9TODUMNAPh8a7F5DzDaG5P</span><br></pre></td></tr></table></figure><p>修改RootDN，使用指令<code>ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f root.ldif</code></p><h3 id="org-ldif"><a href="#org-ldif" class="headerlink" title="org.ldif"></a>org.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dn: dc=example,dc=com</span><br><span class="line">dc: example</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: rootobject</span><br><span class="line"></span><br><span class="line">dn: ou=Group,dc=example,dc=com</span><br><span class="line">ou: Group</span><br><span class="line">description: Groups</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line"></span><br><span class="line">dn: ou=People,dc=example,dc=com</span><br><span class="line">ou: People</span><br><span class="line">description: People</span><br><span class="line">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure><p>使用指令<code>ldapadd -H ldapi:/// -D &quot;cn=admin,dc=example,dc=com&quot; -x -w $&#123;password&#125; -f org.ldif</code>。注意将<code>$&#123;password&#125;</code>替换为实际的密码。</p><p>以下三个文件以同样方式执行命令。</p><h3 id="memberof-config-ldif"><a href="#memberof-config-ldif" class="headerlink" title="memberof_config.ldif"></a>memberof_config.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=module,cn=config</span><br><span class="line">cn: module</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">olcModuleLoad: memberof</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcMemberOf</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: memberof</span><br><span class="line">olcMemberOfDangling: ignore</span><br><span class="line">olcMemberOfRefInt: TRUE</span><br><span class="line">olcMemberOfGroupOC: groupOfNames</span><br><span class="line">olcMemberOfMemberAD: member</span><br><span class="line">olcMemberOfMemberOfAD: memberOf</span><br></pre></td></tr></table></figure><h3 id="refint1-ldif"><a href="#refint1-ldif" class="headerlink" title="refint1.ldif"></a>refint1.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br></pre></td></tr></table></figure><h3 id="refint2-ldif"><a href="#refint2-ldif" class="headerlink" title="refint2.ldif"></a>refint2.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dn: olcOverlay=&#123;1&#125;refint,olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: &#123;1&#125;refint</span><br><span class="line">olcRefintAttribute: memberof member manager owner</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLDAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过开启swap分区解决小内存阿里云服务器的运行瓶颈</title>
      <link href="/2020/02/04/%E9%80%9A%E8%BF%87%E5%BC%80%E5%90%AFswap%E5%88%86%E5%8C%BA%E8%A7%A3%E5%86%B3%E5%B0%8F%E5%86%85%E5%AD%98%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%93%B6%E9%A2%88/"/>
      <url>/2020/02/04/%E9%80%9A%E8%BF%87%E5%BC%80%E5%90%AFswap%E5%88%86%E5%8C%BA%E8%A7%A3%E5%86%B3%E5%B0%8F%E5%86%85%E5%AD%98%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%93%B6%E9%A2%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自：<a href="https://blog.csdn.net/u012203437/article/details/49737365">ECS Linux开启swap（虚拟内存）</a></p></blockquote><p>阿里云在2018年春节前后通过一系列的促销活动向新老顾客推广云服务器，在诱人的价格面前笔者贡献了口袋里最后的可支配人民币，但实际使用下来，发现1核2G内存的ECS服务器的性能实在有限，特别是最近在上面部署docker容器的时候明显感觉到内存吃紧。思来想去，发现可以通过开启swap分区来解决内存瓶颈。</p><span id="more"></span><h2 id="swap分区大小设置"><a href="#swap分区大小设置" class="headerlink" title="swap分区大小设置"></a>swap分区大小设置</h2><p>阿里云的linux云服务器默认是没有启用swap分区（交换分区）的。一般情况下swapswap分区的大小可以参考以下规则进行设定：</p><table><thead><tr><th>内存大小</th><th>swap大小</th></tr></thead><tbody><tr><td>MEM_SIZE &lt;= 4G</td><td>最小2G</td></tr><tr><td>4G &lt; MEM_SIZE &lt;= 16G</td><td>最小4G</td></tr><tr><td>16G &lt; MEM_SIZE &lt;= 64G</td><td>最小8G</td></tr><tr><td>64G &lt; MEM_SIZE &lt;= 256G</td><td>最小16G</td></tr></tbody></table><h2 id="启用swap分区"><a href="#启用swap分区" class="headerlink" title="启用swap分区"></a>启用swap分区</h2><h3 id="创建用于交换分区的文件"><a href="#创建用于交换分区的文件" class="headerlink" title="创建用于交换分区的文件"></a>创建用于交换分区的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/mnt/swap bs=block_size count=number_of_block</span><br></pre></td></tr></table></figure><p>其中<code>block_size</code>和<code>number_of_block</code>的大小可以自定义，例如<code>bs=1M count=2048</code>代表2G大小的swap分区。</p><h3 id="设置交换分区文件"><a href="#设置交换分区文件" class="headerlink" title="设置交换分区文件"></a>设置交换分区文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /mnt/swap</span><br></pre></td></tr></table></figure><h3 id="立即启用交换分区文件"><a href="#立即启用交换分区文件" class="headerlink" title="立即启用交换分区文件"></a>立即启用交换分区文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /mnt/swap</span><br></pre></td></tr></table></figure><h3 id="设置开机自动启用swap分区"><a href="#设置开机自动启用swap分区" class="headerlink" title="设置开机自动启用swap分区"></a>设置开机自动启用swap分区</h3><p>在<code>/etc/fstab</code>中增加swap配置行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/mnt/swap   swap    swap    defaults    0   0</span><br></pre></td></tr></table></figure><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>设置完成之后可以通过linux的<code>free -m</code>命令查看swap分区的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Linux服务器格式化和挂载数据盘</title>
      <link href="/2020/02/04/%E9%98%BF%E9%87%8C%E4%BA%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E7%9B%98/"/>
      <url>/2020/02/04/%E9%98%BF%E9%87%8C%E4%BA%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://help.aliyun.com/document_detail/25426.html">Linux 格式化和挂载数据盘</a></p><span id="more"></span><h2 id="操作须知"><a href="#操作须知" class="headerlink" title="操作须知"></a>操作须知</h2><p>单独购买的数据盘需要先挂载数据盘，然后才能格式化。</p><p>随实例时一起购买的数据盘，无需挂载，直接格式化。</p><p>您需要知道挂载到实例的数据盘的设备名：您可以通过 <strong>ECS 管理控制台</strong> &gt; <strong>磁盘详情</strong> &gt; <strong>磁盘挂载信息</strong> 查到数据盘的设备名。数据盘的设备名由系统默认分配，从 <strong>/dev/xvdb</strong> 开始往后顺序排列，分布范围包括 <code>/dev/xvdb−/dev/xvdz</code>。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>远程连接实例。</p></li><li><p>运行 <code>fdisk -l</code> 命令查看实例是否有数据盘。如果执行命令后，没有发现 <code>/dev/vdb</code>，表示您的实例没有数据盘，无需格式化数据盘，请忽略本文后续内容。</p><p> 如果您的数据盘显示的是 <code>dev/xvd?</code>，表示您使用的是非 I/O 优化实例。<br> 其中 ? 是 a−z 的任一个字母。</p></li><li><p>创建一个单分区数据盘，依次执行以下命令：</p><ol><li><p>运行 <code>fdisk /dev/vdb</code>：对数据盘进行分区。</p></li><li><p>输入 <code>n</code> 并按回车键：创建一个新分区。</p></li><li><p>输入 <code>p</code> 并按回车键：选择主分区。因为创建的是一个单分区数据盘，所以只需要创建主分区。</p><blockquote><p>如果要创建 4 个以上的分区，您应该创建至少一个扩展分区，即选择 <code>e</code>。</p></blockquote></li><li><p>输入分区编号并按回车键。因为这里仅创建一个分区，可以输入 1。</p></li><li><p>输入第一个可用的扇区编号：按回车键采用默认值 1。</p></li><li><p>输入最后一个扇区编号：因为这里仅创建一个分区，所以按回车键采用默认值。</p></li><li><p>输入 <code>wq</code> 并按回车键，开始分区。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># fdisk /dev/vdb</span></span><br><span class="line">Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x5f46a8a2.</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">After that, of course, the previous content won<span class="string">&#x27;t be recoverable.</span></span><br><span class="line"><span class="string">Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span></span><br><span class="line"><span class="string">WARNING: DOS-compatible mode is deprecated. It&#x27;</span>s strongly recommended to</span><br><span class="line">switch off the mode (<span class="built_in">command</span> <span class="string">&#x27;c&#x27;</span>) and change display units to</span><br><span class="line">sectors (<span class="built_in">command</span> <span class="string">&#x27;u&#x27;</span>).</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">e   extended</span><br><span class="line">p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 1</span><br><span class="line">First cylinder (1-41610, default 1): 1</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-41610, default 41610):</span><br><span class="line">Using default value 41610</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): wq</span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure></li></ol></li><li><p>查看新的分区：运行命令 <code>fdisk -l</code>。如果出现以下信息，说明已经成功创建了新分区 <code>/dev/vdb1</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/vda: 42.9 GB, 42949672960 bytes</span><br><span class="line">255 heads, 63 sectors/track, 5221 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00053156</span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *           1        5222    41942016   83  Linux</span><br><span class="line">Disk /dev/vdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">16 heads, 63 sectors/track, 41610 cylinders</span><br><span class="line">Units = cylinders of 1008 * 512 = 516096 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x5f46a8a2</span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vdb1               1       41610    20971408+  83  Linux</span><br></pre></td></tr></table></figure></li><li><p>在新分区上创建一个文件系统：运行命令 <code>mkfs.ext4 /dev/vdb1</code>。</p><blockquote><p>本示例要创建一个 ext4 文件系统。您也可以根据自己的需要，选择创建其他文件系统，例如，如果需要在 Linux、Windows 和 Mac 系统之间共享文件，您可以使用 <code>mkfs.vfat</code> 创建 VFAT 文件系统。</p></blockquote><blockquote><p>创建文件系统所需时间取决于数据盘大小。</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># mkfs.ext4 /dev/vdb1</span></span><br><span class="line">mke2fs 1.41.12 (17-May-2010)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">1310720 inodes, 5242852 blocks</span><br><span class="line">262142 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=4294967296</span><br><span class="line">160 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">    4096000</span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line">This filesystem will be automatically checked every 37 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br></pre></td></tr></table></figure></li><li><p>（建议）备份 <strong>etc/fstab</strong>：运行命令 <code>cp /etc/fstab /etc/fstab.bak</code>。</p></li><li><p>向 <strong>/etc/fstab</strong> 写入新分区信息：运行命令 <code>echo /dev/vdb1 /mnt ext3 defaults 0 0 &gt;&gt; /etc/fstab</code>。</p><blockquote><p>注意：Ubuntu 12.04 不支持 barrier，所以对该系统正确的命令是：<code>echo &#39;/dev/vdb1 /mnt ext3 barrier=0 0 0&#39; &gt;&gt; /etc/fstab</code>。</p></blockquote><blockquote><p>如果需要把数据盘单独挂载到某个文件夹，比如单独用来存放网页，可以修改以上命令中的 <code>/mnt</code> 部分。</p></blockquote></li><li><p>查看 <strong>/etc/fstab</strong> 中的新分区信息：运行命令 <code>cat /etc/fstab</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># cat /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Thu Feb 23 07:28:22 2017</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=3d083579-f5d9-4df5-9347-8d27925805d4 /                       ext4    defaults        1 1</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br><span class="line">/dev/vdb1 /mnt ext3 defaults 0 0</span><br></pre></td></tr></table></figure></li><li><p>挂载文件系统：运行命令 <code>mount /dev/vdb1 /mnt</code>。</p></li><li><p>查看目前磁盘空间和使用情况：运行命令 <code>df -h</code>。如果出现新建文件系统的信息，说明挂载成功，可以使用新的文件系统了。</p><blockquote><p>挂载操作完成后，不需要重启实例即可开始使用新的文件系统。</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># mount /dev/vdb1 /mnt</span></span><br><span class="line">[root@iXXXXXXX ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  6.6G   31G  18% /</span><br><span class="line">tmpfs           499M     0  499M   0% /dev/shm</span><br><span class="line">/dev/vdb1        20G  173M   19G   1% /mnt</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub编程语言色彩一览</title>
      <link href="/2020/02/04/GitHub%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%89%B2%E5%BD%A9%E4%B8%80%E8%A7%88/"/>
      <url>/2020/02/04/GitHub%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%89%B2%E5%BD%A9%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>资源文件下载：</p><ul><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.json">github-colors.json</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.csv">github-colors.csv</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.less">github-colors.less</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.scss">github-colors.scss</a></li></ul><p>编程语言色彩一览表：</p><table><thead><tr><th align="left">编程语言</th><th align="left">颜色</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">Mercury</td><td align="left">#ff2b2b</td><td align="left"><img src="https://img.shields.io/badge/Mercury-ff2b2b.svg" alt="Mercury"></td></tr><tr><td align="left">TypeScript</td><td align="left">#2b7489</td><td align="left"><img src="https://img.shields.io/badge/TypeScript-2b7489.svg" alt="TypeScript"></td></tr><tr><td align="left">PureBasic</td><td align="left">#5a6986</td><td align="left"><img src="https://img.shields.io/badge/PureBasic-5a6986.svg" alt="PureBasic"></td></tr><tr><td align="left">Objective-C++</td><td align="left">#6866fb</td><td align="left"><img src="https://img.shields.io/badge/Objective_C++-6866fb.svg" alt="Objective-C++"></td></tr><tr><td align="left">Self</td><td align="left">#0579aa</td><td align="left"><img src="https://img.shields.io/badge/Self-0579aa.svg" alt="Self"></td></tr><tr><td align="left">NewLisp</td><td align="left">#87AED7</td><td align="left"><img src="https://img.shields.io/badge/NewLisp-87AED7.svg" alt="NewLisp"></td></tr><tr><td align="left">Fortran</td><td align="left">#4d41b1</td><td align="left"><img src="https://img.shields.io/badge/Fortran-4d41b1.svg" alt="Fortran"></td></tr><tr><td align="left">Ceylon</td><td align="left">#dfa535</td><td align="left"><img src="https://img.shields.io/badge/Ceylon-dfa535.svg" alt="Ceylon"></td></tr><tr><td align="left">Rebol</td><td align="left">#358a5b</td><td align="left"><img src="https://img.shields.io/badge/Rebol-358a5b.svg" alt="Rebol"></td></tr><tr><td align="left">Frege</td><td align="left">#00cafe</td><td align="left"><img src="https://img.shields.io/badge/Frege-00cafe.svg" alt="Frege"></td></tr><tr><td align="left">AspectJ</td><td align="left">#a957b0</td><td align="left"><img src="https://img.shields.io/badge/AspectJ-a957b0.svg" alt="AspectJ"></td></tr><tr><td align="left">Omgrofl</td><td align="left">#cabbff</td><td align="left"><img src="https://img.shields.io/badge/Omgrofl-cabbff.svg" alt="Omgrofl"></td></tr><tr><td align="left">HolyC</td><td align="left">#ffefaf</td><td align="left"><img src="https://img.shields.io/badge/HolyC-ffefaf.svg" alt="HolyC"></td></tr><tr><td align="left">Shell</td><td align="left">#89e051</td><td align="left"><img src="https://img.shields.io/badge/Shell-89e051.svg" alt="Shell"></td></tr><tr><td align="left">HiveQL</td><td align="left">#dce200</td><td align="left"><img src="https://img.shields.io/badge/HiveQL-dce200.svg" alt="HiveQL"></td></tr><tr><td align="left">AppleScript</td><td align="left">#101F1F</td><td align="left"><img src="https://img.shields.io/badge/AppleScript-101F1F.svg" alt="AppleScript"></td></tr><tr><td align="left">Eiffel</td><td align="left">#946d57</td><td align="left"><img src="https://img.shields.io/badge/Eiffel-946d57.svg" alt="Eiffel"></td></tr><tr><td align="left">XQuery</td><td align="left">#5232e7</td><td align="left"><img src="https://img.shields.io/badge/XQuery-5232e7.svg" alt="XQuery"></td></tr><tr><td align="left">RUNOFF</td><td align="left">#665a4e</td><td align="left"><img src="https://img.shields.io/badge/RUNOFF-665a4e.svg" alt="RUNOFF"></td></tr><tr><td align="left">RAML</td><td align="left">#77d9fb</td><td align="left"><img src="https://img.shields.io/badge/RAML-77d9fb.svg" alt="RAML"></td></tr><tr><td align="left">MTML</td><td align="left">#b7e1f4</td><td align="left"><img src="https://img.shields.io/badge/MTML-b7e1f4.svg" alt="MTML"></td></tr><tr><td align="left">Elixir</td><td align="left">#6e4a7e</td><td align="left"><img src="https://img.shields.io/badge/Elixir-6e4a7e.svg" alt="Elixir"></td></tr><tr><td align="left">SAS</td><td align="left">#B34936</td><td align="left"><img src="https://img.shields.io/badge/SAS-B34936.svg" alt="SAS"></td></tr><tr><td align="left">MQL4</td><td align="left">#62A8D6</td><td align="left"><img src="https://img.shields.io/badge/MQL4-62A8D6.svg" alt="MQL4"></td></tr><tr><td align="left">MQL5</td><td align="left">#4A76B8</td><td align="left"><img src="https://img.shields.io/badge/MQL5-4A76B8.svg" alt="MQL5"></td></tr><tr><td align="left">Agda</td><td align="left">#315665</td><td align="left"><img src="https://img.shields.io/badge/Agda-315665.svg" alt="Agda"></td></tr><tr><td align="left">wisp</td><td align="left">#7582D1</td><td align="left"><img src="https://img.shields.io/badge/wisp-7582D1.svg" alt="wisp"></td></tr><tr><td align="left">Dockerfile</td><td align="left">#384d54</td><td align="left"><img src="https://img.shields.io/badge/Dockerfile-384d54.svg" alt="Dockerfile"></td></tr><tr><td align="left">SRecode Template</td><td align="left">#348a34</td><td align="left"><img src="https://img.shields.io/badge/SRecode_Template-348a34.svg" alt="SRecode Template"></td></tr><tr><td align="left">D</td><td align="left">#ba595e</td><td align="left"><img src="https://img.shields.io/badge/D-ba595e.svg" alt="D"></td></tr><tr><td align="left">PowerBuilder</td><td align="left">#8f0f8d</td><td align="left"><img src="https://img.shields.io/badge/PowerBuilder-8f0f8d.svg" alt="PowerBuilder"></td></tr><tr><td align="left">Kotlin</td><td align="left">#F18E33</td><td align="left"><img src="https://img.shields.io/badge/Kotlin-F18E33.svg" alt="Kotlin"></td></tr><tr><td align="left">Opal</td><td align="left">#f7ede0</td><td align="left"><img src="https://img.shields.io/badge/Opal-f7ede0.svg" alt="Opal"></td></tr><tr><td align="left">TI Program</td><td align="left">#A0AA87</td><td align="left"><img src="https://img.shields.io/badge/TI_Program-A0AA87.svg" alt="TI Program"></td></tr><tr><td align="left">Crystal</td><td align="left">#000100</td><td align="left"><img src="https://img.shields.io/badge/Crystal-000100.svg" alt="Crystal"></td></tr><tr><td align="left">Objective-C</td><td align="left">#438eff</td><td align="left"><img src="https://img.shields.io/badge/Objective_C-438eff.svg" alt="Objective-C"></td></tr><tr><td align="left">Batchfile</td><td align="left">#C1F12E</td><td align="left"><img src="https://img.shields.io/badge/Batchfile-C1F12E.svg" alt="Batchfile"></td></tr><tr><td align="left">Oz</td><td align="left">#fab738</td><td align="left"><img src="https://img.shields.io/badge/Oz-fab738.svg" alt="Oz"></td></tr><tr><td align="left">Mirah</td><td align="left">#c7a938</td><td align="left"><img src="https://img.shields.io/badge/Mirah-c7a938.svg" alt="Mirah"></td></tr><tr><td align="left">ZIL</td><td align="left">#dc75e5</td><td align="left"><img src="https://img.shields.io/badge/ZIL-dc75e5.svg" alt="ZIL"></td></tr><tr><td align="left">Objective-J</td><td align="left">#ff0c5a</td><td align="left"><img src="https://img.shields.io/badge/Objective_J-ff0c5a.svg" alt="Objective-J"></td></tr><tr><td align="left">ANTLR</td><td align="left">#9DC3FF</td><td align="left"><img src="https://img.shields.io/badge/ANTLR-9DC3FF.svg" alt="ANTLR"></td></tr><tr><td align="left">Roff</td><td align="left">#ecdebe</td><td align="left"><img src="https://img.shields.io/badge/Roff-ecdebe.svg" alt="Roff"></td></tr><tr><td align="left">Ragel</td><td align="left">#9d5200</td><td align="left"><img src="https://img.shields.io/badge/Ragel-9d5200.svg" alt="Ragel"></td></tr><tr><td align="left">FreeMarker</td><td align="left">#0050b2</td><td align="left"><img src="https://img.shields.io/badge/FreeMarker-0050b2.svg" alt="FreeMarker"></td></tr><tr><td align="left">Gosu</td><td align="left">#82937f</td><td align="left"><img src="https://img.shields.io/badge/Gosu-82937f.svg" alt="Gosu"></td></tr><tr><td align="left">Zig</td><td align="left">#ec915c</td><td align="left"><img src="https://img.shields.io/badge/Zig-ec915c.svg" alt="Zig"></td></tr><tr><td align="left">Ruby</td><td align="left">#701516</td><td align="left"><img src="https://img.shields.io/badge/Ruby-701516.svg" alt="Ruby"></td></tr><tr><td align="left">Nemerle</td><td align="left">#3d3c6e</td><td align="left"><img src="https://img.shields.io/badge/Nemerle-3d3c6e.svg" alt="Nemerle"></td></tr><tr><td align="left">Jupyter Notebook</td><td align="left">#DA5B0B</td><td align="left"><img src="https://img.shields.io/badge/Jupyter_Notebook-DA5B0B.svg" alt="Jupyter Notebook"></td></tr><tr><td align="left">Component Pascal</td><td align="left">#B0CE4E</td><td align="left"><img src="https://img.shields.io/badge/Component_Pascal-B0CE4E.svg" alt="Component Pascal"></td></tr><tr><td align="left">Nextflow</td><td align="left">#3ac486</td><td align="left"><img src="https://img.shields.io/badge/Nextflow-3ac486.svg" alt="Nextflow"></td></tr><tr><td align="left">Brainfuck</td><td align="left">#2F2530</td><td align="left"><img src="https://img.shields.io/badge/Brainfuck-2F2530.svg" alt="Brainfuck"></td></tr><tr><td align="left">SystemVerilog</td><td align="left">#DAE1C2</td><td align="left"><img src="https://img.shields.io/badge/SystemVerilog-DAE1C2.svg" alt="SystemVerilog"></td></tr><tr><td align="left">APL</td><td align="left">#5A8164</td><td align="left"><img src="https://img.shields.io/badge/APL-5A8164.svg" alt="APL"></td></tr><tr><td align="left">Hack</td><td align="left">#878787</td><td align="left"><img src="https://img.shields.io/badge/Hack-878787.svg" alt="Hack"></td></tr><tr><td align="left">Go</td><td align="left">#00ADD8</td><td align="left"><img src="https://img.shields.io/badge/Go-00ADD8.svg" alt="Go"></td></tr><tr><td align="left">Ring</td><td align="left">#2D54CB</td><td align="left"><img src="https://img.shields.io/badge/Ring-2D54CB.svg" alt="Ring"></td></tr><tr><td align="left">PHP</td><td align="left">#4F5D95</td><td align="left"><img src="https://img.shields.io/badge/PHP-4F5D95.svg" alt="PHP"></td></tr><tr><td align="left">Cirru</td><td align="left">#ccccff</td><td align="left"><img src="https://img.shields.io/badge/Cirru-ccccff.svg" alt="Cirru"></td></tr><tr><td align="left">SQF</td><td align="left">#3F3F3F</td><td align="left"><img src="https://img.shields.io/badge/SQF-3F3F3F.svg" alt="SQF"></td></tr><tr><td align="left">ZAP</td><td align="left">#0d665e</td><td align="left"><img src="https://img.shields.io/badge/ZAP-0d665e.svg" alt="ZAP"></td></tr><tr><td align="left">Glyph</td><td align="left">#c1ac7f</td><td align="left"><img src="https://img.shields.io/badge/Glyph-c1ac7f.svg" alt="Glyph"></td></tr><tr><td align="left">1C Enterprise</td><td align="left">#814CCC</td><td align="left"><img src="https://img.shields.io/badge/1C_Enterprise-814CCC.svg" alt="1C Enterprise"></td></tr><tr><td align="left">WebAssembly</td><td align="left">#04133b</td><td align="left"><img src="https://img.shields.io/badge/WebAssembly-04133b.svg" alt="WebAssembly"></td></tr><tr><td align="left">Java</td><td align="left">#b07219</td><td align="left"><img src="https://img.shields.io/badge/Java-b07219.svg" alt="Java"></td></tr><tr><td align="left">MAXScript</td><td align="left">#00a6a6</td><td align="left"><img src="https://img.shields.io/badge/MAXScript-00a6a6.svg" alt="MAXScript"></td></tr><tr><td align="left">Scala</td><td align="left">#c22d40</td><td align="left"><img src="https://img.shields.io/badge/Scala-c22d40.svg" alt="Scala"></td></tr><tr><td align="left">Makefile</td><td align="left">#427819</td><td align="left"><img src="https://img.shields.io/badge/Makefile-427819.svg" alt="Makefile"></td></tr><tr><td align="left">Perl</td><td align="left">#0298c3</td><td align="left"><img src="https://img.shields.io/badge/Perl-0298c3.svg" alt="Perl"></td></tr><tr><td align="left">Jsonnet</td><td align="left">#0064bd</td><td align="left"><img src="https://img.shields.io/badge/Jsonnet-0064bd.svg" alt="Jsonnet"></td></tr><tr><td align="left">Arc</td><td align="left">#aa2afe</td><td align="left"><img src="https://img.shields.io/badge/Arc-aa2afe.svg" alt="Arc"></td></tr><tr><td align="left">LLVM</td><td align="left">#185619</td><td align="left"><img src="https://img.shields.io/badge/LLVM-185619.svg" alt="LLVM"></td></tr><tr><td align="left">GDScript</td><td align="left">#355570</td><td align="left"><img src="https://img.shields.io/badge/GDScript-355570.svg" alt="GDScript"></td></tr><tr><td align="left">Verilog</td><td align="left">#b2b7f8</td><td align="left"><img src="https://img.shields.io/badge/Verilog-b2b7f8.svg" alt="Verilog"></td></tr><tr><td align="left">Factor</td><td align="left">#636746</td><td align="left"><img src="https://img.shields.io/badge/Factor-636746.svg" alt="Factor"></td></tr><tr><td align="left">Haxe</td><td align="left">#df7900</td><td align="left"><img src="https://img.shields.io/badge/Haxe-df7900.svg" alt="Haxe"></td></tr><tr><td align="left">Forth</td><td align="left">#341708</td><td align="left"><img src="https://img.shields.io/badge/Forth-341708.svg" alt="Forth"></td></tr><tr><td align="left">Red</td><td align="left">#f50000</td><td align="left"><img src="https://img.shields.io/badge/Red-f50000.svg" alt="Red"></td></tr><tr><td align="left">YARA</td><td align="left">#220000</td><td align="left"><img src="https://img.shields.io/badge/YARA-220000.svg" alt="YARA"></td></tr><tr><td align="left">Hy</td><td align="left">#7790B2</td><td align="left"><img src="https://img.shields.io/badge/Hy-7790B2.svg" alt="Hy"></td></tr><tr><td align="left">mcfunction</td><td align="left">#E22837</td><td align="left"><img src="https://img.shields.io/badge/mcfunction-E22837.svg" alt="mcfunction"></td></tr><tr><td align="left">Volt</td><td align="left">#1F1F1F</td><td align="left"><img src="https://img.shields.io/badge/Volt-1F1F1F.svg" alt="Volt"></td></tr><tr><td align="left">AngelScript</td><td align="left">#C7D7DC</td><td align="left"><img src="https://img.shields.io/badge/AngelScript-C7D7DC.svg" alt="AngelScript"></td></tr><tr><td align="left">LSL</td><td align="left">#3d9970</td><td align="left"><img src="https://img.shields.io/badge/LSL-3d9970.svg" alt="LSL"></td></tr><tr><td align="left">eC</td><td align="left">#913960</td><td align="left"><img src="https://img.shields.io/badge/eC-913960.svg" alt="eC"></td></tr><tr><td align="left">Terra</td><td align="left">#00004c</td><td align="left"><img src="https://img.shields.io/badge/Terra-00004c.svg" alt="Terra"></td></tr><tr><td align="left">CoffeeScript</td><td align="left">#244776</td><td align="left"><img src="https://img.shields.io/badge/CoffeeScript-244776.svg" alt="CoffeeScript"></td></tr><tr><td align="left">HTML</td><td align="left">#e34c26</td><td align="left"><img src="https://img.shields.io/badge/HTML-e34c26.svg" alt="HTML"></td></tr><tr><td align="left">Lex</td><td align="left">#DBCA00</td><td align="left"><img src="https://img.shields.io/badge/Lex-DBCA00.svg" alt="Lex"></td></tr><tr><td align="left">UnrealScript</td><td align="left">#a54c4d</td><td align="left"><img src="https://img.shields.io/badge/UnrealScript-a54c4d.svg" alt="UnrealScript"></td></tr><tr><td align="left">Idris</td><td align="left">#b30000</td><td align="left"><img src="https://img.shields.io/badge/Idris-b30000.svg" alt="Idris"></td></tr><tr><td align="left">Swift</td><td align="left">#ffac45</td><td align="left"><img src="https://img.shields.io/badge/Swift-ffac45.svg" alt="Swift"></td></tr><tr><td align="left">Modula-3</td><td align="left">#223388</td><td align="left"><img src="https://img.shields.io/badge/Modula_3-223388.svg" alt="Modula-3"></td></tr><tr><td align="left">C</td><td align="left">#555555</td><td align="left"><img src="https://img.shields.io/badge/C-555555.svg" alt="C"></td></tr><tr><td align="left">AutoHotkey</td><td align="left">#6594b9</td><td align="left"><img src="https://img.shields.io/badge/AutoHotkey-6594b9.svg" alt="AutoHotkey"></td></tr><tr><td align="left">P4</td><td align="left">#7055b5</td><td align="left"><img src="https://img.shields.io/badge/P4-7055b5.svg" alt="P4"></td></tr><tr><td align="left">Isabelle</td><td align="left">#FEFE00</td><td align="left"><img src="https://img.shields.io/badge/Isabelle-FEFE00.svg" alt="Isabelle"></td></tr><tr><td align="left">G-code</td><td align="left">#D08CF2</td><td align="left"><img src="https://img.shields.io/badge/G_code-D08CF2.svg" alt="G-code"></td></tr><tr><td align="left">Metal</td><td align="left">#8f14e9</td><td align="left"><img src="https://img.shields.io/badge/Metal-8f14e9.svg" alt="Metal"></td></tr><tr><td align="left">Clarion</td><td align="left">#db901e</td><td align="left"><img src="https://img.shields.io/badge/Clarion-db901e.svg" alt="Clarion"></td></tr><tr><td align="left">Vue</td><td align="left">#2c3e50</td><td align="left"><img src="https://img.shields.io/badge/Vue-2c3e50.svg" alt="Vue"></td></tr><tr><td align="left">JSONiq</td><td align="left">#40d47e</td><td align="left"><img src="https://img.shields.io/badge/JSONiq-40d47e.svg" alt="JSONiq"></td></tr><tr><td align="left">Boo</td><td align="left">#d4bec1</td><td align="left"><img src="https://img.shields.io/badge/Boo-d4bec1.svg" alt="Boo"></td></tr><tr><td align="left">AutoIt</td><td align="left">#1C3552</td><td align="left"><img src="https://img.shields.io/badge/AutoIt-1C3552.svg" alt="AutoIt"></td></tr><tr><td align="left">Genie</td><td align="left">#fb855d</td><td align="left"><img src="https://img.shields.io/badge/Genie-fb855d.svg" alt="Genie"></td></tr><tr><td align="left">Clojure</td><td align="left">#db5855</td><td align="left"><img src="https://img.shields.io/badge/Clojure-db5855.svg" alt="Clojure"></td></tr><tr><td align="left">EQ</td><td align="left">#a78649</td><td align="left"><img src="https://img.shields.io/badge/EQ-a78649.svg" alt="EQ"></td></tr><tr><td align="left">Visual Basic</td><td align="left">#945db7</td><td align="left"><img src="https://img.shields.io/badge/Visual_Basic-945db7.svg" alt="Visual Basic"></td></tr><tr><td align="left">CSS</td><td align="left">#563d7c</td><td align="left"><img src="https://img.shields.io/badge/CSS-563d7c.svg" alt="CSS"></td></tr><tr><td align="left">Prolog</td><td align="left">#74283c</td><td align="left"><img src="https://img.shields.io/badge/Prolog-74283c.svg" alt="Prolog"></td></tr><tr><td align="left">SourcePawn</td><td align="left">#5c7611</td><td align="left"><img src="https://img.shields.io/badge/SourcePawn-5c7611.svg" alt="SourcePawn"></td></tr><tr><td align="left">AMPL</td><td align="left">#E6EFBB</td><td align="left"><img src="https://img.shields.io/badge/AMPL-E6EFBB.svg" alt="AMPL"></td></tr><tr><td align="left">Shen</td><td align="left">#120F14</td><td align="left"><img src="https://img.shields.io/badge/Shen-120F14.svg" alt="Shen"></td></tr><tr><td align="left">wdl</td><td align="left">#42f1f4</td><td align="left"><img src="https://img.shields.io/badge/wdl-42f1f4.svg" alt="wdl"></td></tr><tr><td align="left">Harbour</td><td align="left">#0e60e3</td><td align="left"><img src="https://img.shields.io/badge/Harbour-0e60e3.svg" alt="Harbour"></td></tr><tr><td align="left">Yacc</td><td align="left">#4B6C4B</td><td align="left"><img src="https://img.shields.io/badge/Yacc-4B6C4B.svg" alt="Yacc"></td></tr><tr><td align="left">Tcl</td><td align="left">#e4cc98</td><td align="left"><img src="https://img.shields.io/badge/Tcl-e4cc98.svg" alt="Tcl"></td></tr><tr><td align="left">Quake</td><td align="left">#882233</td><td align="left"><img src="https://img.shields.io/badge/Quake-882233.svg" alt="Quake"></td></tr><tr><td align="left">BlitzMax</td><td align="left">#cd6400</td><td align="left"><img src="https://img.shields.io/badge/BlitzMax-cd6400.svg" alt="BlitzMax"></td></tr><tr><td align="left">PigLatin</td><td align="left">#fcd7de</td><td align="left"><img src="https://img.shields.io/badge/PigLatin-fcd7de.svg" alt="PigLatin"></td></tr><tr><td align="left">xBase</td><td align="left">#403a40</td><td align="left"><img src="https://img.shields.io/badge/xBase-403a40.svg" alt="xBase"></td></tr><tr><td align="left">Lasso</td><td align="left">#999999</td><td align="left"><img src="https://img.shields.io/badge/Lasso-999999.svg" alt="Lasso"></td></tr><tr><td align="left">Processing</td><td align="left">#0096D8</td><td align="left"><img src="https://img.shields.io/badge/Processing-0096D8.svg" alt="Processing"></td></tr><tr><td align="left">VHDL</td><td align="left">#adb2cb</td><td align="left"><img src="https://img.shields.io/badge/VHDL-adb2cb.svg" alt="VHDL"></td></tr><tr><td align="left">Elm</td><td align="left">#60B5CC</td><td align="left"><img src="https://img.shields.io/badge/Elm-60B5CC.svg" alt="Elm"></td></tr><tr><td align="left">Dhall</td><td align="left">#dfafff</td><td align="left"><img src="https://img.shields.io/badge/Dhall-dfafff.svg" alt="Dhall"></td></tr><tr><td align="left">Propeller Spin</td><td align="left">#7fa2a7</td><td align="left"><img src="https://img.shields.io/badge/Propeller_Spin-7fa2a7.svg" alt="Propeller Spin"></td></tr><tr><td align="left">Rascal</td><td align="left">#fffaa0</td><td align="left"><img src="https://img.shields.io/badge/Rascal-fffaa0.svg" alt="Rascal"></td></tr><tr><td align="left">Alloy</td><td align="left">#64C800</td><td align="left"><img src="https://img.shields.io/badge/Alloy-64C800.svg" alt="Alloy"></td></tr><tr><td align="left">IDL</td><td align="left">#a3522f</td><td align="left"><img src="https://img.shields.io/badge/IDL-a3522f.svg" alt="IDL"></td></tr><tr><td align="left">Slice</td><td align="left">#003fa2</td><td align="left"><img src="https://img.shields.io/badge/Slice-003fa2.svg" alt="Slice"></td></tr><tr><td align="left">YASnippet</td><td align="left">#32AB90</td><td align="left"><img src="https://img.shields.io/badge/YASnippet-32AB90.svg" alt="YASnippet"></td></tr><tr><td align="left">ATS</td><td align="left">#1ac620</td><td align="left"><img src="https://img.shields.io/badge/ATS-1ac620.svg" alt="ATS"></td></tr><tr><td align="left">Ada</td><td align="left">#02f88c</td><td align="left"><img src="https://img.shields.io/badge/Ada-02f88c.svg" alt="Ada"></td></tr><tr><td align="left">Nu</td><td align="left">#c9df40</td><td align="left"><img src="https://img.shields.io/badge/Nu-c9df40.svg" alt="Nu"></td></tr><tr><td align="left">LFE</td><td align="left">#4C3023</td><td align="left"><img src="https://img.shields.io/badge/LFE-4C3023.svg" alt="LFE"></td></tr><tr><td align="left">SuperCollider</td><td align="left">#46390b</td><td align="left"><img src="https://img.shields.io/badge/SuperCollider-46390b.svg" alt="SuperCollider"></td></tr><tr><td align="left">Oxygene</td><td align="left">#cdd0e3</td><td align="left"><img src="https://img.shields.io/badge/Oxygene-cdd0e3.svg" alt="Oxygene"></td></tr><tr><td align="left">ASP</td><td align="left">#6a40fd</td><td align="left"><img src="https://img.shields.io/badge/ASP-6a40fd.svg" alt="ASP"></td></tr><tr><td align="left">Assembly</td><td align="left">#6E4C13</td><td align="left"><img src="https://img.shields.io/badge/Assembly-6E4C13.svg" alt="Assembly"></td></tr><tr><td align="left">Gnuplot</td><td align="left">#f0a9f0</td><td align="left"><img src="https://img.shields.io/badge/Gnuplot-f0a9f0.svg" alt="Gnuplot"></td></tr><tr><td align="left">FLUX</td><td align="left">#88ccff</td><td align="left"><img src="https://img.shields.io/badge/FLUX-88ccff.svg" alt="FLUX"></td></tr><tr><td align="left">C#</td><td align="left">#178600</td><td align="left"><img src="https://img.shields.io/badge/C%23-178600.svg" alt="C#"></td></tr><tr><td align="left">Turing</td><td align="left">#cf142b</td><td align="left"><img src="https://img.shields.io/badge/Turing-cf142b.svg" alt="Turing"></td></tr><tr><td align="left">Vala</td><td align="left">#fbe5cd</td><td align="left"><img src="https://img.shields.io/badge/Vala-fbe5cd.svg" alt="Vala"></td></tr><tr><td align="left">ECL</td><td align="left">#8a1267</td><td align="left"><img src="https://img.shields.io/badge/ECL-8a1267.svg" alt="ECL"></td></tr><tr><td align="left">ObjectScript</td><td align="left">#424893</td><td align="left"><img src="https://img.shields.io/badge/ObjectScript-424893.svg" alt="ObjectScript"></td></tr><tr><td align="left">NetLinx</td><td align="left">#0aa0ff</td><td align="left"><img src="https://img.shields.io/badge/NetLinx-0aa0ff.svg" alt="NetLinx"></td></tr><tr><td align="left">Perl 6</td><td align="left">#0000fb</td><td align="left"><img src="https://img.shields.io/badge/Perl_6-0000fb.svg" alt="Perl 6"></td></tr><tr><td align="left">MATLAB</td><td align="left">#e16737</td><td align="left"><img src="https://img.shields.io/badge/MATLAB-e16737.svg" alt="MATLAB"></td></tr><tr><td align="left">Emacs Lisp</td><td align="left">#c065db</td><td align="left"><img src="https://img.shields.io/badge/Emacs_Lisp-c065db.svg" alt="Emacs Lisp"></td></tr><tr><td align="left">Stan</td><td align="left">#b2011d</td><td align="left"><img src="https://img.shields.io/badge/Stan-b2011d.svg" alt="Stan"></td></tr><tr><td align="left">SaltStack</td><td align="left">#646464</td><td align="left"><img src="https://img.shields.io/badge/SaltStack-646464.svg" alt="SaltStack"></td></tr><tr><td align="left">Gherkin</td><td align="left">#5B2063</td><td align="left"><img src="https://img.shields.io/badge/Gherkin-5B2063.svg" alt="Gherkin"></td></tr><tr><td align="left">QML</td><td align="left">#44a51c</td><td align="left"><img src="https://img.shields.io/badge/QML-44a51c.svg" alt="QML"></td></tr><tr><td align="left">Pike</td><td align="left">#005390</td><td align="left"><img src="https://img.shields.io/badge/Pike-005390.svg" alt="Pike"></td></tr><tr><td align="left">DataWeave</td><td align="left">#003a52</td><td align="left"><img src="https://img.shields.io/badge/DataWeave-003a52.svg" alt="DataWeave"></td></tr><tr><td align="left">LOLCODE</td><td align="left">#cc9900</td><td align="left"><img src="https://img.shields.io/badge/LOLCODE-cc9900.svg" alt="LOLCODE"></td></tr><tr><td align="left">ooc</td><td align="left">#b0b77e</td><td align="left"><img src="https://img.shields.io/badge/ooc-b0b77e.svg" alt="ooc"></td></tr><tr><td align="left">XSLT</td><td align="left">#EB8CEB</td><td align="left"><img src="https://img.shields.io/badge/XSLT-EB8CEB.svg" alt="XSLT"></td></tr><tr><td align="left">XC</td><td align="left">#99DA07</td><td align="left"><img src="https://img.shields.io/badge/XC-99DA07.svg" alt="XC"></td></tr><tr><td align="left">J</td><td align="left">#9EEDFF</td><td align="left"><img src="https://img.shields.io/badge/J-9EEDFF.svg" alt="J"></td></tr><tr><td align="left">Mask</td><td align="left">#f97732</td><td align="left"><img src="https://img.shields.io/badge/Mask-f97732.svg" alt="Mask"></td></tr><tr><td align="left">EmberScript</td><td align="left">#FFF4F3</td><td align="left"><img src="https://img.shields.io/badge/EmberScript-FFF4F3.svg" alt="EmberScript"></td></tr><tr><td align="left">TeX</td><td align="left">#3D6117</td><td align="left"><img src="https://img.shields.io/badge/TeX-3D6117.svg" alt="TeX"></td></tr><tr><td align="left">Pep8</td><td align="left">#C76F5B</td><td align="left"><img src="https://img.shields.io/badge/Pep8-C76F5B.svg" alt="Pep8"></td></tr><tr><td align="left">R</td><td align="left">#198CE7</td><td align="left"><img src="https://img.shields.io/badge/R-198CE7.svg" alt="R"></td></tr><tr><td align="left">Cuda</td><td align="left">#3A4E3A</td><td align="left"><img src="https://img.shields.io/badge/Cuda-3A4E3A.svg" alt="Cuda"></td></tr><tr><td align="left">KRL</td><td align="left">#28430A</td><td align="left"><img src="https://img.shields.io/badge/KRL-28430A.svg" alt="KRL"></td></tr><tr><td align="left">Vim script</td><td align="left">#199f4b</td><td align="left"><img src="https://img.shields.io/badge/Vim_script-199f4b.svg" alt="Vim script"></td></tr><tr><td align="left">Lua</td><td align="left">#000080</td><td align="left"><img src="https://img.shields.io/badge/Lua-000080.svg" alt="Lua"></td></tr><tr><td align="left">Asymptote</td><td align="left">#4a0c0c</td><td align="left"><img src="https://img.shields.io/badge/Asymptote-4a0c0c.svg" alt="Asymptote"></td></tr><tr><td align="left">Ren’Py</td><td align="left">#ff7f7f</td><td align="left"><img src="https://img.shields.io/badge/Ren'Py-ff7f7f.svg" alt="Ren&#39;Py"></td></tr><tr><td align="left">Golo</td><td align="left">#88562A</td><td align="left"><img src="https://img.shields.io/badge/Golo-88562A.svg" alt="Golo"></td></tr><tr><td align="left">PostScript</td><td align="left">#da291c</td><td align="left"><img src="https://img.shields.io/badge/PostScript-da291c.svg" alt="PostScript"></td></tr><tr><td align="left">Fancy</td><td align="left">#7b9db4</td><td align="left"><img src="https://img.shields.io/badge/Fancy-7b9db4.svg" alt="Fancy"></td></tr><tr><td align="left">OCaml</td><td align="left">#3be133</td><td align="left"><img src="https://img.shields.io/badge/OCaml-3be133.svg" alt="OCaml"></td></tr><tr><td align="left">ColdFusion</td><td align="left">#ed2cd6</td><td align="left"><img src="https://img.shields.io/badge/ColdFusion-ed2cd6.svg" alt="ColdFusion"></td></tr><tr><td align="left">Pascal</td><td align="left">#E3F171</td><td align="left"><img src="https://img.shields.io/badge/Pascal-E3F171.svg" alt="Pascal"></td></tr><tr><td align="left">F#</td><td align="left">#b845fc</td><td align="left"><img src="https://img.shields.io/badge/F%23-b845fc.svg" alt="F#"></td></tr><tr><td align="left">API Blueprint</td><td align="left">#2ACCA8</td><td align="left"><img src="https://img.shields.io/badge/API_Blueprint-2ACCA8.svg" alt="API Blueprint"></td></tr><tr><td align="left">ActionScript</td><td align="left">#882B0F</td><td align="left"><img src="https://img.shields.io/badge/ActionScript-882B0F.svg" alt="ActionScript"></td></tr><tr><td align="left">F*</td><td align="left">#572e30</td><td align="left"><img src="https://img.shields.io/badge/F*-572e30.svg" alt="F*"></td></tr><tr><td align="left">Fantom</td><td align="left">#14253c</td><td align="left"><img src="https://img.shields.io/badge/Fantom-14253c.svg" alt="Fantom"></td></tr><tr><td align="left">Zephir</td><td align="left">#118f9e</td><td align="left"><img src="https://img.shields.io/badge/Zephir-118f9e.svg" alt="Zephir"></td></tr><tr><td align="left">Click</td><td align="left">#E4E6F3</td><td align="left"><img src="https://img.shields.io/badge/Click-E4E6F3.svg" alt="Click"></td></tr><tr><td align="left">Smalltalk</td><td align="left">#596706</td><td align="left"><img src="https://img.shields.io/badge/Smalltalk-596706.svg" alt="Smalltalk"></td></tr><tr><td align="left">Ballerina</td><td align="left">#FF5000</td><td align="left"><img src="https://img.shields.io/badge/Ballerina-FF5000.svg" alt="Ballerina"></td></tr><tr><td align="left">DM</td><td align="left">#447265</td><td align="left"><img src="https://img.shields.io/badge/DM-447265.svg" alt="DM"></td></tr><tr><td align="left">Ioke</td><td align="left">#078193</td><td align="left"><img src="https://img.shields.io/badge/Ioke-078193.svg" alt="Ioke"></td></tr><tr><td align="left">PogoScript</td><td align="left">#d80074</td><td align="left"><img src="https://img.shields.io/badge/PogoScript-d80074.svg" alt="PogoScript"></td></tr><tr><td align="left">LiveScript</td><td align="left">#499886</td><td align="left"><img src="https://img.shields.io/badge/LiveScript-499886.svg" alt="LiveScript"></td></tr><tr><td align="left">JavaScript</td><td align="left">#f1e05a</td><td align="left"><img src="https://img.shields.io/badge/JavaScript-f1e05a.svg" alt="JavaScript"></td></tr><tr><td align="left">Wollok</td><td align="left">#a23738</td><td align="left"><img src="https://img.shields.io/badge/Wollok-a23738.svg" alt="Wollok"></td></tr><tr><td align="left">Rust</td><td align="left">#dea584</td><td align="left"><img src="https://img.shields.io/badge/Rust-dea584.svg" alt="Rust"></td></tr><tr><td align="left">ABAP</td><td align="left">#E8274B</td><td align="left"><img src="https://img.shields.io/badge/ABAP-E8274B.svg" alt="ABAP"></td></tr><tr><td align="left">ZenScript</td><td align="left">#00BCD1</td><td align="left"><img src="https://img.shields.io/badge/ZenScript-00BCD1.svg" alt="ZenScript"></td></tr><tr><td align="left">Slash</td><td align="left">#007eff</td><td align="left"><img src="https://img.shields.io/badge/Slash-007eff.svg" alt="Slash"></td></tr><tr><td align="left">Erlang</td><td align="left">#B83998</td><td align="left"><img src="https://img.shields.io/badge/Erlang-B83998.svg" alt="Erlang"></td></tr><tr><td align="left">Pan</td><td align="left">#cc0000</td><td align="left"><img src="https://img.shields.io/badge/Pan-cc0000.svg" alt="Pan"></td></tr><tr><td align="left">LookML</td><td align="left">#652B81</td><td align="left"><img src="https://img.shields.io/badge/LookML-652B81.svg" alt="LookML"></td></tr><tr><td align="left">Scheme</td><td align="left">#1e4aec</td><td align="left"><img src="https://img.shields.io/badge/Scheme-1e4aec.svg" alt="Scheme"></td></tr><tr><td align="left">Squirrel</td><td align="left">#800000</td><td align="left"><img src="https://img.shields.io/badge/Squirrel-800000.svg" alt="Squirrel"></td></tr><tr><td align="left">Nim</td><td align="left">#37775b</td><td align="left"><img src="https://img.shields.io/badge/Nim-37775b.svg" alt="Nim"></td></tr><tr><td align="left">Python</td><td align="left">#3572A5</td><td align="left"><img src="https://img.shields.io/badge/Python-3572A5.svg" alt="Python"></td></tr><tr><td align="left">Max</td><td align="left">#c4a79c</td><td align="left"><img src="https://img.shields.io/badge/Max-c4a79c.svg" alt="Max"></td></tr><tr><td align="left">Solidity</td><td align="left">#AA6746</td><td align="left"><img src="https://img.shields.io/badge/Solidity-AA6746.svg" alt="Solidity"></td></tr><tr><td align="left">Common Lisp</td><td align="left">#3fb68b</td><td align="left"><img src="https://img.shields.io/badge/Common_Lisp-3fb68b.svg" alt="Common Lisp"></td></tr><tr><td align="left">Dart</td><td align="left">#00B4AB</td><td align="left"><img src="https://img.shields.io/badge/Dart-00B4AB.svg" alt="Dart"></td></tr><tr><td align="left">Nix</td><td align="left">#7e7eff</td><td align="left"><img src="https://img.shields.io/badge/Nix-7e7eff.svg" alt="Nix"></td></tr><tr><td align="left">Nearley</td><td align="left">#990000</td><td align="left"><img src="https://img.shields.io/badge/Nearley-990000.svg" alt="Nearley"></td></tr><tr><td align="left">Nit</td><td align="left">#009917</td><td align="left"><img src="https://img.shields.io/badge/Nit-009917.svg" alt="Nit"></td></tr><tr><td align="left">Chapel</td><td align="left">#8dc63f</td><td align="left"><img src="https://img.shields.io/badge/Chapel-8dc63f.svg" alt="Chapel"></td></tr><tr><td align="left">Groovy</td><td align="left">#e69f56</td><td align="left"><img src="https://img.shields.io/badge/Groovy-e69f56.svg" alt="Groovy"></td></tr><tr><td align="left">Dylan</td><td align="left">#6c616e</td><td align="left"><img src="https://img.shields.io/badge/Dylan-6c616e.svg" alt="Dylan"></td></tr><tr><td align="left">E</td><td align="left">#ccce35</td><td align="left"><img src="https://img.shields.io/badge/E-ccce35.svg" alt="E"></td></tr><tr><td align="left">Parrot</td><td align="left">#f3ca0a</td><td align="left"><img src="https://img.shields.io/badge/Parrot-f3ca0a.svg" alt="Parrot"></td></tr><tr><td align="left">Grammatical Framework</td><td align="left">#79aa7a</td><td align="left"><img src="https://img.shields.io/badge/Grammatical_Framework-79aa7a.svg" alt="Grammatical Framework"></td></tr><tr><td align="left">Game Maker Language</td><td align="left">#71b417</td><td align="left"><img src="https://img.shields.io/badge/Game_Maker_Language-71b417.svg" alt="Game Maker Language"></td></tr><tr><td align="left">VCL</td><td align="left">#148AA8</td><td align="left"><img src="https://img.shields.io/badge/VCL-148AA8.svg" alt="VCL"></td></tr><tr><td align="left">Papyrus</td><td align="left">#6600cc</td><td align="left"><img src="https://img.shields.io/badge/Papyrus-6600cc.svg" alt="Papyrus"></td></tr><tr><td align="left">C++</td><td align="left">#f34b7d</td><td align="left"><img src="https://img.shields.io/badge/C++-f34b7d.svg" alt="C++"></td></tr><tr><td align="left">NetLinx+ERB</td><td align="left">#747faa</td><td align="left"><img src="https://img.shields.io/badge/NetLinx+ERB-747faa.svg" alt="NetLinx+ERB"></td></tr><tr><td align="left">Common Workflow Language</td><td align="left">#B5314C</td><td align="left"><img src="https://img.shields.io/badge/Common_Workflow_Language-B5314C.svg" alt="Common Workflow Language"></td></tr><tr><td align="left">Clean</td><td align="left">#3F85AF</td><td align="left"><img src="https://img.shields.io/badge/Clean-3F85AF.svg" alt="Clean"></td></tr><tr><td align="left">X10</td><td align="left">#4B6BEF</td><td align="left"><img src="https://img.shields.io/badge/X10-4B6BEF.svg" alt="X10"></td></tr><tr><td align="left">Puppet</td><td align="left">#302B6D</td><td align="left"><img src="https://img.shields.io/badge/Puppet-302B6D.svg" alt="Puppet"></td></tr><tr><td align="left">Jolie</td><td align="left">#843179</td><td align="left"><img src="https://img.shields.io/badge/Jolie-843179.svg" alt="Jolie"></td></tr><tr><td align="left">PLSQL</td><td align="left">#dad8d8</td><td align="left"><img src="https://img.shields.io/badge/PLSQL-dad8d8.svg" alt="PLSQL"></td></tr><tr><td align="left">sed</td><td align="left">#64b970</td><td align="left"><img src="https://img.shields.io/badge/sed-64b970.svg" alt="sed"></td></tr><tr><td align="left">Pawn</td><td align="left">#dbb284</td><td align="left"><img src="https://img.shields.io/badge/Pawn-dbb284.svg" alt="Pawn"></td></tr><tr><td align="left">Standard ML</td><td align="left">#dc566d</td><td align="left"><img src="https://img.shields.io/badge/Standard_ML-dc566d.svg" alt="Standard ML"></td></tr><tr><td align="left">PureScript</td><td align="left">#1D222D</td><td align="left"><img src="https://img.shields.io/badge/PureScript-1D222D.svg" alt="PureScript"></td></tr><tr><td align="left">Julia</td><td align="left">#a270ba</td><td align="left"><img src="https://img.shields.io/badge/Julia-a270ba.svg" alt="Julia"></td></tr><tr><td align="left">nesC</td><td align="left">#94B0C7</td><td align="left"><img src="https://img.shields.io/badge/nesC-94B0C7.svg" alt="nesC"></td></tr><tr><td align="left">q</td><td align="left">#0040cd</td><td align="left"><img src="https://img.shields.io/badge/q-0040cd.svg" alt="q"></td></tr><tr><td align="left">Haskell</td><td align="left">#5e5086</td><td align="left"><img src="https://img.shields.io/badge/Haskell-5e5086.svg" alt="Haskell"></td></tr><tr><td align="left">NCL</td><td align="left">#28431f</td><td align="left"><img src="https://img.shields.io/badge/NCL-28431f.svg" alt="NCL"></td></tr><tr><td align="left">Io</td><td align="left">#a9188d</td><td align="left"><img src="https://img.shields.io/badge/Io-a9188d.svg" alt="Io"></td></tr><tr><td align="left">Rouge</td><td align="left">#cc0088</td><td align="left"><img src="https://img.shields.io/badge/Rouge-cc0088.svg" alt="Rouge"></td></tr><tr><td align="left">Racket</td><td align="left">#3c5caa</td><td align="left"><img src="https://img.shields.io/badge/Racket-3c5caa.svg" alt="Racket"></td></tr><tr><td align="left">NetLogo</td><td align="left">#ff6375</td><td align="left"><img src="https://img.shields.io/badge/NetLogo-ff6375.svg" alt="NetLogo"></td></tr><tr><td align="left">AGS Script</td><td align="left">#B9D9FF</td><td align="left"><img src="https://img.shields.io/badge/AGS_Script-B9D9FF.svg" alt="AGS Script"></td></tr><tr><td align="left">Meson</td><td align="left">#007800</td><td align="left"><img src="https://img.shields.io/badge/Meson-007800.svg" alt="Meson"></td></tr><tr><td align="left">Dogescript</td><td align="left">#cca760</td><td align="left"><img src="https://img.shields.io/badge/Dogescript-cca760.svg" alt="Dogescript"></td></tr><tr><td align="left">PowerShell</td><td align="left">#012456</td><td align="left"><img src="https://img.shields.io/badge/PowerShell-012456.svg" alt="PowerShell"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 素材 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 色彩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Ultimate-Spider全方位解析数据采集系统的基本知识</title>
      <link href="/2020/02/04/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/04/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Ultimate Spider【终极蜘蛛王】，一款用于网络数据采集的工具。本文对Ultimate Spider的整体架构和一些技术亮点作说明。</p><span id="more"></span><p>Ultimate Spider主要页面有：1、用来展示概览信息的仪表盘页；2、爬虫配置页。</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E4%BB%AA%E8%A1%A8%E7%9B%98%E9%A1%B5.png" alt="仪表盘页"></p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E7%88%AC%E8%99%AB%E9%85%8D%E7%BD%AE%E9%A1%B5.png" alt="爬虫配置页"></p><p>整体架构如下图所示：</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="整体架构"></p><h2 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h2><p>在WebMagic爬虫框架的基础上对初始Url和爬取内容进行可视化配置，爬取规则的制定更加灵活多变，适应范围更广。</p><ul><li>SpiderProcessor.java 根据爬取规则进行爬取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;SpiderProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiderProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpiderProperties spiderProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String spiderName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Crawler crawler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpiderProcessor</span><span class="params">(SpiderProperties spiderProperties, String spiderName, Crawler crawler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spiderProperties = spiderProperties;</span><br><span class="line">        <span class="keyword">this</span>.spiderName = spiderName;</span><br><span class="line">        <span class="keyword">this</span>.crawler = crawler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(crawler.getCrawlConfigs())) &#123;</span><br><span class="line">            page.putField(Constants.SPIDER_NAME, spiderName);</span><br><span class="line">            JSONObject content = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="keyword">for</span> (Crawler.CrawlConfig crawlConfig : crawler.getCrawlConfigs()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(crawlConfig.getCrawlRules())) &#123;</span><br><span class="line">                    Selectable selector = page.getHtml();</span><br><span class="line">                    <span class="keyword">for</span> (Crawler.CrawlRule crawlRule : crawlConfig.getCrawlRules()) &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (crawlRule.getCrawlType()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> XPATH:</span><br><span class="line">                                selector = selector.xpath(crawlRule.getRule());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> CSS:</span><br><span class="line">                                <span class="keyword">if</span> (StringUtils.isBlank(crawlRule.getAttr())) &#123;</span><br><span class="line">                                    selector = selector.css(crawlRule.getRule());</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    selector = selector.css(crawlRule.getRule(), crawlRule.getAttr());</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> LINKS:</span><br><span class="line">                                selector = selector.links();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REGEX:</span><br><span class="line">                                selector = selector.regex(crawlRule.getRule());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REGEX_WITH_GROUP:</span><br><span class="line">                                selector = selector.regex(crawlRule.getRule(), crawlRule.getGroup());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REPLACE:</span><br><span class="line">                                selector = selector.replace(crawlRule.getRule(), crawlRule.getReplacement());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                log.warn(<span class="string">&quot;not support crawl rule type: &#123;&#125;&quot;</span>, crawlRule.getCrawlType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (crawlConfig.isMultiResult()) &#123;</span><br><span class="line">                        List&lt;String&gt; value = selector.all();</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.isNullSkip() &amp;&amp; CollectionUtils.isEmpty(value)) &#123;</span><br><span class="line">                            page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TARGET_URL) &#123;</span><br><span class="line">                            page.addTargetRequests(value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TEXT) &#123;</span><br><span class="line">                            content.put(crawlConfig.getCrawlKey(), value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;not support crawl result type: &#123;&#125;&quot;</span>, crawlConfig.getCrawlResultType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        String value = selector.get();</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.isNullSkip() &amp;&amp; StringUtils.isBlank(value)) &#123;</span><br><span class="line">                            page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TARGET_URL) &#123;</span><br><span class="line">                            page.addTargetRequest(value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TEXT) &#123;</span><br><span class="line">                            content.put(crawlConfig.getCrawlKey(), value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;not support crawl result type: &#123;&#125;&quot;</span>, crawlConfig.getCrawlResultType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(Constants.CRAWL_AT, <span class="keyword">new</span> Date());</span><br><span class="line">            page.putField(Constants.SPIDER_CONTENT, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Site.me()</span><br><span class="line">                .setRetryTimes(spiderProperties.getRetryTimes())</span><br><span class="line">                .setRetrySleepTime(spiderProperties.getRetrySleepTime())</span><br><span class="line">                .setSleepTime(spiderProperties.getSleepTime())</span><br><span class="line">                .setTimeOut(spiderProperties.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爬虫执行"><a href="#爬虫执行" class="headerlink" title="爬虫执行"></a>爬虫执行</h2><p>使用Quartz定时任务框架完成爬虫任务的调度，可以随时暂停和恢复爬虫任务。</p><ul><li>TaskServiceImpl.java 爬虫任务服务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskServiceImpl</span> <span class="keyword">implements</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskRepository taskRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UltimateSpiderRepository ultimateSpiderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getSpiderTask</span><span class="params">(Integer spiderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(spiderId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        Task crawlTask = taskRepository.findOneBySpiderIdAndTaskType(spiderId, Task.TaskType.CRAWL);</span><br><span class="line">        Task cleanTask = taskRepository.findOneBySpiderIdAndTaskType(spiderId, Task.TaskType.CLEAN);</span><br><span class="line">        JSONObject spiderTask = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        spiderTask.fluentPut(Constants.CRAWL_TASK, crawlTask).fluentPut(Constants.CLEAN_TASK, cleanTask);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(spiderTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">saveTask</span><span class="params">(Task task)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!task.isValid(<span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            task.setJobStatus(Task.JobStatus.RUNNING);</span><br><span class="line">        &#125;</span><br><span class="line">        Task flushedTask = taskRepository.saveAndFlush(task);</span><br><span class="line">        UltimateSpider spider = ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        JobKey jobKey = JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus() == Task.JobStatus.RUNNING) &#123;</span><br><span class="line">            TriggerKey triggerKey = JobUtils.generateTriggerKey(spider, task.getTaskType());</span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(task.getCronExpression()))</span><br><span class="line">                    .withIdentity(triggerKey)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                JobDetail jobDetail = JobBuilder.newJob(task.getTaskType().getJobClass())</span><br><span class="line">                        .withIdentity(jobKey)</span><br><span class="line">                        .usingJobData(Constants.JOB_TASK_ID, flushedTask.getId())</span><br><span class="line">                        .storeDurably()</span><br><span class="line">                        .build();</span><br><span class="line">                scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.getJobStatus() == Task.JobStatus.PAUSE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                scheduler.pauseJob(jobKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(flushedTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">pauseTask</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        Task task = taskRepository.findOne(id);</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span> || !task.isValid(<span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.DATA_VALID_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        UltimateSpider spider = ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        JobKey jobKey = JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">            scheduler.pauseJob(jobKey);</span><br><span class="line">        &#125;</span><br><span class="line">        task.setJobStatus(Task.JobStatus.PAUSE);</span><br><span class="line">        taskRepository.save(task);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">resumeTask</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        Task task = taskRepository.findOne(id);</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span> || !task.isValid(<span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.DATA_VALID_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        resumeTask(task);</span><br><span class="line">        task.setJobStatus(Task.JobStatus.RUNNING);</span><br><span class="line">        taskRepository.save(task);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeTask</span><span class="params">(Task task)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        UltimateSpider spider = ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        JobKey jobKey = JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">            scheduler.resumeJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(task.getTaskType().getJobClass())</span><br><span class="line">                    .withIdentity(jobKey)</span><br><span class="line">                    .usingJobData(Constants.JOB_TASK_ID, task.getId())</span><br><span class="line">                    .storeDurably()</span><br><span class="line">                    .build();</span><br><span class="line">            TriggerKey triggerKey = JobUtils.generateTriggerKey(spider, task.getTaskType());</span><br><span class="line">            Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(task.getCronExpression()))</span><br><span class="line">                    .withIdentity(triggerKey)</span><br><span class="line">                    .build();</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>数据清洗任务同样使用Quartz进行调度，确保爬取数据的质量。清洗规则同样可在页面上进行配置。</p><ul><li>CleanerJob.java 清洗任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanerJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UltimateSpiderRepository ultimateSpiderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskRepository taskRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CleanerRepository cleanerRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        Integer taskId = (Integer) jobExecutionContext.getJobDetail().getJobDataMap().get(Constants.JOB_TASK_ID);</span><br><span class="line">        Task task = taskRepository.findOne(taskId);</span><br><span class="line">        UltimateSpider ultimateSpider = ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        Cleaner cleaner = cleanerRepository.findOneBySpiderId(task.getSpiderId());</span><br><span class="line">        <span class="keyword">if</span> (cleaner == <span class="keyword">null</span> || !cleaner.isValid(<span class="keyword">true</span>)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;[&#123;&#125;] cleaner is invalid&quot;</span>, ultimateSpider.getSpiderName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;] cleaner start&quot;</span>, ultimateSpider.getSpiderName());</span><br><span class="line">        List&lt;JSONObject&gt; purgeList = Lists.newArrayList();</span><br><span class="line">        List&lt;JSONObject&gt; mergeList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (Cleaner.CleanerRule cleanerRule : cleaner.getCleanerRules()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cleanerRule.getCleanType() == Cleaner.CleanType.MERGE) &#123;</span><br><span class="line">                List&lt;JSONObject&gt; queryResult = mongoTemplate.find(<span class="keyword">new</span> BasicQuery(cleanerRule.getQueryRule()),</span><br><span class="line">                        JSONObject.class, ultimateSpider.getSpiderName());</span><br><span class="line">                Map&lt;String, List&lt;JSONObject&gt;&gt; mergeMap = Maps.newHashMap();</span><br><span class="line">                queryResult.forEach(result -&gt; &#123;</span><br><span class="line">                    List&lt;String&gt; keyItems = Lists.newLinkedList();</span><br><span class="line">                    <span class="keyword">for</span> (String distinctKey : cleanerRule.getDistinctKeys()) &#123;</span><br><span class="line">                        StringBuilder keyItemBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                        <span class="keyword">if</span> (!result.containsKey(distinctKey)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        keyItemBuilder.append(distinctKey).append(Constants.MERGE_KEY_DELIMITER).append(result.get(distinctKey));</span><br><span class="line">                        keyItems.add(keyItemBuilder.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (keyItems.size() == cleanerRule.getDistinctKeys().size()) &#123;</span><br><span class="line">                        String mergeKey = StringUtils.join(Constants.MERGE_VALUE_DELIMITER, keyItems);</span><br><span class="line">                        List&lt;JSONObject&gt; resultMergeList = mergeMap.getOrDefault(mergeKey, Lists.newArrayList());</span><br><span class="line">                        resultMergeList.add(result);</span><br><span class="line">                        mergeMap.putIfAbsent(mergeKey, Lists.newArrayList());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                mergeMap.forEach((mergeKey, resultMergeList) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resultMergeList.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        purgeList.addAll(resultMergeList);</span><br><span class="line">                        JSONObject mergeResult = resultMergeList.get(<span class="number">0</span>);</span><br><span class="line">                        resultMergeList.remove(<span class="number">0</span>);</span><br><span class="line">                        resultMergeList.forEach(result -&gt; &#123;</span><br><span class="line">                            <span class="keyword">for</span> (String resultMergeKey : cleanerRule.getMergeKeys()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (mergeResult.get(resultMergeKey) <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">                                    JSONArray jsonArray = (JSONArray) mergeResult.getOrDefault(resultMergeKey, <span class="keyword">new</span> JSONArray());</span><br><span class="line">                                    <span class="keyword">if</span> (!jsonArray.contains(result.get(resultMergeKey))) &#123;</span><br><span class="line">                                        jsonArray.add(result.get(resultMergeKey));</span><br><span class="line">                                        mergeResult.put(resultMergeKey, jsonArray);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">                                    jsonArray.add(mergeResult.get(resultMergeKey));</span><br><span class="line">                                    jsonArray.add(result.get(resultMergeKey));</span><br><span class="line">                                    mergeResult.put(resultMergeKey, jsonArray);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        mergeList.add(mergeResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cleanerRule.getCleanType() == Cleaner.CleanType.PURGE) &#123;</span><br><span class="line">                purgeList.addAll(mongoTemplate.find(<span class="keyword">new</span> BasicQuery(cleanerRule.getQueryRule()),</span><br><span class="line">                        JSONObject.class, ultimateSpider.getSpiderName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        purgeList.forEach(purgeObject -&gt; mongoTemplate.remove(purgeObject, ultimateSpider.getSpiderName()));</span><br><span class="line">        mergeList.forEach(mergeObject -&gt; mongoTemplate.save(mergeObject, ultimateSpider.getSpiderName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>使用RabbitMQ消息队列异步保存爬取结果至MongoDB文档型数据库，性能更好，更适合格式多变的爬取结果的存储。</p><ul><li>消息消费者存储爬取结果至MongoDB</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = Constants.QUEUE_NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String spiderResultJson)</span> </span>&#123;</span><br><span class="line">        SpiderResult spiderResult = JSON.parseObject(spiderResultJson, SpiderResult.class);</span><br><span class="line">        log.info(<span class="string">&quot;queue: &#123;&#125;, spider_result: &#123;&#125;&quot;</span>, Constants.QUEUE_NAME, spiderResult);</span><br><span class="line">        mongoTemplate.save(spiderResult.getContent(), spiderResult.getSpiderName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>使用较为成熟的Metabase进行采集数据的可视化。</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/Metabase%E9%87%87%E9%9B%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png" alt="Metabase采集数据可视化"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebMagic </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最佳日志实践</title>
      <link href="/2020/02/04/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/04/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://zhuanlan.zhihu.com/p/27363484">最佳日志实践（v2.0）</a></p></blockquote><h2 id="什么是日志"><a href="#什么是日志" class="headerlink" title="什么是日志"></a>什么是日志</h2><p>日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而，由于日志通常不属于系统的核心功能，所以常常不被团队成员所重视。对于一些简单的小程序，可能并不需要在如何记录日志的问题上花费太多精力。但是对于作为基础平台为很多产品提供服务的后端程序，就必须要考虑如何依靠良好的日志来保证系统可靠的运行了。</p><span id="more"></span><p>好的日志可以帮助系统的开发和运维人员：</p><ol><li>了解线上系统的运行状态</li><li>快速准确定位线上问题</li><li>发现系统瓶颈</li><li>预警系统潜在风险</li><li>挖掘产品最大价值</li><li>……</li></ol><p>不好的日志导致：</p><ol><li>对系统的运行状态一知半解，甚至一无所知</li><li>系统出现问题无法定位，或者需要花费巨大的时间和精力</li><li>无法发现系统瓶颈，不知优化从何做起</li><li>无法基于日志对系统运行过程中的错误和潜在风险进行监控和报警</li><li>对挖掘用户行为和提升产品价值毫无帮助</li><li>……</li></ol><h2 id="日志的分类"><a href="#日志的分类" class="headerlink" title="日志的分类"></a>日志的分类</h2><p>日志从功能来说，可分为诊断日志、统计日志、审计日志。</p><p><strong>诊断日志， 典型的有：</strong></p><ul><li>请求入口和出口</li><li>外部服务调用和返回</li><li>资源消耗操作: 如读写文件等</li><li>容错行为： 如云硬盘的副本修复操作</li><li>程序异常： 如数据库无法连接</li><li>后台操作：定期执行删除的线程</li><li>启动、关闭、配置加载</li></ul><p><strong>统计日志：</strong></p><ul><li>用户访问统计：用户IP、上传下载的数据量，请求耗时等</li><li>计费日志（如记录用户使用的网络资源或磁盘占用，格式较为严格，便于统计）</li></ul><p><strong>审计日志：</strong></p><ul><li>管理操作</li></ul><p>对于简单的系统，可以将所有的日志输出到同一个日志文件中，并通过不同的关键字进行区分。而对于复杂的系统，将不同需求的日志输出到不同的日志文件中是必要的，通过对不同类型的文件采用不同的日志格式（例如对于计费日志可以直接输出为Json格式），可以方便接入其他的子系统。</p><h2 id="日志中记录什么"><a href="#日志中记录什么" class="headerlink" title="日志中记录什么"></a>日志中记录什么</h2><p>理想的日志中应该记录<strong>不多不少</strong>的信息。</p><p>所谓不多，是指不要在日志中记录无用的信息。实践中常见到的无用的日志有：</p><ol><li>能够放在一条日志里的东西，放在多条日志中输出；</li><li>预期会发生且能够被正常处理的异常，打印出一堆无用的堆栈；</li><li>开发人员在开发过程中为了调试方便而加入的“临时”日志</li></ol><p>所谓不少，是指对于日志的使用者，能够从日志中得到所有需要的信息。在实践中经常发生日志不够的情况，例如：</p><ol><li>请求出错时不能通过日志直接来定位问题，而需要开发人员再临时增加日志并要求请求的发送者重新发送同样的请求才能定位问题；</li><li>无法确定服务中的后台任务是否按照期望执行；</li><li>无法确定服务的内存数据结构的状态；</li><li>无法确定服务的异常处理逻辑（如重试）是否正确执行；</li><li>无法确定服务启动时配置是否正确加载；</li><li>等等等等</li></ol><p>输出日志时要考虑日志的使用者，例如如果日志主要由系统的运维人员来看，那就不能输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, ErrorCode:1426 </span><br></pre></td></tr></table></figure><p>至少应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, ErrorCode:1426, Message: callback request (to http://example.com/callback) failed due to socket timeout</span><br></pre></td></tr></table></figure><p>这样运维人员一眼就能清楚问题的原因，而不需要再通过开发来查看ErrorCode对应的具体错误。</p><p>整理一下通常情况下会遗漏的日志：</p><ol><li><p>系统的配置参数：系统在启动过程中通常会首先读启动参数，可以在系统启动后将这些参数输出到日志中，方便确认系统是按照期望的参数启动的；</p></li><li><p>后台定期执行的任务：如定期更新缓存的任务，可以记录任务开始时间，任务结束时间，更新了多少条缓存配置等等，这样可以掌握定期执行的任务的状态；</p></li><li><p>异常处理逻辑：如对于分布式存储系统来说，当系统在一个存储节点上读数据失败时，需要去另一个数据节点上进行重试，可以将读数据失败这件事情记录下来，之后可以通过对日志的分析确认是否某些节点的磁盘可能存在故障。再比如，如果系统需要请求一个外部资源，可以将请求这个外部资源偶尔失败又重试成功这件事情记录下来，具体来说：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) timeout ... 1 try</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) timeout ... 2 try</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) success</span><br></pre></td></tr></table></figure><p> 要好于</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) success</span><br></pre></td></tr></table></figure><p> 因为前者可以让我们预判被依赖的服务器服务质量有风险，也许需要进行扩容；</p></li><li><p>日志中需要记录关键参数，出错时的关键原因等。例如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth failed</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611185, content digest does not match</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611186, request ip not in whitelist</span><br></pre></td></tr></table></figure><p> 就不如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth failed due to token expiration</span><br><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611185, content digest does not match, expect 7b3f050bfa060b86ba781151c563c953, actual f60645e7107917250a6408f2f302d048</span><br><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611186, request ip(=202.17.34.1) not in whitelist</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于日志级别"><a href="#关于日志级别" class="headerlink" title="关于日志级别"></a>关于日志级别</h2><p>我们通常使用的日志库，将日志基本分为以下几类（从低到高）：</p><ul><li><strong>TRACE</strong> – The TRACE Level designates finer-grained informational events than the DEBUG</li><li><strong>DEBUG</strong> – The DEBUG Level designates fine-grained informational events that are most useful to debug an application.</li><li><strong>INFO</strong> – The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.</li><li><strong>WARN</strong> – The WARN level designates potentially harmful situations.</li><li><strong>ERROR</strong> – The ERROR level designates error events that might still allow the application to continue running.</li><li><strong>FATAL</strong> – The FATAL level designates very severe error events that will presumably lead the application to abort.</li></ul><p>开发人员对于何种日志输出为何种级别通常有自己的理解，那在实践中，是否所有的日志级别都有必要存在，哪些操作需要记入日志，哪种错误应该记为WARN级别，而哪种错误又为ERROR级别呢？关于该问题，可以参考StackOverflow上的一个<a href="https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels">讨论</a>。</p><p>此处对贴子中的一些观点，加上我们在平时运维过程中遇到的相关问题进行归纳：</p><ul><li><p>一个项目各个日志级别的定义应该是清楚明确的，需要团队的每个开发人员共同遵守；</p></li><li><p>即使是TRACE或者DEBUG级别的日志，也应该有一定的规范，要保证除了开发人员自己以外，包括测试人员和运维人员都可以方便地通过日志定位问题；</p></li><li><p>对于日志级别的分类，有以下参考：</p><ul><li><strong>FATAL</strong> — 表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该日志级别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管理员修复；</li><li><strong>ERROR</strong> — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的异常，是需要马上得到人工介入并处理的。而对于用户自己操作不当，如请求参数错误等等，是绝对不应该记为ERROR日志的；</li><li><strong>WARN</strong> — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要及时查看并处理的。因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；</li><li><strong>INFO</strong> — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。通过查看INFO级别的日志，可以很快地对系统中出现的 WARN,ERROR,FATAL错误进行定位。INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；</li><li><strong>DEBUG</strong> or <strong>TRACE</strong> — 这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看某一个操作每一步的执 行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的日志对问题进行诊断。需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，其他的如运维，测试人员等也可以通过 DEBUG（或TRACE）日志来定位问题；</li></ul></li></ul><h2 id="不断优化日志"><a href="#不断优化日志" class="headerlink" title="不断优化日志"></a>不断优化日志</h2><p>有一点可以肯定，好的日志就像好的文章一样，绝不是一遍就可以写好的，而需要在实际的运维过程中，结合线上问题的定位，不断地进行优化。最关键的一点是，团队要重视日志优化这件事情，不要让日志的质量持续降低（当项目变大时，项目的代码也存在一样的问题，越写越乱）。</p><p>此处有以下几个比较好的实践：</p><ul><li>在定位问题的过程中完善日志，如果定位问题花费了很长时间，那就说明系统日志还存在问题，需要进一步完善和优化；</li><li>需要思考是否可以通过优化日志，来提前预判该问题是否可能发生（如某种资源耗尽而导致的错误，可以对资源的使用情况进行记录）</li><li>定义好整个团队记录日志的规范，保证每个开发记录的日志格式统一；特别需要说明的是，对于DEBUG/TRACE级别的日志，也需要定义好清晰的格式，而不是由开发人员自由发挥；</li><li>整个团队（包括开发，运维和测试）定期对记录的日志内容进行Review；</li><li>开发做运维，通过在查问题的过程来优化日志记录的方式；</li></ul><p>运维或测试在日志中发现的问题，都需要及时向开发人员反映；</p><h2 id="关于RequestID"><a href="#关于RequestID" class="headerlink" title="关于RequestID"></a>关于RequestID</h2><h3 id="RequestID的作用"><a href="#RequestID的作用" class="headerlink" title="RequestID的作用"></a>RequestID的作用</h3><p>一个系统通常通过RequestID来对请求进行唯一的标记，目的是可以通过RequestID将一个请求在系统中的执行过程串联起来。该RequestID通常会随着响应返回给调用者，如果调用出现问题，调用者也可以通过提供RequestID帮助服务提供者定位问题。</p><h3 id="RequestID的生成"><a href="#RequestID的生成" class="headerlink" title="RequestID的生成"></a>RequestID的生成</h3><p>需要根据实际的使用场景来选择：</p><ul><li><p>对于简单的系统，可以简单采用一个随机数即可，例如</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestID = md5(time.Now() + random.Int())</span><br></pre></td></tr></table></figure><p>  这样简单的方式在一定的时间内是不用担心会冲突的</p></li><li><p>对于复杂的系统，需要在RequestID中编码更多的内容，例如：可以将处理请求的服务器IP，接收到请求的时间等信息编码到RequestID中，这样通过RequestID可以快速的了解请求属于哪台机器，然后进一步定位：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./decode.sh 4b2c009a0a7800000142789f42b8ca96</span><br><span class="line">   Thu Nov 21 11:06:12 CST 2013</span><br><span class="line">   10.120.202.150</span><br><span class="line">   4b2c009a</span><br></pre></td></tr></table></figure></li><li><p>对于一些特别的系统，RequestID也可以进行针对性的调整，例如在我实现的一个直播服务里，RequestID由两部分组成，第一部分是一个随机字符串（通过MD5生成），第二部分是一个不断在自增的整数：</p><p>  <img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E7%9B%B4%E6%92%AD%E6%9C%8D%E5%8A%A1RequestID.jpg" alt="直播服务RequestID"></p><p>  对于直播系统，这样做的好处是通过RequestID的第一部分，可以快速搜索到一路直播流所有的日志，而第二部分自增的整数可以帮助快速定位一段时间的日志。</p></li></ul><h3 id="RequestID串联起来的日志系统"><a href="#RequestID串联起来的日志系统" class="headerlink" title="RequestID串联起来的日志系统"></a>RequestID串联起来的日志系统</h3><p>通常一个服务由若干个子系统组成，拿网易对象存储举例，它包含了前端负载均衡节点、存储逻辑服务器、元数据集群、分布式存储集群、图片处理集群、音视频处理集群、缓存集群等。通常一个请求需要由若干个子系统，甚至所有的子系统的协同处理。这时，如果某个请求出错，再要定位到具体的出错原因就比较复杂了，因为常常需要到数十台机器上去定位日志。</p><p>当时的思路在负载均衡节点接收到请求后，就为请求生成一个全局唯一的RequestID，该请求所经过所有子系统系统，均基于该RequestID记录日志，这样通过将所有的日志收集起来，就可以通过这一个RequestID来得到完整的系统处理日志了。</p><p>然而这并不是一件容易做的事情：所有的系统间调用都需要进行改造，所有的日志输出的地方都要统一格式，而我们采用的有些开源组件实际上很难支持这种做法。</p><p>不过，有了这样的认识，我们组在开发新的底层分布式文件系统时，接口传入的第一个参数就是RequestID了。</p><h2 id="动态日志输出"><a href="#动态日志输出" class="headerlink" title="动态日志输出"></a>动态日志输出</h2><p>上文已经讨论过，DEBUG日志和INFO日志的一个重要的区别是，INFO日志用于记录常规的系统运行状态，请求的基本的输入和输出等，对于定位一般的问题已经足够了。而DEBUG日志则详细的记录了一个请求的处理过程，甚至是每一个函数的输入和输出结果，遇到一些隐藏比较深的问题时，必须要依赖DEBUG日志。<br>然而，由于DEBUG级别的日志数量比INFO级别的数量多很多（通常差一个数量级），如果长期在线上服务器开启DEBUG级别的日志输出，日志量太大。再比如，有时候仅仅是由于某一个用户的访问模式比较特殊导致了问题，如果将整个服务（特别是一个服务部署了很多台节点时）都临时调整为DEBUG级别日志输出，也非常不方便。<br>下面介绍一种我采用的方式：</p><p>我们的系统采用如下的业务架构（简化版）：</p><p><img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.jpg" alt="业务架构"></p><p>在业务处理层的Proxy中，实现如下逻辑：当接收到的HTTP请求的QueryString中包含”DEBUG=ON”参数时，就将所有的DEBUG级别的日志也输出：</p><p><img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E5%8A%A8%E6%80%81%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0.jpg" alt="动态日志实现"></p><p>在负载均衡层的Openresty中，实现如下接口：管理员可以配置将哪个用户的哪个桶的哪个对象的哪种操作（注：这是对象存储中的几个概念）输出为DEBUG日志，Openresty会对每个请求进行过滤，当发现请求和配置的DEBUG日志输出条件相匹配时，则在请求的QueryString中新增”DEBUG=ON”参数。</p><p>通过这种方式，管理员可以随时配置哪些请求需要输出为DEBUG级别的日志，可以大大提高线上定位问题的效率。</p><h2 id="慢操作日志"><a href="#慢操作日志" class="headerlink" title="慢操作日志"></a>慢操作日志</h2><p>服务在接收到一个请求的时候，记录请求的接收时间（T1），在请求处理完成待发送的时候，会记录请求发送时间（T2），通常一个请求的日志都记为INFO级别，然而当出现请求处理时间（T2-T1）超过一定时间（如10s）时，可以将该日志提升为WARN级别。通过该方法，可以预先发现系统可能存在的一些问题。</p><p>同样的慢操作日志还可以用来记录系统一些外部依赖的处理时间，如一个服务可能依赖外部认证服务器来进行认证授权。通过记录每次认证请求的时间并将超出预期时间的请求日志采用WARN级别输出，可以尽早发现认证服务器是不是需要扩容等问题。</p><p>慢日志的时间阈值应该是可以动态调整的，这样在进行系统优化时，可以将该报警时间阈值逐渐调小，不断地对系统进行优化。</p><h2 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h2><p>通过对日志中的关键字进行监控，可以及时发现系统故障并报警，这对于保证服务的SLA至关重要。</p><p>服务的监控和报警是一个很大的话题，此处只说日志监控报警需要注意的一些问题：</p><ol><li>能不报警的就不报警，只有需要运维马上处理的错误才需要发送报警。这样做的原因是避免长期的报警骚扰让运维人员对报警不再敏感，最后真的报警来了时，变成了狼来了的传说；</li><li>明确报警关键字，例如用ERROR作为报警的关键字，而不是各种各样的复杂规则。这样做的原因是日志监控本质上是不断的进行字符串匹配操作，如果规则太多太复杂，就可能对线上服务产生影响；</li><li>对于一些预警操作，例如某个服务需要重试多次才能成功，或者某个用户的配额快用完等等，可以通过每天一封报警邮件的方式来反馈；</li><li>每一次系统出现故障，都需要及时检查日志报警是否灵敏，日志报警的描述是否准确等，不断优化日志报警；</li></ol><h2 id="其他的注意事项"><a href="#其他的注意事项" class="headerlink" title="其他的注意事项"></a>其他的注意事项</h2><ul><li><p>上线后日志观察</p><p>  每一次上线完成后，除了对系统进行完整的回归测试外，还需要对日志进行观察，特别是当上线新功能以后，可以通过日志确认新功能是否工作正常。</p></li><li><p>日志输出到不同的文件</p><p>  在性能测试时遇到的另一个问题是，当并发量很大时，可能会有一些请求处理失败（如0.5%），为了对这些错误进行分析，需要去查这些错误请求的日志。而由于这种情况下日志量巨大，使得对错误日志的分析变得困难。</p><p>  这种情况下可以将所有的错误日志同时输出到一个单独的文件之中。</p></li><li><p>日志文件的大小</p><p>  日志文件不宜过大，过大的日志文件对于日志监控，问题定位等都会带来不便。因此需要进行日志文件的切分，日志文件应该按天来分割，还是按照小时来分割，应该根据日志量来决定，原则就是方便开发或运维人员能快速查找日志。</p><p>  为了防止日志文件将整个磁盘空间占满，需要定期对日志文件进行删除。例如，在收到磁盘报警时，可以将两个月以前的日志文件删除。此处比较好的实践是：</p><ul><li>将所有日志文件收集起来，这样即使在记录日志的机器上删除，也可以通过收集的日志对之前的问题进行定位；</li><li>每天通过定时任务来删除过期日志，如每天在凌晨4点删除60天前的日志</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对文中提出的所有建议总结如下：</p><ul><li>充分认识到日志对于一个可靠的后端系统的关键作用</li><li>整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志输出为什么级别，什么级别的错误出现要如何处理等</li><li>需要定期对日志内容进行优化更新，目的就是通过日志快速准确地定位问题</li><li>要明确不同日志的用途，对日志内容进行分类</li><li>绝不要打印没有用的日志，防止无用日志淹没重要信息</li><li>日志信息要准确全面，努力做到仅凭日志就可以定位问题</li><li>日志的优化是一件需要持续不断投入精力的事，需要不断从错误中学习</li><li>根据不同的目的生成RequestID，必要时在RequestID中尽量编码更多的信息</li><li>将一个请求的整个处理流程和唯一的RequestID关联起来</li><li>支持动态日志输出，方便线上问题定位</li><li>新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常</li><li>通过日志级别的提升来发现潜在问题</li><li>对日志进行监控报警，比客户先发现系统问题</li><li>通过日志中的关键字来确定系统的运行状态</li><li>日志格式要统一规范</li><li>将错误日志输出到一个单独的文件中进行分析</li><li>要把日志的大小，如何切分，如何删除等作为规范建立起来</li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建GitLab私有代码托管</title>
      <link href="/2018/05/01/%E6%90%AD%E5%BB%BAGitLab%E7%A7%81%E6%9C%89%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/"/>
      <url>/2018/05/01/%E6%90%AD%E5%BB%BAGitLab%E7%A7%81%E6%9C%89%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://about.gitlab.com/installation/#centos-7">GitLab官方安装教程</a>，<a href="http://www.jianshu.com/p/7a0d6917e009">快速安装 GitLab 并汉化</a></p><span id="more"></span><h2 id="CentOS-7安装-GitLab"><a href="#CentOS-7安装-GitLab" class="headerlink" title="CentOS 7安装 GitLab"></a>CentOS 7安装 GitLab</h2><ol><li><p>安装并配置必要的依赖关系</p><p> 如果您安装了<strong>Postfix</strong>用于发送电子邮件，请在安装过程中选择“Internet站点”。你也可以使用<strong>SendMail</strong>或配置自定义 SMTP 服务器，并将其设置为 SMTP 服务器。</p><p> 在 CentOS 上，下述命令将在系统防火墙中打开 HTTP 和 SSH 访问。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install curl policycoreutils openssh-server openssh-clients -y</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li><li><p>添加 GitLab 包服务器并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">sudo yum install gitlab-ce -y</span><br></pre></td></tr></table></figure><p> 如果您不想使用管道脚本安装存储库，则可以查看<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install">所有脚本</a>，并<a href="https://packages.gitlab.com/gitlab/gitlab-ce">手动选择并下载软件包</a>，并使用以下命令进行安装。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-XXX.rpm/download</span><br><span class="line">rpm -i gitlab-ce-XXX.rpm</span><br></pre></td></tr></table></figure></li><li><p>配置并启动 GitLab</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li><li><p>浏览到主机名并登录</p><p> 在您第一次访问时，您将被重定向到密码重置屏幕，以提供初始管理员帐户的密码。设置完密码之后您将被重定向回登录屏幕。</p><p> 默认帐户的用户名是<strong>root</strong>。提供您之前创建的密码并登录。登录后，您可以更改用户名。</p></li></ol><h2 id="修改-host"><a href="#修改-host" class="headerlink" title="修改 host"></a>修改 host</h2><ol><li><p>在 GitLab 中添加访问的 host，修改 <code>/etc/gitlab/gitlab.rb</code> 的 <code>external_url</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://git.[hostname].com[:port]&#x27;</span></span><br></pre></td></tr></table></figure><p> 可以设置端口，默认为80端口。</p></li><li><p><code>vim /etc/hosts</code>，在 CentOS 中添加host映射</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 git.[hostname].com</span><br></pre></td></tr></table></figure></li><li><p>每次修改 <code>/etc/gitlab/gitlab.rb</code> 之后，都要运行以下命令，让配置生效</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li><li><p>配置访问机器的 host，如 <code>192.168.1.100 git.[hostname].com</code>。最后，在浏览器中打开网址 <code>http://git.[hostname].com</code> 进行登录访问。</p></li></ol><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><blockquote><p>汉化教程参考<a href="https://gitlab.com/xhang/gitlab">https://gitlab.com/xhang/gitlab</a></p></blockquote><ol><li><p>确认当前安装版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><p> 如果当前安装的版本是 <code>8.5.7</code>，中文补丁需要打 <code>8.5版本</code>，以此类推。</p></li><li><p>克隆 GitLab 源码仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 克隆 GitLab.com 仓库</span></span><br><span class="line"> git <span class="built_in">clone</span> https://gitlab.com/larryli/gitlab.git</span><br><span class="line">＃或 Gitcafe.com 镜像，速度更快</span><br><span class="line"> git <span class="built_in">clone</span> https://gitcafe.com/larryli/gitlab.git</span><br></pre></td></tr></table></figure></li><li><p>运行汉化补丁</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8.5 版本的汉化补丁（8-5-stable是英文稳定版，8-5-zh是中文版，两个 diff 结果便是汉化补丁）</span></span><br><span class="line">sudo git diff origin/8-5-stable..8-5-zh &gt; /tmp/8.5.diff</span><br><span class="line"><span class="comment"># 停止 gitlab</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"><span class="comment"># 应用汉化补丁</span></span><br><span class="line"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">git apply /tmp/8.5.diff  </span><br><span class="line"><span class="comment"># 启动gitlab</span></span><br><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure></li></ol><p>完成汉化之后可以看到中文版的 GitLab。<br><img src="http://upload-images.jianshu.io/upload_images/25574-8538f4f188691bed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中文版GitLab"></p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>生产环境下，备份是必需的。需要备份的文件有：配置文件和数据文件。</p><ul><li><p>备份配置文件<br>  配置文件包含密码等敏感信息，不要和数据文件放在一起。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&#x27;umask 0077; tar -cf $(data &quot;+etc-gitlab-%s.tar&quot;) -C /etc/gitlab&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>备份数据文件<br>  默认数据备份目录是 <code>/var/opt/gitlab/backups</code>，手动创建备份文件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Omnibus 方式安装使用以下命令备份</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>  日常备份，添加 <strong>crontab</strong>，运行 <code>crontab -e</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天2点执行备份</span></span><br><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span><br></pre></td></tr></table></figure><p>  如要修改备份周期和目录，在/etc/gitlab/gitlab.rb中修改以下两个选项</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置备份周期为7天 - 604800秒</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800</span><br><span class="line"><span class="comment"># 备份目录</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&#x27;/mnt/backups&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。</p><ul><li>恢复配置文件  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/gitlab /etc/gitlab.$(date +%s)</span><br><span class="line"><span class="comment"># 将下面配置备份文件的时间戳改为你所备份的文件的时间戳</span></span><br><span class="line">sudo tar -xf etc-gitlab-1399948539.tar -C /</span><br></pre></td></tr></table></figure></li><li>恢复数据文件  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据备份文件拷贝至备份目录</span></span><br><span class="line">sudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止连接数据库的进程</span></span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复1393513186这个备份文件，将覆盖GitLab数据库！</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 GitLab</span></span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 GitLab</span></span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="持续集成（GitLab-CI）"><a href="#持续集成（GitLab-CI）" class="headerlink" title="持续集成（GitLab-CI）"></a>持续集成（GitLab-CI）</h2></li></ul><ol><li><p>添加<strong>Runner</strong>安装源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># For CentOS</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>安装<strong>gitlab-ci-multi-runner</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu</span></span><br><span class="line">apt-get install gitlab-ci-multi-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># For CentOS</span></span><br><span class="line">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></li><li><p>注册<strong>Runner</strong><br> 获取Token：以管理员身份登录GitLab，进入管理区域，点击侧边栏的Runner，如下图，“注册授权码”后的字符串便是Token。<br><img src="http://upload-images.jianshu.io/upload_images/25574-0ffcfa9cd7975be2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitLab Runner Token"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner register</span><br><span class="line"></span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci):</span><br><span class="line">http://git.home.com/ci</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">xxxx             <span class="comment"># 输入Token</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[xxy-web-test-02]: test-runner  <span class="comment"># 输入runner的名称</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line"><span class="built_in">test</span>,php         <span class="comment"># 输入runner的标签，以区分不同的runner，标签间逗号分隔</span></span><br><span class="line">Registering runner... succeeded                     runner=YDPz2or3</span><br><span class="line">Please enter the executor: ssh, shell, parallels, docker, docker-ssh, virtualbox:</span><br><span class="line">shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Flow模型</title>
      <link href="/2017/11/06/GitFlow%E6%A8%A1%E5%9E%8B/"/>
      <url>/2017/11/06/GitFlow%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>git-flow 是在 git branch 和 git tag 基础上封装出来的代码分支管理模型，把实际开发模拟称 master develop feature release hotfix support 几种场景，其中 master 对应发布上线，develop 对应开发，其他几个在不同的情况下出现。通过封装，git-flow 屏蔽了 git branch 等相对来说比较复杂生硬的命令（git branch 还是比较复杂的，尤其是在多分支情况下），简单而且规范的解决了代码分支管理问题。</p><span id="more"></span><p>Git Flow 将 branch 分成2个主要分支和3个临时的辅助分支。</p><p><img src="/images/GitFlow%E6%A8%A1%E5%9E%8B/git-flow.png" alt="git-flow"></p><p>主要分支：</p><ul><li>master：永远处在即将发布（production-ready）状态。</li><li>develop：最新的开发状态。</li></ul><p>辅助分支：</p><ul><li>feature：开发新功能的分支，基于 develop，完成后 merge 回 develop。</li><li>release：准备要发布版本的分支，用来修复 bug。基于 develop，完成后 merge 回 develop 和 master。</li><li>hotfix：修复 master 上的问题，等不及 release 版本就必须马上上线。基于 master，完成后 merge 回 master 和 develop。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git Flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理</title>
      <link href="/2017/11/05/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2017/11/05/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>当前项目开发过程中，项目版本一般使用git进行管理，在进行git相关操作约定之前先对分支管理的细则进行说明。</p><span id="more"></span><h2 id="分支的划分"><a href="#分支的划分" class="headerlink" title="分支的划分"></a>分支的划分</h2><p>工程的分支主要分为master、dev、hotfix、feature四类</p><ul><li>master：线上app代码主分支，该代码和线上代码一致</li><li>dev:开发分支，包含即将上线的新功能，由各个新功能开发分支经测试后合入，属于分支测试后的产物</li><li>feature：功能开发分支，当有新开发任务时，开发需要从dev分支拉取feature分支，开发完毕经过分支测试后，可以进行pull request请求，申请将分支合入dev分支，该分支是开发过程中最常使用的分支</li><li>hotfix：bug修复分支，或紧急需求开发分支（一般不要在hotfix分支上进行新需求的开发）。该分支从master分支拉出，经开发测试完成之后，可以进行pull requets，申请将分支合入master<blockquote><p>特别注意：</p><blockquote><p>feature只能从dev分支拉出，hotfix分支只能从master拉出<br>在进行pull request请求之前必须对当前的开发分支进行反合，即dev分支反合feature分支，master分支反合hotfix分支<br>dev分支会在稳定之后合入master分支<br>不能将master分支与feature反合，dev分支与hotfix反合<br>开发只能将代码提交至对应的开发分支，不能直接提交到master分支或dev分支</p></blockquote></blockquote></li></ul><h2 id="分支的提交注意事项"><a href="#分支的提交注意事项" class="headerlink" title="分支的提交注意事项"></a>分支的提交注意事项</h2><p>分支提交的几点注意如下：</p><ul><li>在拉取新分支之前一定要确保本地的master分支和dev分支代码是最新的（在拉分支之前进行pull操作）</li><li>分支的拉取和push请用git命令或16版本及以上idea完成，不要使用eclipse</li><li>本地代码提交时需要确保本地分支对应的远程分支代码最新，具体在进行提交操作之前请进行pull操作</li><li>代码提交时要进行相关注释，说明修改的代码内容；建议提高代码提交的频率，这样在出现问题时方便问题的定位与代码的回滚</li><li>代码提交时要在本地解决冲突，冲突解决完成，并且代码在本地可以编译通过之后才能提交代码</li><li>在windows下进行开发一定要注意git有关换行符的问题（crlf与lf的问题），具体请在git中设置相关的配置（git config –global core.autocrlf true ），并在开发工具中将默认的环境设置为linux，避免提交的代码出现大量的冲突。如果出现这种情况的冲突，请不要提交代码到远程仓库，本地解决之后再提交。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab使用手册</title>
      <link href="/2017/01/24/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2017/01/24/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。随着Git的流行和DevOps的逐步落地，GitLab越来越成为日常工作中不可或缺的工具，本文是在实际开发过程中正确高效地使用GitLab方法的总结。</p><span id="more"></span><h2 id="1、GitLab设置"><a href="#1、GitLab设置" class="headerlink" title="1、GitLab设置"></a>1、GitLab设置</h2><h3 id="1-1-使用SSH代替账号密码进行认证"><a href="#1-1-使用SSH代替账号密码进行认证" class="headerlink" title="1.1 使用SSH代替账号密码进行认证"></a>1.1 使用SSH代替账号密码进行认证</h3><p>Git提供了账号密码、SSH、GPG三种方式访问代码，其中使用最多最为方便的是SSH。</p><h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><p>生成ssh key需要<a href="http://dev.posun.co:600/root/GitLab-Manual/wikis/%E5%AE%89%E8%A3%85git">安装Git</a>，在 Git Bash 中依次进行以下操作。</p><ul><li>设置Git的全局user的name和email</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@posun.cn&quot;</span><br></pre></td></tr></table></figure><ul><li>生成ssh key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “xxx@posun.cn”</span><br></pre></td></tr></table></figure><p>之后会看到提示输入保存ssh key的文件名和加密串，建议直接回车跳过。</p><ul><li>查看ssh key</li></ul><p>完成上述操作之后，可以在当前用户的 <code>home</code> 目录下的 <code>.ssh</code> 文件夹中看到生成的 key，<strong>id_rsa</strong> 是私钥，<strong>id_rsa.pub</strong> 是公钥。</p><h4 id="上传ssh-key"><a href="#上传ssh-key" class="headerlink" title="上传ssh key"></a>上传ssh key</h4><p>点击GitLab导航栏的用户头像下拉选择 <strong>设置</strong>，在左侧菜单栏选择 <strong>SSH密钥</strong> 进入 SSH 密钥添加页面，使用文本编辑器打开 <strong>id_rsa.pub</strong> 文件并全选复制粘贴至密钥添加页面的相应位置，填写密钥标题，点击 <strong>增加密钥</strong> 按钮即可完成ssh key的上传。</p><h4 id="使用ssh的好处"><a href="#使用ssh的好处" class="headerlink" title="使用ssh的好处"></a>使用ssh的好处</h4><p>使用ssh之后，使用git方式（不是http/https方式）pull和push代码时不用每次都填写账号密码，方便快捷，并且更加安全，但是请妥善保管ssh key，谨防泄漏。</p><h3 id="1-2-设置语言偏好"><a href="#1-2-设置语言偏好" class="headerlink" title="1.2 设置语言偏好"></a>1.2 设置语言偏好</h3><p>在GitLab导航栏点击个人头像下拉选择 <strong>设置</strong>，在左侧菜单栏选择 <strong>Profile</strong> 进入个人配置页面，在 <strong>主要设置</strong> -&gt; <strong>Preferred language</strong> 中选择 “简体中文”。</p><h2 id="2、项目"><a href="#2、项目" class="headerlink" title="2、项目"></a>2、项目</h2><h3 id="2-1-如何新建一个项目"><a href="#2-1-如何新建一个项目" class="headerlink" title="2.1 如何新建一个项目"></a>2.1 如何新建一个项目</h3><p>点击GitLab导航条上的 <code>+</code> 下拉选择 <strong>新建项目</strong> 进入项目创建页面，GitLab提供了以下三种方式创建项目。</p><h4 id="新建一个空白项目"><a href="#新建一个空白项目" class="headerlink" title="新建一个空白项目"></a>新建一个空白项目</h4><p>填写项目路径、名称、描述，选择项目可见等级之后，点击 <strong>创建项目</strong> 按钮即可创建一个空白项目。新项目一般采用此方式进行创建。</p><h4 id="从模板创建"><a href="#从模板创建" class="headerlink" title="从模板创建"></a>从模板创建</h4><p>GitLab提供了三种项目模板：Ruby on Rails、Spring、NodeJS Express，可按需使用。</p><h4 id="从其它代码仓库导入项目"><a href="#从其它代码仓库导入项目" class="headerlink" title="从其它代码仓库导入项目"></a>从其它代码仓库导入项目</h4><p>从GitHub等其它代码仓库导入项目。</p><h3 id="2-2-如何管理项目成员"><a href="#2-2-如何管理项目成员" class="headerlink" title="2.2 如何管理项目成员"></a>2.2 如何管理项目成员</h3><h4 id="添加-导入项目成员"><a href="#添加-导入项目成员" class="headerlink" title="添加/导入项目成员"></a>添加/导入项目成员</h4><p>进入项目页面，在左侧菜单栏选择 <strong>设置</strong> -&gt; <strong>成员</strong>，在 <strong>添加成员</strong> 里依次选择 要邀请的成员（可多选）、角色权限和访问到期日期，点击 <strong>添加到项目</strong> 完成项目成员的添加。除了手动添加之外，还可以点击 <strong>导入</strong> 按钮进入导入成员页面，选择目标项目一键导入目标项目的成员。</p><h4 id="项目成员管理"><a href="#项目成员管理" class="headerlink" title="项目成员管理"></a>项目成员管理</h4><p>项目成员页面还提供了成员管理的功能，可以修改成员的角色权限和访问到期日期，还可以踢出成员。</p><h3 id="2-3-如何新建一个群组项目"><a href="#2-3-如何新建一个群组项目" class="headerlink" title="2.3 如何新建一个群组项目"></a>2.3 如何新建一个群组项目</h3><h4 id="创建一个群组"><a href="#创建一个群组" class="headerlink" title="创建一个群组"></a>创建一个群组</h4><p>在导航栏里点击 <code>+</code> 下拉选择 <strong>新建群组</strong> 进入新建群组页面，填写群组路径、群组名称、描述，上传群组图表，选择群组可见等级之后，点击 <strong>创建群组</strong> 按钮即可创建一个新的群组。</p><h4 id="新建群组项目"><a href="#新建群组项目" class="headerlink" title="新建群组项目"></a>新建群组项目</h4><p>在群组主页点击 <strong>新项目</strong> 按钮进入新建群组项目页面，填写必要信息之后并提交即可创建一个群组项目，群组项目默认的可见等级为 <strong>私有</strong>，即只允许群组成员访问。</p><p>个人项目在 <strong>设置</strong> -&gt; <strong>成员</strong> -&gt; <strong>与群组共享</strong> 里可以将项目共享给指定群组的成员。</p><h4 id="子群组"><a href="#子群组" class="headerlink" title="子群组"></a>子群组</h4><p>在群组主页下拉选择并点击 <strong>新子群组</strong> 进入资群组创建页面，子群组可以对父群组的成员进一步细分，子群组成员可以访问父群组项目，非子群组的父群组成员无法访问子群组项目。</p><h2 id="3、分支管理"><a href="#3、分支管理" class="headerlink" title="3、分支管理"></a>3、分支管理</h2><h3 id="3-1-分支的划分"><a href="#3-1-分支的划分" class="headerlink" title="3.1 分支的划分"></a>3.1 分支的划分</h3><p>工程的分支主要分为 <strong>master</strong>、<strong>dev</strong>、<strong>hotfix</strong>、<strong>feature</strong> 四类。</p><ul><li><strong>master</strong>：线上代码主分支，该代码和线上代码一致</li><li><strong>dev</strong>: 开发分支，包含即将上线的新功能，由各个新功能开发分支经测试后合入，属于分支测试后的产物</li><li><strong>feature</strong>: 功能开发分支，当有新开发任务时，开发需要从dev分支拉取feature分支，开发完毕经过分支测试后，可以进行pull request请求，申请将分支合入dev分支，该分支是开发过程中最常使用的分支</li><li><strong>hotfix</strong>: bug修复分支，或紧急需求开发分支（一般不要在hotfix分支上进行新需求的开发）。该分支从master分支拉出，经开发测试完成之后，可以进行pull requets，申请将分支合入master</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>feature只能从dev分支拉出，hotfix分支只能从master拉出</li><li>在进行pull request请求之前必须对当前的开发分支进行反合，即dev分支反合feature分支，master分支反合hotfix分支</li><li>dev分支会在稳定之后合入master分支</li><li>不能将master分支与feature反合，dev分支与hotfix反合</li><li>开发只能将代码提交至对应的开发分支，不能直接提交到master分支或dev分支</li></ul><h3 id="3-2-分支的提交注意事项"><a href="#3-2-分支的提交注意事项" class="headerlink" title="3.2 分支的提交注意事项"></a>3.2 分支的提交注意事项</h3><p>分支提交的几点注意如下：</p><ul><li>在拉取新分支之前一定要确保本地的master分支和dev分支代码是最新的（在拉分支之前进行pull操作）</li><li>分支的拉取和push请用git命令或16版本及以上idea完成，不要使用eclipse</li><li>本地代码提交时需要确保本地分支对应的远程分支代码最新，具体在进行提交操作之前请进行pull操作</li><li>代码提交时要进行相关注释，说明修改的代码内容；建议提高代码提交的频率，这样在出现问题时方便问题的定位与代码的回滚</li><li>代码提交时要在本地解决冲突，冲突解决完成，并且代码在本地可以编译通过之后才能提交代码</li><li>在windows下进行开发一定要注意git有关换行符的问题（crlf与lf的问题），具体请在git中设置相关的配置（git config –global core.autocrlf true ），并在开发工具中将默认的环境设置为linux，避免提交的代码出现大量的冲突。如果出现这种情况的冲突，请不要提交代码到远程仓库，本地解决之后再提交。</li></ul><h2 id="4、IntelliJ-IDEA使用GitLab"><a href="#4、IntelliJ-IDEA使用GitLab" class="headerlink" title="4、IntelliJ IDEA使用GitLab"></a>4、IntelliJ IDEA使用GitLab</h2><h3 id="4-1-安装Git"><a href="#4-1-安装Git" class="headerlink" title="4.1 安装Git"></a>4.1 安装Git</h3><h4 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h4><p>进入<a href="https://git-scm.com/download">Git下载页面</a>，选择合适的版本下载。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Windows下双击下载好的 <code>Git-x.xx.x-64-bit.exe</code> 安装包执行安装，不建议更改 Git 默认勾选的配置。Git GUI按需使用，实际使用的频率一般比较低。</p><h4 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h4><p>如果在安装时没有勾选 <strong>Checkout Windows-style, commit Unix-style line endings</strong> 项，可以在命令行中执行 <code>git config --global core.autocrlf true</code> 开启 <strong>提交代码时自动转换换行符</strong>。</p><h3 id="4-2-安装IDEA-Git插件"><a href="#4-2-安装IDEA-Git插件" class="headerlink" title="4.2 安装IDEA Git插件"></a>4.2 安装IDEA Git插件</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在IDEA中搜索 <code>Git Integration</code> 和 <code>.ignore</code> 插件并安装，安装完成之后重启IDEA。</p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><ul><li>IDEA Git插件的配置</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png" alt="IDEA-Git插件配置"></p><ul><li>.ignore插件</li></ul><p><strong>.ignore</strong> 插件支持Git推送代码时自动忽略自定义配置的文件或者目录，防止将一些与开发无关的项目配置文件、构建文件推送到代码库，也减少了手动推送的风险。</p><h3 id="4-3-从GitLab导入项目"><a href="#4-3-从GitLab导入项目" class="headerlink" title="4.3 从GitLab导入项目"></a>4.3 从GitLab导入项目</h3><h4 id="从远程仓库clone代码到本地"><a href="#从远程仓库clone代码到本地" class="headerlink" title="从远程仓库clone代码到本地"></a>从远程仓库clone代码到本地</h4><p>在配置好了ssh之后则可进行代码的clone，用http/https的方式不在本文的考虑范围内。clone远程代码到本地请使用git bash操作，不要使用ide，尤其是不要使用eclipse（本项目约定使用命令行进行）。<br><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%A4%8D%E5%88%B6Git%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E8%B7%AF%E5%BE%84.png" alt="复制Git代码仓库路径"></p><p>使用复制好的链接clone代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@dev.posun.co:root/GitLab-Manual.git</span><br></pre></td></tr></table></figure><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/Git-SSH-Clone%E4%BB%A3%E7%A0%81.png" alt="Git-SSH-Clone代码"></p><p>使用IDEA打开Git项目</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA%E6%89%93%E5%BC%80Git%E9%A1%B9%E7%9B%AE.png" alt="IDEA打开Git项目"></p><p>选择项目<strong>目录</strong>，点击“OK”</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%80%89%E6%8B%A9Git%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png" alt="选择Git项目目录"></p><p>成功导入Git项目</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E9%A1%B9%E7%9B%AE.png" alt="IDEA-Git项目"></p><h3 id="4-4-本地拉取新的分支并将分支push到远程仓库"><a href="#4-4-本地拉取新的分支并将分支push到远程仓库" class="headerlink" title="4.4 本地拉取新的分支并将分支push到远程仓库"></a>4.4 本地拉取新的分支并将分支push到远程仓库</h3><h4 id="分支操作菜单"><a href="#分支操作菜单" class="headerlink" title="分支操作菜单"></a>分支操作菜单</h4><p>IDEA中Git的操作菜单可以在以下两个地方找到。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%93%8D%E4%BD%9C%E8%8F%9C%E5%8D%95.png" alt="IDEA-Git操作菜单"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%93%8D%E4%BD%9C%E8%8F%9C%E5%8D%95-%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt="IDEA-Git操作菜单-菜单栏"></p><p>分支操作菜单在IDEA界面的右下方有一个快捷入口。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E5%88%86%E6%94%AF%E8%8F%9C%E5%8D%95.png" alt="IDEA-Git分支菜单"></p><h4 id="拉取分支操作流程"><a href="#拉取分支操作流程" class="headerlink" title="拉取分支操作流程"></a>拉取分支操作流程</h4><h5 id="创建本地dev分支"><a href="#创建本地dev分支" class="headerlink" title="创建本地dev分支"></a>创建本地dev分支</h5><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0dev%E5%88%86%E6%94%AF.png" alt="IDEA-创建本地dev分支"></p><h5 id="命名本地dev分支，最好跟远程分支保持一致"><a href="#命名本地dev分支，最好跟远程分支保持一致" class="headerlink" title="命名本地dev分支，最好跟远程分支保持一致"></a>命名本地dev分支，最好跟远程分支保持一致</h5><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png" alt="IDEA-命名本地分支"></p><h5 id="从dev分支拉取feature分支"><a href="#从dev分支拉取feature分支" class="headerlink" title="从dev分支拉取feature分支"></a>从dev分支拉取feature分支</h5><p>拉取分支前需要确认当前本地分支在master或者dev分支，并且分支代码是最新的（拉取feature分支则当前分支需要是dev分支，拉取hotfix分支则要在master分支）</p><ol><li><p>切换到dev分支</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%87%E6%8D%A2%E5%88%B0dev%E5%88%86%E6%94%AF.png" alt="IDEA-切换到dev分支"></p></li><li><p>pull dev分支代码，使代码最新</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-pull%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81.png" alt="IDEA-pull分支代码"></p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-pull%E4%BB%A3%E7%A0%81.png" alt="IDEA-pull代码"></p></li><li><p>创建新的feature分支</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png" alt="IDEA-创建新的本地分支"></p><p> 注意feature分支的命名，<strong>feature_任务编号_任务描述_分支创建日期</strong>。任务编号对应GitLab中项目的问题编号。</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BAfeature%E5%88%86%E6%94%AF.png" alt="IDEA-创建feature分支"></p></li></ol><h4 id="push新的feature分支到远程仓库"><a href="#push新的feature分支到远程仓库" class="headerlink" title="push新的feature分支到远程仓库"></a>push新的feature分支到远程仓库</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-push%20feature%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="IDEA-push feature分支到远程仓库"></p><p>push feature分支成功</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/push%20feature%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%88%90%E5%8A%9F.png" alt="push feature分支到远程仓库成功"></p><h3 id="4-5-从开发分支上提交代码"><a href="#4-5-从开发分支上提交代码" class="headerlink" title="4.5 从开发分支上提交代码"></a>4.5 从开发分支上提交代码</h3><ul><li>如果有新创建的文件，则在commit之前要进行add</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-git%20add%E6%96%B0%E6%96%87%E4%BB%B6.png" alt="IDEA-git add新文件"></p><ul><li>commit代码之前要检查代码更改的地方，不要提交一些非智力因素导致的合并错误。IDEA中有两种提交代码的方式。</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81.png" alt="IDEA-提交代码"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81-%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt="IDEA-提交代码-菜单栏"></p><ul><li>该面板可以查看有哪些文件进行了修改以及修改详情</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E5%8F%98%E5%8A%A8%E4%BF%A1%E6%81%AF.png" alt="IDEA-查看代码文件变动信息"></p><ul><li>确认无误，添加注释，提交代码</li></ul><p>commit: 提交代码<br>commit and push：提交代码并推送至远程仓库</p><p><strong>可以一次推送多次提交</strong>，一般一个功能点的修改提交一次代码，一个开发周期（半天、一天）推送一次代码。注意提交注释的格式 <code>tasknum#taskdesc:commit message</code>。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%A1%AB%E5%86%99%E6%8F%90%E4%BA%A4%E8%AF%B4%E6%98%8E.png" alt="IDEA-填写提交说明"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E5%AE%8C%E6%88%90%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81.png" alt="IDEA-提交完成推送代码"></p><h3 id="4-6-查看代码提交历史"><a href="#4-6-查看代码提交历史" class="headerlink" title="4.6 查看代码提交历史"></a>4.6 查看代码提交历史</h3><h4 id="查看指定文件的提交历史"><a href="#查看指定文件的提交历史" class="headerlink" title="查看指定文件的提交历史"></a>查看指定文件的提交历史</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2.png" alt="IDEA-查看文件的提交历史"></p><h4 id="查看项目的提交历史"><a href="#查看项目的提交历史" class="headerlink" title="查看项目的提交历史"></a>查看项目的提交历史</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2.png" alt="IDEA-查看项目的提交历史"></p><h3 id="4-7-代码的回退"><a href="#4-7-代码的回退" class="headerlink" title="4.7 代码的回退"></a>4.7 代码的回退</h3><p><strong>不要回退代码，代码提交错误，请手动删除提交错误的代码，然后再次提交，不然会影响一些提交信息的记录，或其他分支的开发。</strong></p><h3 id="4-8-分支反合及冲突的解决"><a href="#4-8-分支反合及冲突的解决" class="headerlink" title="4.8 分支反合及冲突的解决"></a>4.8 分支反合及冲突的解决</h3><p>虽然这部分大部分靠经验解决问题，但是仍然需要注意以下注意事项：</p><p><strong>分支反合</strong>：即master分支或dev分支合并到开发分支,合并操作可以用命令行进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature_dev_local</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout hotfix_fixbug_local</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><ul><li>IDEA中有比较好用的冲突解决工具，命令行执行玩合并之后，用IDEA解决冲突并提交</li><li>不要用IDE进行分支反合，尤其不能用Eclipse</li></ul><h3 id="4-9-提交pull-request"><a href="#4-9-提交pull-request" class="headerlink" title="4.9 提交pull request"></a>4.9 提交pull request</h3><p>pull request在分支测试之后提交，在git的web端可以直接操作，一般这部分由QA完成。</p><h4 id="新建合并请求"><a href="#新建合并请求" class="headerlink" title="新建合并请求"></a>新建合并请求</h4><p>在GitLab的项目页面中选择 <strong>合并请求</strong> 进入pull request面板页面，点击 <strong>新建合并请求</strong>，选择pull request的来源分支和目标分支，点击 <strong>比较分支后继续</strong>。</p><p>填写标题、描述，指派审查员，可选该合并请求相关的里程碑和标记（与问题看板关联），之后点击 <strong>提交合并请求</strong> 即完成了合并请求的创建。勾选 <strong>接受合并请求后删除来源分支</strong>，合并请求完成之后会删除来源分支，一般从feature合并到dev、hotfix合并到master可以勾选，dev合并到master不勾选。</p><h4 id="合并请求的审查"><a href="#合并请求的审查" class="headerlink" title="合并请求的审查"></a>合并请求的审查</h4><p>审查员在代码审查通过之后可以选择合并操作完成分支代码的合并。代码审查不通过时，审查员需要填写原因或建议并关闭合并请求，此时开发人员需要根据审查员的审查结果进行修改并在修改完成之后再次pull request。</p><h3 id="4-10-gitignore文件的使用"><a href="#4-10-gitignore文件的使用" class="headerlink" title="4.10 .gitignore文件的使用"></a>4.10 .gitignore文件的使用</h3><h4 id="gitignore文件的编写原则"><a href="#gitignore文件的编写原则" class="headerlink" title=".gitignore文件的编写原则"></a>.gitignore文件的编写原则</h4><p><code>.gitignore</code> 文件过滤有两种模式：开放模式和保守模式。开放模式负责设置过滤哪些文件和文件夹，保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪。</p><p>gitignore是从上到下逐行匹配的，因此.gitignore文件的编写原则就是：<strong>先编写开放模式，在编写保守模式</strong>。</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>以斜杠“/”开头表目录</li><li>以星号“*”通配多字符</li><li>以问号“?”通配单字符</li><li>以方括号“[]”包含单个字符的匹列表</li><li>以叹号“!”对匹配结果反</li></ul><h2 id="5、任务"><a href="#5、任务" class="headerlink" title="5、任务"></a>5、任务</h2><h3 id="5-1-任务的创建与执行"><a href="#5-1-任务的创建与执行" class="headerlink" title="5.1 任务的创建与执行"></a>5.1 任务的创建与执行</h3><h4 id="任务的创建"><a href="#任务的创建" class="headerlink" title="任务的创建"></a>任务的创建</h4><p>在GitLab的项目页面中选择 <strong>问题</strong> -&gt; <strong>列表</strong> 进入问题列表页面，点击 <strong>新建问题</strong> 进入任务创建页面，填写问题标题、描述，指派任务的执行人员，勾选是否保密，选择截止日期，选择里程碑和标记，之后点击 <strong>提交问题</strong> 即可完成任务的创建。这里的任务标记跟问题面板中的面板标题一致。</p><h4 id="任务的执行"><a href="#任务的执行" class="headerlink" title="任务的执行"></a>任务的执行</h4><p>在 <strong>问题</strong> -&gt; <strong>看板</strong> 页面可以对问题的执行情况进行跟踪。这部分跟大部分团队协作的工具比较类似，不做过多说明。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器环境搭建</title>
      <link href="/2017/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>远程云服务器的管理是运维人员的必备技能，本文总结了阿里云linux服务器的基本环境的搭建过程，方便日后查看回顾。</p><span id="more"></span><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><p>目前windows平台上比较常见的SSH客户端有XShell、Putty等，这里选用比较熟悉的<a href="https://www.netsarang.com/xshell_download.html">XShell</a>。官网需要填写个人信息之后才能下载，这里直接选择<a href="http://rj.baidu.com/soft/detail/15201.html?ald">百度软件中心</a>下载。</p><p>安装完成之后，开始登录远程的linux服务器。</p><ol><li><p>新建会话</p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/XShell%E6%96%B0%E5%BB%BA%E4%BC%9A%E8%AF%9D.png" alt="XShell新建会话"></p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BF%9D%E5%AD%98%E4%B8%BB%E6%9C%BASSH%E5%AF%86%E9%92%A5.png" alt="保存主机SSH密钥"></p></li><li><p>输入用户名、密码，执行登录</p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="登录成功"></p></li></ol><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>这里选用的是CentOS 7</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>CentOS 7 可以使用yum安装包管理器快速安装配置各种常用的软件工具。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%9F%A5%E7%9C%8Byum.png" alt="查看yum"></p><p>在安装软件工具之前，先对yum进行更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><h4 id="安装前的检查"><a href="#安装前的检查" class="headerlink" title="安装前的检查"></a>安装前的检查</h4><p>首先检查是否已经安装其他版本JDK，如openjdk等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep -E &#x27;^open[jre|jdk]|j[re|dk]&#x27;</span><br></pre></td></tr></table></figure><p>这里显示的输出信息为：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%A3%80%E6%9F%A5%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%ACjdk.png" alt="检查是否存在其他版本jdk"></p><p>检查当前java版本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>如果已经安装了openjdk，使用 <code>yum remove java-1.x.x-openjdk</code> 命令卸载。</p><h4 id="下载并安装Oracle-JDK"><a href="#下载并安装Oracle-JDK" class="headerlink" title="下载并安装Oracle JDK"></a>下载并安装Oracle JDK</h4><ul><li>下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</a></li></ul><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDjdk.png" alt="下载jdk"></p><ul><li><p>安装JDK</p><p>  安装之前使用<strong>Xftp</strong>工具将下载的rpm软件包上传到服务器。  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh jdk-8u121-linux-x64.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>java -version</code> 检查是否成功安装</p></li></ul><h4 id="设置JDK环境变量"><a href="#设置JDK环境变量" class="headerlink" title="设置JDK环境变量"></a>设置JDK环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /etc/profile /etc/profile.backup0831</span><br><span class="line"># vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最下面添加以下信息：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/default</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><ul><li>查看JDK环境变量是否设置成功  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo $JAVA_HOME</span><br></pre></td></tr></table></figure></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><blockquote><p>MySQL的安装可以参考<a href="http://www.cnblogs.com/XBlack/p/5178758.html">阿里云Centos7使用yum安装MySQL5.6的正确姿势</a></p></blockquote><p>以下为主要代码。</p><ul><li><p>安装带有可用的mysql5系列社区版资源的rpm包  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看当前可用的mysql安装资源  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用yum的方式安装MySQL  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>加入开机启动  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable mysqld</span><br></pre></td></tr></table></figure></li><li><p>启动mysql服务进程  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld</span><br></pre></td></tr></table></figure></li><li><p>重置密码</p><p>  <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%87%8D%E7%BD%AEmysql%E5%AF%86%E7%A0%81.png" alt="重置mysql密码"></p><p>  <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%85%8D%E7%BD%AEmysql.png" alt="配置mysql"></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>参考<a href="http://www.redis.cn/download.html">官方文档</a><br>下载，解压，编译：  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-3.2.6.tar.gz</span><br><span class="line">$ tar xzf redis-3.2.6.tar.gz</span><br><span class="line">$ cd redis-3.2.6</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>make命令需要gcc，使用下列命令安装gcc：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install gcc</span><br></pre></td></tr></table></figure><p>二进制文件是编译完成后在src目录下，通过下面的命令启动Redis服务：<br><code>$ src/redis-server</code></p><p>你可以使用内置的客户端命令redis-cli进行使用：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://my.oschina.net/indestiny/blog/197272">Centos开机自启动redis</a></p></blockquote><ul><li><p>修改redis.conf，打开后台运行选项：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li><li><p>编写脚本，vim /etc/init.d/redis:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># chkconfig: 2345 10 90</span><br><span class="line"># description: Start and Stop redis</span><br><span class="line"></span><br><span class="line">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379 #实际环境而定</span><br><span class="line">EXEC=/usr/local/redis/src/redis-server #实际环境而定</span><br><span class="line">REDIS_CLI=/usr/local/redis/src/redis-cli #实际环境而定</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis.pid</span><br><span class="line">CONF=&quot;/usr/local/redis/redis.conf&quot; #实际环境而定</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">        start)</span><br><span class="line">                if [ -f $PIDFILE ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;$PIDFILE exists, process is already running or crashed.&quot;</span><br><span class="line">                else</span><br><span class="line">                        echo &quot;Starting Redis server...&quot;</span><br><span class="line">                        $EXEC $CONF</span><br><span class="line">                fi</span><br><span class="line">                if [ &quot;$?&quot;=&quot;0&quot; ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;Redis is running...&quot;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                if [ ! -f $PIDFILE ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;$PIDFILE exists, process is not running.&quot;</span><br><span class="line">                else</span><br><span class="line">                        PID=$(cat $PIDFILE)</span><br><span class="line">                        echo &quot;Stopping...&quot;</span><br><span class="line">                        $REDIS_CLI -p $REDISPORT SHUTDOWN</span><br><span class="line">                        while [ -x $PIDFILE ]</span><br><span class="line">                        do</span><br><span class="line">                                echo &quot;Waiting for Redis to shutdown...&quot;</span><br><span class="line">                                sleep 1</span><br><span class="line">                        done</span><br><span class="line">                        echo &quot;Redis stopped&quot;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        restart|force-reload)</span><br><span class="line">                $&#123;0&#125; stop</span><br><span class="line">                $&#123;0&#125; start</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</span><br><span class="line">                exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>执行权限：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure></li><li><p>开机自启动：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 尝试启动或停止redis</span><br><span class="line">service redis start</span><br><span class="line">service redis stop</span><br><span class="line"></span><br><span class="line"># 开启服务自启动</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><p>参考<a href="http://ju.outofmemory.cn/entry/53632">yum安装Tomcat</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tomcat8</span><br></pre></td></tr></table></figure><p>使用yum命令安装完成之后，可以方便的使用 <code>$ tomcat start</code> 和 <code>$ tomcat stop</code> 命令开关tomcat。<br>tomcat的安装目录位于 <code>/usr/share/tomcat</code> 下。</p><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><ul><li>vim  <blockquote><p>参考<a href="http://www.cnblogs.com/qianxiaoruofeng/p/5778733.html">yum 安装vim编辑器</a></p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim</span><br></pre></td></tr></table></figure></li><li><a href="http://rj.baidu.com/soft/detail/18249.html?ald">Xftp</a></li><li>Git<br><a href="https://git-scm.com/download/linux">Git下载与安装</a><br><a href="http://blog.csdn.net/laiahu/article/details/7516939">centos上如何yum安装git?</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程 - 廖雪峰的官方网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo快速搭建个人博客</title>
      <link href="/2016/11/24/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2016/11/24/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>摘要：本文主要介绍使用 <strong>hexo博客框架</strong> + <strong>GitHub托管代码</strong> + <strong>GitHub Pages</strong> 搭建个人博客网站。</p><p>由于各种原因，博主一直都有搭建个人博客的想法。在使用hexo之前，博主曾尝试过使用SpringBoot + JQuery编写了一个包含博客功能的<a href="https://github.com/YupaiTS/footprints">网站</a>，由于这种运行于Java环境的项目正式部署到线上比较麻烦，所以就舍弃了。<br>偶然间发现了hexo搭配GitHub Pages可以快速搭建一个博客网站，心中甚是欢喜，立马就动手搭建了起来。在这里分享下使用这种方式搭建博客网站的过程。</p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>进入<a href="https://git-scm.com/">git官网</a>，下载安装git工具即可。</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>同样的，进入<a href="https://nodejs.org/en/">node.js官网</a>，下载安装node.js工具即可。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>hexo的安装需要node.js环境，在命令行中输入以下命令安装hexo-cli（hexo的命令行工具）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h2><h3 id="创建本地hexo项目"><a href="#创建本地hexo项目" class="headerlink" title="创建本地hexo项目"></a>创建本地hexo项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog  <span class="comment">#使用hexo初始化blog项目</span></span><br><span class="line"><span class="built_in">cd</span> blog         <span class="comment">#进入blog目录</span></span><br><span class="line">npm install     <span class="comment">#安装依赖</span></span><br><span class="line">hexo server     <span class="comment">#启动本地web服务，在浏览器输入localhost:4000预览博客</span></span><br></pre></td></tr></table></figure><h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态网站后，项目的目录结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.deploy/        #需部署文件</span><br><span class="line">node_modules/   #node.js依赖的插件</span><br><span class="line">public/         #生成的静态网页文件</span><br><span class="line">scaffolds/      #模版</span><br><span class="line">source/         #博客正文和其他源文件</span><br><span class="line">themes/         #主题</span><br><span class="line">_config.yml     #全局配置文件</span><br></pre></td></tr></table></figure><h3 id="编辑-config-yml配置网站"><a href="#编辑-config-yml配置网站" class="headerlink" title="编辑_config.yml配置网站"></a>编辑_config.yml配置网站</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration     </span></span><br><span class="line"><span class="comment">## Docs: [https://hexo.io/docs/configuration.html](https://hexo.io/docs/configuration.html)     </span></span><br><span class="line"><span class="comment">## Source: [https://github.com/hexojs/hexo/](https://github.com/hexojs/hexo/)</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment">#站点描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"><span class="comment"># URL     </span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as ‘[http://yoursite.com/child](http://yoursite.com/child)‘ and root as ‘/child/‘</span></span><br><span class="line"><span class="attr">url:</span>  <span class="comment">#网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> <span class="comment">#文章的链接格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#源文件目录</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#生成的网页文件目录</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签目录</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档目录</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment">#新文章标题</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#默认模版，包括post、page、photo、draft（文章、页面、照片、草稿）</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span>  </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"><span class="comment"># Category</span></span><br><span class="line"><span class="attr">Tagdefault_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"><span class="comment"># Date / Time format     </span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date     </span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in     </span></span><br><span class="line"><span class="comment">## [http://momentjs.com/docs/#/displaying/format/](http://momentjs.com/docs/#/displaying/format/)</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment"># Pagination     </span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="comment"># Extensions     </span></span><br><span class="line"><span class="comment">## Plugins: [https://hexo.io/plugins/](https://hexo.io/plugins/)     </span></span><br><span class="line"><span class="comment">## Themes: [https://hexo.io/themes/](https://hexo.io/themes/)</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">apollo</span> <span class="comment">#主题</span></span><br><span class="line"><span class="comment"># Deployment     </span></span><br><span class="line"><span class="comment">## Docs: [https://hexo.io/docs/deployment.html](https://hexo.io/docs/deployment.html)</span></span><br><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">远程仓库地址</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="hexo命令行"><a href="#hexo命令行" class="headerlink" title="hexo命令行"></a>hexo命令行</h3><ul><li>常用命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span>                   <span class="comment">#查看帮助</span></span><br><span class="line">hexo init                   <span class="comment">#初始化一个目录</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span>         <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span>    <span class="comment">#新建页面</span></span><br><span class="line">hexo generate               <span class="comment">#生成网页，可在public目录查看</span></span><br><span class="line">hexo server                 <span class="comment">#本地预览</span></span><br><span class="line">hexo deploy                 <span class="comment">#部署.deploy目录</span></span><br><span class="line">hexo clean                  <span class="comment">#清除缓存，每次部署前都要删除.deploy目录</span></span><br></pre></td></tr></table></figure><ul><li>简写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>使用<code>hexo new postName</code>命令新建文章之后，可以在<code>/source/_posts/</code>目录下看到以postName命名的markdown文件，对该md文件进行编辑即可。</p><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><ul><li>添加rss订阅功能</li></ul><p>安装hexo-generator-feed插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed –-save</span><br></pre></td></tr></table></figure><p>安装完成后，打开**_config.yml**文件进行配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: [http://hexo.io/plugins/](http://hexo.io/plugins/)     </span></span><br><span class="line"><span class="comment">#RSS订阅     </span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="comment">#可选项，可以不填</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>打开当前主题的**_config.yml**文件，添加RSS订阅链接。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><h3 id="注册GitHub帐号"><a href="#注册GitHub帐号" class="headerlink" title="注册GitHub帐号"></a>注册GitHub帐号</h3><p>进入<a href="https://github.com/">GitHub官网</a>注册帐号。</p><h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><p>使用注册的GitHub帐号登录之后，创建名称为<code>username.github.io</code>的仓库，这是特殊的命名约定。可以通过<a href="http://username.github.io/">http://username.github.io</a>来访问个人主页。</p><h3 id="使用SSH方式push代码到GitHub仓库"><a href="#使用SSH方式push代码到GitHub仓库" class="headerlink" title="使用SSH方式push代码到GitHub仓库"></a>使用SSH方式push代码到GitHub仓库</h3><p>打开<strong>Git Bash</strong>工具，进入<code>.ssh/</code>目录，生成新的SSH key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Email地址&quot;</span></span><br></pre></td></tr></table></figure><p>之后会看到如下信息：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</p></blockquote><p>回车之后会要求输入密码。</p><blockquote><p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;</p></blockquote><p>如果输入的密码为空，在提交代码时系统不会弹出要求输入密码的弹框。</p><p>进入<a href="https://github.com/">GitHub</a>， 点击头像进入<code>settings SSH and GPG keys New SSH key</code>选项，将公钥文件<code>~/.ssh/id_rsa.pub</code>的内容复制到Key里，点击<code>Add SSH key</code>按钮即可向GitHub添加SSH key。</p><h2 id="部署hexo到GitHub-Pages"><a href="#部署hexo到GitHub-Pages" class="headerlink" title="部署hexo到GitHub Pages"></a>部署hexo到GitHub Pages</h2><h3 id="配置代码仓库"><a href="#配置代码仓库" class="headerlink" title="配置代码仓库"></a>配置代码仓库</h3><p>打开 <strong>_config.yml</strong>文件，配置代码仓库。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>打开<strong>Git Bash</strong>工具，输入以下命令部署hexo到GitHub Pages。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除缓存</span></span><br><span class="line">hexo g      <span class="comment">#生成网页文件</span></span><br><span class="line">hexo d      <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><p>生成SSH key的时候如果设置了密码的话，系统会弹窗提示输入密码，输入正确的密码即可完成部署。</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>进入<a href="https://yupaits.github.io/">GitHub Pages</a>可以查看博客。如果有自己的域名的话，可以在 GitHub 的项目 <code>settings -&gt; GitHub Pages -&gt; Custom Domain</code> 中填写个人博客域名保存，并将个人博客域名以 <strong>CNAME</strong> 方式解析到 <code>yupaits.github.io</code> 即可在自己的博客域名中浏览博客。如果不想每次 <code>hexo d</code> 部署博客之后都去 GitHub Pages 中修改域名，可以在 <code>sources</code> 目录下新建一个名为 <code>CNAME</code> 的文件，并用文本编辑器打开该文件输入博客域名保存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
